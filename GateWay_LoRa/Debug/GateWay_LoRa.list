
GateWay_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000923c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08009350  08009350  0000a350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a4  080098a4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080098a4  080098a4  0000a8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098ac  080098ac  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ac  080098ac  0000a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098b0  080098b0  0000a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080098b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001d4  08009a88  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08009a88  0000b454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2af  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5a  00000000  00000000  000154ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00017208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079c  00000000  00000000  00017c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181c1  00000000  00000000  0001839c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b808  00000000  00000000  0003055d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086006  00000000  00000000  0003bd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  000c1db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c5e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009334 	.word	0x08009334

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009334 	.word	0x08009334

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_d2lz>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	f7ff fead 	bl	80009bc <__aeabi_dcmplt>
 8000c62:	b928      	cbnz	r0, 8000c70 <__aeabi_d2lz+0x1c>
 8000c64:	4620      	mov	r0, r4
 8000c66:	4629      	mov	r1, r5
 8000c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c6c:	f000 b80a 	b.w	8000c84 <__aeabi_d2ulz>
 8000c70:	4620      	mov	r0, r4
 8000c72:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c76:	f000 f805 	bl	8000c84 <__aeabi_d2ulz>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	bd38      	pop	{r3, r4, r5, pc}
 8000c82:	bf00      	nop

08000c84 <__aeabi_d2ulz>:
 8000c84:	b5d0      	push	{r4, r6, r7, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <__aeabi_d2ulz+0x34>)
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	460f      	mov	r7, r1
 8000c8e:	f7ff fc23 	bl	80004d8 <__aeabi_dmul>
 8000c92:	f7ff fef9 	bl	8000a88 <__aeabi_d2uiz>
 8000c96:	4604      	mov	r4, r0
 8000c98:	f7ff fba4 	bl	80003e4 <__aeabi_ui2d>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <__aeabi_d2ulz+0x38>)
 8000ca0:	f7ff fc1a 	bl	80004d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4630      	mov	r0, r6
 8000caa:	4639      	mov	r1, r7
 8000cac:	f7ff fa5c 	bl	8000168 <__aeabi_dsub>
 8000cb0:	f7ff feea 	bl	8000a88 <__aeabi_d2uiz>
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb8:	3df00000 	.word	0x3df00000
 8000cbc:	41f00000 	.word	0x41f00000

08000cc0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000cc0:	b4b0      	push	{r4, r5, r7}
 8000cc2:	b08f      	sub	sp, #60	@ 0x3c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000cc8:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000ce0:	23ff      	movs	r3, #255	@ 0xff
 8000ce2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000ce6:	2364      	movs	r3, #100	@ 0x64
 8000ce8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000cec:	2308      	movs	r3, #8
 8000cee:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	461d      	mov	r5, r3
 8000cf4:	f107 040c 	add.w	r4, r7, #12
 8000cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d00:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	373c      	adds	r7, #60	@ 0x3c
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bcb0      	pop	{r4, r5, r7}
 8000d10:	4770      	bx	lr

08000d12 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f9ff 	bl	8001122 <LoRa_read>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d28:	7bbb      	ldrb	r3, [r7, #14]
 8000d2a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d107      	bne.n	8000d42 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	f023 0307 	bic.w	r3, r3, #7
 8000d38:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
 8000d40:	e03e      	b.n	8000dc0 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d10c      	bne.n	8000d62 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d4c:	f023 0307 	bic.w	r3, r3, #7
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	61da      	str	r2, [r3, #28]
 8000d60:	e02e      	b.n	8000dc0 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d10c      	bne.n	8000d82 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d6c:	f023 0307 	bic.w	r3, r3, #7
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	f043 0303 	orr.w	r3, r3, #3
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	61da      	str	r2, [r3, #28]
 8000d80:	e01e      	b.n	8000dc0 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d10c      	bne.n	8000da2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d8c:	f023 0307 	bic.w	r3, r3, #7
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	f043 0305 	orr.w	r3, r3, #5
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	61da      	str	r2, [r3, #28]
 8000da0:	e00e      	b.n	8000dc0 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2b06      	cmp	r3, #6
 8000da6:	d10b      	bne.n	8000dc0 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dac:	f023 0307 	bic.w	r3, r3, #7
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	f043 0306 	orr.w	r3, r3, #6
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2206      	movs	r2, #6
 8000dbe:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f9c5 	bl	8001156 <LoRa_write>
	//HAL_Delay(10);
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	889b      	ldrh	r3, [r3, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	f001 faca 	bl	8002388 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6998      	ldr	r0, [r3, #24]
 8000df8:	88fa      	ldrh	r2, [r7, #6]
 8000dfa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	f001 ff6e 	bl	8002ce0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e04:	bf00      	nop
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 fb6e 	bl	80034ec <HAL_SPI_GetState>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d1f7      	bne.n	8000e06 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6998      	ldr	r0, [r3, #24]
 8000e1a:	8b3a      	ldrh	r2, [r7, #24]
 8000e1c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e20:	6839      	ldr	r1, [r7, #0]
 8000e22:	f002 f8a1 	bl	8002f68 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e26:	bf00      	nop
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 fb5d 	bl	80034ec <HAL_SPI_GetState>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d1f7      	bne.n	8000e28 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	889b      	ldrh	r3, [r3, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	f001 faa0 	bl	8002388 <HAL_GPIO_WritePin>
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	889b      	ldrh	r3, [r3, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f001 fa8c 	bl	8002388 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6998      	ldr	r0, [r3, #24]
 8000e74:	88fa      	ldrh	r2, [r7, #6]
 8000e76:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e7a:	68b9      	ldr	r1, [r7, #8]
 8000e7c:	f001 ff30 	bl	8002ce0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e80:	bf00      	nop
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 fb30 	bl	80034ec <HAL_SPI_GetState>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1f7      	bne.n	8000e82 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6998      	ldr	r0, [r3, #24]
 8000e96:	8b3a      	ldrh	r2, [r7, #24]
 8000e98:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	f001 ff1f 	bl	8002ce0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ea2:	bf00      	nop
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 fb1f 	bl	80034ec <HAL_SPI_GetState>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d1f7      	bne.n	8000ea4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	889b      	ldrh	r3, [r3, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f001 fa62 	bl	8002388 <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000ed8:	2126      	movs	r1, #38	@ 0x26
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f921 	bl	8001122 <LoRa_read>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e003      	b.n	8000efc <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	f023 0308 	bic.w	r3, r3, #8
 8000efa:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	461a      	mov	r2, r3
 8000f00:	2126      	movs	r1, #38	@ 0x26
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f927 	bl	8001156 <LoRa_write>
	HAL_Delay(10);
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f000 fed5 	bl	8001cb8 <HAL_Delay>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	@ 0x58
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000f20:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <LoRa_setAutoLDO+0x68>)
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	4611      	mov	r1, r2
 8000f28:	2250      	movs	r2, #80	@ 0x50
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 fb57 	bl	80055de <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f36:	461a      	mov	r2, r3
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa61 	bl	8000404 <__aeabi_i2d>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	3358      	adds	r3, #88	@ 0x58
 8000f4c:	443b      	add	r3, r7
 8000f4e:	3b50      	subs	r3, #80	@ 0x50
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff fbea 	bl	800072c <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fd6a 	bl	8000a38 <__aeabi_d2iz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b10      	cmp	r3, #16
 8000f68:	bfcc      	ite	gt
 8000f6a:	2301      	movgt	r3, #1
 8000f6c:	2300      	movle	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4619      	mov	r1, r3
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffaa 	bl	8000ecc <LoRa_setLowDaraRateOptimization>
}
 8000f78:	bf00      	nop
 8000f7a:	3758      	adds	r7, #88	@ 0x58
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08009350 	.word	0x08009350

08000f84 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	04db      	lsls	r3, r3, #19
 8000f92:	115b      	asrs	r3, r3, #5
 8000f94:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	0c1b      	lsrs	r3, r3, #16
 8000f9a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2106      	movs	r1, #6
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f8d7 	bl	8001156 <LoRa_write>
	HAL_Delay(5);
 8000fa8:	2005      	movs	r0, #5
 8000faa:	f000 fe85 	bl	8001cb8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2107      	movs	r1, #7
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f8cb 	bl	8001156 <LoRa_write>
	HAL_Delay(5);
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f000 fe79 	bl	8001cb8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2108      	movs	r1, #8
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f8c0 	bl	8001156 <LoRa_write>
	HAL_Delay(5);
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f000 fe6e 	bl	8001cb8 <HAL_Delay>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b0c      	cmp	r3, #12
 8000ff2:	dd01      	ble.n	8000ff8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	dc01      	bgt.n	8001002 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000ffe:	2307      	movs	r3, #7
 8001000:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001002:	211e      	movs	r1, #30
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f88c 	bl	8001122 <LoRa_read>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800100e:	200a      	movs	r0, #10
 8001010:	f000 fe52 	bl	8001cb8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	b2da      	uxtb	r2, r3
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4413      	add	r3, r2
 8001026:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	461a      	mov	r2, r3
 800102c:	211e      	movs	r1, #30
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f891 	bl	8001156 <LoRa_write>
	HAL_Delay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f000 fe3f 	bl	8001cb8 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff6c 	bl	8000f18 <LoRa_setAutoLDO>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	461a      	mov	r2, r3
 8001058:	2109      	movs	r1, #9
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f87b 	bl	8001156 <LoRa_write>
	HAL_Delay(10);
 8001060:	200a      	movs	r0, #10
 8001062:	f000 fe29 	bl	8001cb8 <HAL_Delay>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	2b2c      	cmp	r3, #44	@ 0x2c
 8001084:	d801      	bhi.n	800108a <LoRa_setOCP+0x1a>
		current = 45;
 8001086:	232d      	movs	r3, #45	@ 0x2d
 8001088:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2bf0      	cmp	r3, #240	@ 0xf0
 800108e:	d901      	bls.n	8001094 <LoRa_setOCP+0x24>
		current = 240;
 8001090:	23f0      	movs	r3, #240	@ 0xf0
 8001092:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b78      	cmp	r3, #120	@ 0x78
 8001098:	d809      	bhi.n	80010ae <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	3b2d      	subs	r3, #45	@ 0x2d
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <LoRa_setOCP+0x78>)
 80010a0:	fb82 1203 	smull	r1, r2, r2, r3
 80010a4:	1052      	asrs	r2, r2, #1
 80010a6:	17db      	asrs	r3, r3, #31
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e00b      	b.n	80010c6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	2bf0      	cmp	r3, #240	@ 0xf0
 80010b2:	d808      	bhi.n	80010c6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	331e      	adds	r3, #30
 80010b8:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <LoRa_setOCP+0x78>)
 80010ba:	fb82 1203 	smull	r1, r2, r2, r3
 80010be:	1092      	asrs	r2, r2, #2
 80010c0:	17db      	asrs	r3, r3, #31
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3320      	adds	r3, #32
 80010ca:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	461a      	mov	r2, r3
 80010d0:	210b      	movs	r1, #11
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f83f 	bl	8001156 <LoRa_write>
	HAL_Delay(10);
 80010d8:	200a      	movs	r0, #10
 80010da:	f000 fded 	bl	8001cb8 <HAL_Delay>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	66666667 	.word	0x66666667

080010ec <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80010f4:	211e      	movs	r1, #30
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f813 	bl	8001122 <LoRa_read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f043 0307 	orr.w	r3, r3, #7
 8001106:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	461a      	mov	r2, r3
 800110c:	211e      	movs	r1, #30
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f821 	bl	8001156 <LoRa_write>
	HAL_Delay(10);
 8001114:	200a      	movs	r0, #10
 8001116:	f000 fdcf 	bl	8001cb8 <HAL_Delay>
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af02      	add	r7, sp, #8
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001138:	f107 030f 	add.w	r3, r7, #15
 800113c:	f107 010e 	add.w	r1, r7, #14
 8001140:	2201      	movs	r2, #1
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	2201      	movs	r2, #1
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fe44 	bl	8000dd4 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af02      	add	r7, sp, #8
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	4613      	mov	r3, r2
 8001164:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001170:	78bb      	ldrb	r3, [r7, #2]
 8001172:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001174:	f107 030f 	add.w	r3, r7, #15
 8001178:	f107 010e 	add.w	r1, r7, #14
 800117c:	2201      	movs	r2, #1
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fe64 	bl	8000e50 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

	return 1;
 8001198:	2301      	movs	r3, #1
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80011ac:	2105      	movs	r1, #5
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fdaf 	bl	8000d12 <LoRa_gotoMode>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	4613      	mov	r3, r2
 80011c8:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	e007      	b.n	80011e4 <LoRa_receive+0x28>
		data[i]=0;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	4413      	add	r3, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf3      	blt.n	80011d4 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80011ec:	2101      	movs	r1, #1
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff fd8f 	bl	8000d12 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80011f4:	2112      	movs	r1, #18
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ff93 	bl	8001122 <LoRa_read>
 80011fc:	4603      	mov	r3, r0
 80011fe:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d02f      	beq.n	800126a <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800120a:	22ff      	movs	r2, #255	@ 0xff
 800120c:	2112      	movs	r1, #18
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff ffa1 	bl	8001156 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001214:	2113      	movs	r1, #19
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff ff83 	bl	8001122 <LoRa_read>
 800121c:	4603      	mov	r3, r0
 800121e:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001220:	2110      	movs	r1, #16
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff ff7d 	bl	8001122 <LoRa_read>
 8001228:	4603      	mov	r3, r0
 800122a:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800122c:	7cfb      	ldrb	r3, [r7, #19]
 800122e:	461a      	mov	r2, r3
 8001230:	210d      	movs	r1, #13
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff ff8f 	bl	8001156 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001238:	7cba      	ldrb	r2, [r7, #18]
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4293      	cmp	r3, r2
 800123e:	bf28      	it	cs
 8001240:	4613      	movcs	r3, r2
 8001242:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e00b      	b.n	8001262 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	18d4      	adds	r4, r2, r3
 8001250:	2100      	movs	r1, #0
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff ff65 	bl	8001122 <LoRa_read>
 8001258:	4603      	mov	r3, r0
 800125a:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	7ffb      	ldrb	r3, [r7, #31]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	429a      	cmp	r2, r3
 8001268:	dbef      	blt.n	800124a <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800126a:	2105      	movs	r1, #5
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff fd50 	bl	8000d12 <LoRa_gotoMode>
    return min;
 8001272:	7ffb      	ldrb	r3, [r7, #31]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3724      	adds	r7, #36	@ 0x24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd90      	pop	{r4, r7, pc}

0800127c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff83 	bl	8001190 <LoRa_isvalid>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 8096 	beq.w	80013be <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001292:	2100      	movs	r1, #0
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fd3c 	bl	8000d12 <LoRa_gotoMode>
			HAL_Delay(10);
 800129a:	200a      	movs	r0, #10
 800129c:	f000 fd0c 	bl	8001cb8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80012a0:	2101      	movs	r1, #1
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff3d 	bl	8001122 <LoRa_read>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f000 fd03 	bl	8001cb8 <HAL_Delay>
			data = read | 0x80;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012b8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	461a      	mov	r2, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff48 	bl	8001156 <LoRa_write>
			HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	@ 0x64
 80012c8:	f000 fcf6 	bl	8001cb8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4619      	mov	r1, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fe56 	bl	8000f84 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff feb1 	bl	8001048 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff febe 	bl	8001070 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80012f4:	2223      	movs	r2, #35	@ 0x23
 80012f6:	210c      	movs	r1, #12
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff2c 	bl	8001156 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fef4 	bl	80010ec <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fe69 	bl	8000fe4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001312:	22ff      	movs	r2, #255	@ 0xff
 8001314:	211f      	movs	r1, #31
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff1d 	bl	8001156 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	b2da      	uxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4413      	add	r3, r2
 8001336:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001338:	7bbb      	ldrb	r3, [r7, #14]
 800133a:	461a      	mov	r2, r3
 800133c:	211d      	movs	r1, #29
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff09 	bl	8001156 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fde7 	bl	8000f18 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	2120      	movs	r1, #32
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fefc 	bl	8001156 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	2121      	movs	r1, #33	@ 0x21
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fef4 	bl	8001156 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800136e:	2140      	movs	r1, #64	@ 0x40
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fed6 	bl	8001122 <LoRa_read>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001380:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	461a      	mov	r2, r3
 8001386:	2140      	movs	r1, #64	@ 0x40
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fee4 	bl	8001156 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800138e:	2101      	movs	r1, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fcbe 	bl	8000d12 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800139c:	200a      	movs	r0, #10
 800139e:	f000 fc8b 	bl	8001cb8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80013a2:	2142      	movs	r1, #66	@ 0x42
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff febc 	bl	8001122 <LoRa_read>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b12      	cmp	r3, #18
 80013b2:	d101      	bne.n	80013b8 <LoRa_init+0x13c>
				return LORA_OK;
 80013b4:	23c8      	movs	r3, #200	@ 0xc8
 80013b6:	e004      	b.n	80013c2 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80013b8:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80013bc:	e001      	b.n	80013c2 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80013be:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <_write>:
LoRa myLoRa;
char buffer[64];
uint8_t recv_buf[64];
uint8_t recv_len;

int _write(int file, char *ptr, int len) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <_write+0x28>)
 80013e4:	f002 f9eb 	bl	80037be <HAL_UART_Transmit>
    return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000248 	.word	0x20000248

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	b09b      	sub	sp, #108	@ 0x6c
 80013fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f000 fbf9 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001402:	f000 f907 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001406:	f000 f9ab 	bl	8001760 <MX_GPIO_Init>
  MX_SPI1_Init();
 800140a:	f000 f949 	bl	80016a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800140e:	f000 f97d 	bl	800170c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Init LoRa
  myLoRa = newLoRa();
 8001412:	4c6f      	ldr	r4, [pc, #444]	@ (80015d0 <main+0x1d8>)
 8001414:	463b      	mov	r3, r7
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc52 	bl	8000cc0 <newLoRa>
 800141c:	4625      	mov	r5, r4
 800141e:	463c      	mov	r4, r7
 8001420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001428:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800142c:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001430:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <main+0x1d8>)
 8001432:	4a68      	ldr	r2, [pc, #416]	@ (80015d4 <main+0x1dc>)
 8001434:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8001436:	4b66      	ldr	r3, [pc, #408]	@ (80015d0 <main+0x1d8>)
 8001438:	2210      	movs	r2, #16
 800143a:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 800143c:	4b64      	ldr	r3, [pc, #400]	@ (80015d0 <main+0x1d8>)
 800143e:	4a66      	ldr	r2, [pc, #408]	@ (80015d8 <main+0x1e0>)
 8001440:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001442:	4b63      	ldr	r3, [pc, #396]	@ (80015d0 <main+0x1d8>)
 8001444:	2202      	movs	r2, #2
 8001446:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001448:	4b61      	ldr	r3, [pc, #388]	@ (80015d0 <main+0x1d8>)
 800144a:	4a62      	ldr	r2, [pc, #392]	@ (80015d4 <main+0x1dc>)
 800144c:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 800144e:	4b60      	ldr	r3, [pc, #384]	@ (80015d0 <main+0x1d8>)
 8001450:	2201      	movs	r2, #1
 8001452:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001454:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <main+0x1d8>)
 8001456:	4a61      	ldr	r2, [pc, #388]	@ (80015dc <main+0x1e4>)
 8001458:	619a      	str	r2, [r3, #24]

  LoRa_init(&myLoRa);
 800145a:	485d      	ldr	r0, [pc, #372]	@ (80015d0 <main+0x1d8>)
 800145c:	f7ff ff0e 	bl	800127c <LoRa_init>

    if (!LoRa_init(&myLoRa)) {
 8001460:	485b      	ldr	r0, [pc, #364]	@ (80015d0 <main+0x1d8>)
 8001462:	f7ff ff0b 	bl	800127c <LoRa_init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d106      	bne.n	800147a <main+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)"LoRa init failed\r\n", 18, 100);
 800146c:	2364      	movs	r3, #100	@ 0x64
 800146e:	2212      	movs	r2, #18
 8001470:	495b      	ldr	r1, [pc, #364]	@ (80015e0 <main+0x1e8>)
 8001472:	485c      	ldr	r0, [pc, #368]	@ (80015e4 <main+0x1ec>)
 8001474:	f002 f9a3 	bl	80037be <HAL_UART_Transmit>
 8001478:	e008      	b.n	800148c <main+0x94>
    }
    else {
    	HAL_UART_Transmit(&huart1, (uint8_t*)"LoRa init done\r\n", 14, 100);
 800147a:	2364      	movs	r3, #100	@ 0x64
 800147c:	220e      	movs	r2, #14
 800147e:	495a      	ldr	r1, [pc, #360]	@ (80015e8 <main+0x1f0>)
 8001480:	4858      	ldr	r0, [pc, #352]	@ (80015e4 <main+0x1ec>)
 8001482:	f002 f99c 	bl	80037be <HAL_UART_Transmit>
    	LoRa_startReceiving(&myLoRa);
 8001486:	4852      	ldr	r0, [pc, #328]	@ (80015d0 <main+0x1d8>)
 8001488:	f7ff fe8c 	bl	80011a4 <LoRa_startReceiving>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  recv_len = LoRa_receive(&myLoRa, recv_buf, sizeof(recv_buf));
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	4957      	ldr	r1, [pc, #348]	@ (80015ec <main+0x1f4>)
 8001490:	484f      	ldr	r0, [pc, #316]	@ (80015d0 <main+0x1d8>)
 8001492:	f7ff fe93 	bl	80011bc <LoRa_receive>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	4b55      	ldr	r3, [pc, #340]	@ (80015f0 <main+0x1f8>)
 800149c:	701a      	strb	r2, [r3, #0]
	          if (recv_len > 0) {
 800149e:	4b54      	ldr	r3, [pc, #336]	@ (80015f0 <main+0x1f8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 808e 	beq.w	80015c4 <main+0x1cc>
	              recv_buf[recv_len] = '\0';
 80014a8:	4b51      	ldr	r3, [pc, #324]	@ (80015f0 <main+0x1f8>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b4f      	ldr	r3, [pc, #316]	@ (80015ec <main+0x1f4>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	5499      	strb	r1, [r3, r2]
	              printf("Received: %s\r\n", recv_buf);
 80014b4:	494d      	ldr	r1, [pc, #308]	@ (80015ec <main+0x1f4>)
 80014b6:	484f      	ldr	r0, [pc, #316]	@ (80015f4 <main+0x1fc>)
 80014b8:	f003 fe6c 	bl	8005194 <iprintf>

	              // Tách dữ liệu theo định dạng "NODE99:28.3:70.5"
	              char node_tag[10];
	              int node_id, temp_int, temp_frac, humi_int, humi_frac;

	              if (sscanf((char*)recv_buf, "%[^0-9]%d:%d.%d:%d.%d",
 80014bc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80014c0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80014c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014c8:	9303      	str	r3, [sp, #12]
 80014ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	460b      	mov	r3, r1
 80014de:	4946      	ldr	r1, [pc, #280]	@ (80015f8 <main+0x200>)
 80014e0:	4842      	ldr	r0, [pc, #264]	@ (80015ec <main+0x1f4>)
 80014e2:	f003 fee9 	bl	80052b8 <siscanf>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d168      	bne.n	80015be <main+0x1c6>
	                         node_tag, &node_id,
	                         &temp_int, &temp_frac,
	                         &humi_int, &humi_frac) == 6) {

	                  float temp = temp_int + temp_frac / 10.0;
 80014ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ff88 	bl	8000404 <__aeabi_i2d>
 80014f4:	4604      	mov	r4, r0
 80014f6:	460d      	mov	r5, r1
 80014f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ff82 	bl	8000404 <__aeabi_i2d>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <main+0x204>)
 8001506:	f7ff f911 	bl	800072c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7fe fe2b 	bl	800016c <__adddf3>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fad3 	bl	8000ac8 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	657b      	str	r3, [r7, #84]	@ 0x54
	                  float humi = humi_int + humi_frac / 10.0;
 8001526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ff6b 	bl	8000404 <__aeabi_i2d>
 800152e:	4604      	mov	r4, r0
 8001530:	460d      	mov	r5, r1
 8001532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ff65 	bl	8000404 <__aeabi_i2d>
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b2f      	ldr	r3, [pc, #188]	@ (80015fc <main+0x204>)
 8001540:	f7ff f8f4 	bl	800072c <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fe0e 	bl	800016c <__adddf3>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fab6 	bl	8000ac8 <__aeabi_d2f>
 800155c:	4603      	mov	r3, r0
 800155e:	653b      	str	r3, [r7, #80]	@ 0x50

	                  printf("Node: %d, Temp: %.1f C, Humi: %.1f %%\r\n", node_id, temp, humi);
 8001560:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
 8001562:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001564:	f7fe ff60 	bl	8000428 <__aeabi_f2d>
 8001568:	4604      	mov	r4, r0
 800156a:	460d      	mov	r5, r1
 800156c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800156e:	f7fe ff5b 	bl	8000428 <__aeabi_f2d>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	e9cd 2300 	strd	r2, r3, [sp]
 800157a:	4622      	mov	r2, r4
 800157c:	462b      	mov	r3, r5
 800157e:	4631      	mov	r1, r6
 8001580:	481f      	ldr	r0, [pc, #124]	@ (8001600 <main+0x208>)
 8001582:	f003 fe07 	bl	8005194 <iprintf>

	                  // Bật LED cảnh báo nếu vượt ngưỡng
	                  if (temp > 35.0 || humi > 80.0) {
 8001586:	491f      	ldr	r1, [pc, #124]	@ (8001604 <main+0x20c>)
 8001588:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800158a:	f7ff fb59 	bl	8000c40 <__aeabi_fcmpgt>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d106      	bne.n	80015a2 <main+0x1aa>
 8001594:	491c      	ldr	r1, [pc, #112]	@ (8001608 <main+0x210>)
 8001596:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001598:	f7ff fb52 	bl	8000c40 <__aeabi_fcmpgt>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <main+0x1b8>
	                      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015a8:	4818      	ldr	r0, [pc, #96]	@ (800160c <main+0x214>)
 80015aa:	f000 feed 	bl	8002388 <HAL_GPIO_WritePin>
 80015ae:	e009      	b.n	80015c4 <main+0x1cc>
	                  } else {
	                      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // LED OFF
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015b6:	4815      	ldr	r0, [pc, #84]	@ (800160c <main+0x214>)
 80015b8:	f000 fee6 	bl	8002388 <HAL_GPIO_WritePin>
 80015bc:	e002      	b.n	80015c4 <main+0x1cc>
	                  }
	              } else {
	                  printf("Parse Error\r\n");
 80015be:	4814      	ldr	r0, [pc, #80]	@ (8001610 <main+0x218>)
 80015c0:	f003 fe50 	bl	8005264 <puts>
	              }
	          }

	          HAL_Delay(1000); // Đọc liên tục
 80015c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015c8:	f000 fb76 	bl	8001cb8 <HAL_Delay>
	  recv_len = LoRa_receive(&myLoRa, recv_buf, sizeof(recv_buf));
 80015cc:	e75e      	b.n	800148c <main+0x94>
 80015ce:	bf00      	nop
 80015d0:	20000290 	.word	0x20000290
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	200001f0 	.word	0x200001f0
 80015e0:	080093a0 	.word	0x080093a0
 80015e4:	20000248 	.word	0x20000248
 80015e8:	080093b4 	.word	0x080093b4
 80015ec:	200002bc 	.word	0x200002bc
 80015f0:	200002fc 	.word	0x200002fc
 80015f4:	080093c8 	.word	0x080093c8
 80015f8:	080093d8 	.word	0x080093d8
 80015fc:	40240000 	.word	0x40240000
 8001600:	080093f0 	.word	0x080093f0
 8001604:	420c0000 	.word	0x420c0000
 8001608:	42a00000 	.word	0x42a00000
 800160c:	40011000 	.word	0x40011000
 8001610:	08009418 	.word	0x08009418

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b090      	sub	sp, #64	@ 0x40
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0318 	add.w	r3, r7, #24
 800161e:	2228      	movs	r2, #40	@ 0x28
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f003 ff4e 	bl	80054c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001636:	2301      	movs	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800163e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001648:	2302      	movs	r3, #2
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001652:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	4618      	mov	r0, r3
 800165e:	f000 feab 	bl	80023b8 <HAL_RCC_OscConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001668:	f000 f8e6 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166c:	230f      	movs	r3, #15
 800166e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001670:	2302      	movs	r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001678:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2102      	movs	r1, #2
 8001686:	4618      	mov	r0, r3
 8001688:	f001 f918 	bl	80028bc <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001692:	f000 f8d1 	bl	8001838 <Error_Handler>
  }
}
 8001696:	bf00      	nop
 8001698:	3740      	adds	r7, #64	@ 0x40
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a4:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016a6:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <MX_SPI1_Init+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016d4:	2218      	movs	r2, #24
 80016d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e4:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016ec:	220a      	movs	r2, #10
 80016ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <MX_SPI1_Init+0x64>)
 80016f2:	f001 fa71 	bl	8002bd8 <HAL_SPI_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016fc:	f000 f89c 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200001f0 	.word	0x200001f0
 8001708:	40013000 	.word	0x40013000

0800170c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	@ (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f001 ffeb 	bl	800371e <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 f873 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000248 	.word	0x20000248
 800175c:	40013800 	.word	0x40013800

08001760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001774:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <MX_GPIO_Init+0xc8>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a2b      	ldr	r2, [pc, #172]	@ (8001828 <MX_GPIO_Init+0xc8>)
 800177a:	f043 0320 	orr.w	r3, r3, #32
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <MX_GPIO_Init+0xc8>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <MX_GPIO_Init+0xc8>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a25      	ldr	r2, [pc, #148]	@ (8001828 <MX_GPIO_Init+0xc8>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <MX_GPIO_Init+0xc8>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <MX_GPIO_Init+0xc8>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001828 <MX_GPIO_Init+0xc8>)
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <MX_GPIO_Init+0xc8>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2110      	movs	r1, #16
 80017c0:	481a      	ldr	r0, [pc, #104]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017c2:	f000 fde1 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2102      	movs	r1, #2
 80017ca:	4819      	ldr	r0, [pc, #100]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017cc:	f000 fddc 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80017d0:	2301      	movs	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <MX_GPIO_Init+0xd4>)
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	4619      	mov	r1, r3
 80017e2:	4812      	ldr	r0, [pc, #72]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017e4:	f000 fc4c 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80017e8:	2310      	movs	r3, #16
 80017ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	480b      	ldr	r0, [pc, #44]	@ (800182c <MX_GPIO_Init+0xcc>)
 8001800:	f000 fc3e 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001804:	2302      	movs	r3, #2
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2302      	movs	r3, #2
 8001812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_GPIO_Init+0xd0>)
 800181c:	f000 fc30 	bl	8002080 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	40010800 	.word	0x40010800
 8001830:	40010c00 	.word	0x40010c00
 8001834:	10110000 	.word	0x10110000

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <Error_Handler+0x8>

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_MspInit+0x5c>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6193      	str	r3, [r2, #24]
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_MspInit+0x60>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <HAL_MspInit+0x60>)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000

080018a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001930 <HAL_SPI_MspInit+0x88>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d12f      	bne.n	8001928 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <HAL_SPI_MspInit+0x8c>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a19      	ldr	r2, [pc, #100]	@ (8001934 <HAL_SPI_MspInit+0x8c>)
 80018ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <HAL_SPI_MspInit+0x8c>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <HAL_SPI_MspInit+0x8c>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <HAL_SPI_MspInit+0x8c>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_SPI_MspInit+0x8c>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018f8:	23a0      	movs	r3, #160	@ 0xa0
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4619      	mov	r1, r3
 800190a:	480b      	ldr	r0, [pc, #44]	@ (8001938 <HAL_SPI_MspInit+0x90>)
 800190c:	f000 fbb8 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001910:	2340      	movs	r3, #64	@ 0x40
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <HAL_SPI_MspInit+0x90>)
 8001924:	f000 fbac 	bl	8002080 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40013000 	.word	0x40013000
 8001934:	40021000 	.word	0x40021000
 8001938:	40010800 	.word	0x40010800

0800193c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <HAL_UART_MspInit+0x9c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d139      	bne.n	80019d0 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800195c:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <HAL_UART_MspInit+0xa0>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a1e      	ldr	r2, [pc, #120]	@ (80019dc <HAL_UART_MspInit+0xa0>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <HAL_UART_MspInit+0xa0>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <HAL_UART_MspInit+0xa0>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <HAL_UART_MspInit+0xa0>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_UART_MspInit+0xa0>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800198c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001990:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	4619      	mov	r1, r3
 80019a0:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <HAL_UART_MspInit+0xa4>)
 80019a2:	f000 fb6d 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4619      	mov	r1, r3
 80019ba:	4809      	ldr	r0, [pc, #36]	@ (80019e0 <HAL_UART_MspInit+0xa4>)
 80019bc:	f000 fb60 	bl	8002080 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2025      	movs	r0, #37	@ 0x25
 80019c6:	f000 fa72 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ca:	2025      	movs	r0, #37	@ 0x25
 80019cc:	f000 fa8b 	bl	8001ee6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013800 	.word	0x40013800
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010800 	.word	0x40010800

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <NMI_Handler+0x4>

080019ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <MemManage_Handler+0x4>

080019fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f924 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <USART1_IRQHandler+0x10>)
 8001a42:	f001 ff47 	bl	80038d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000248 	.word	0x20000248

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <_kill>:

int _kill(int pid, int sig)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a68:	f003 fd7e 	bl	8005568 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2216      	movs	r2, #22
 8001a70:	601a      	str	r2, [r3, #0]
  return -1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_exit>:

void _exit (int status)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffe7 	bl	8001a5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
  }

  return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af4:	605a      	str	r2, [r3, #4]
  return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f003 fd02 	bl	8005568 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20005000 	.word	0x20005000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	20000300 	.word	0x20000300
 8001b98:	20000458 	.word	0x20000458

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba8:	f7ff fff8 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	@ (8001bdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bae:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a09      	ldr	r2, [pc, #36]	@ (8001be8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bc4:	4c09      	ldr	r4, [pc, #36]	@ (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f003 fccf 	bl	8005574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff fc0f 	bl	80013f8 <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001be4:	080098b4 	.word	0x080098b4
  ldr r2, =_sbss
 8001be8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bec:	20000454 	.word	0x20000454

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f947 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fe18 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f95f 	bl	8001f02 <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f927 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	@ (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000304 	.word	0x20000304

08001ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	@ (8001cb4 <HAL_GetTick+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000304 	.word	0x20000304

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_Delay+0x44>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffe0 	bl	8001ca4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4906      	ldr	r1, [pc, #24]	@ (8001d98 <__NVIC_EnableIRQ+0x34>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	@ (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff90 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff2d 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec0:	f7ff ff42 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff ff90 	bl	8001df0 <NVIC_EncodePriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff5f 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff35 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ffa2 	bl	8001e54 <SysTick_Config>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d008      	beq.n	8001f44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2204      	movs	r2, #4
 8001f36:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e020      	b.n	8001f86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 020e 	bic.w	r2, r2, #14
 8001f52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d005      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2204      	movs	r2, #4
 8001fac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e051      	b.n	8002058 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020e 	bic.w	r2, r2, #14
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <HAL_DMA_Abort_IT+0xd4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d029      	beq.n	8002032 <HAL_DMA_Abort_IT+0xa2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a21      	ldr	r2, [pc, #132]	@ (8002068 <HAL_DMA_Abort_IT+0xd8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_Abort_IT+0x9e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <HAL_DMA_Abort_IT+0xdc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01a      	beq.n	8002028 <HAL_DMA_Abort_IT+0x98>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8002070 <HAL_DMA_Abort_IT+0xe0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d012      	beq.n	8002022 <HAL_DMA_Abort_IT+0x92>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1c      	ldr	r2, [pc, #112]	@ (8002074 <HAL_DMA_Abort_IT+0xe4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00a      	beq.n	800201c <HAL_DMA_Abort_IT+0x8c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <HAL_DMA_Abort_IT+0xe8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d102      	bne.n	8002016 <HAL_DMA_Abort_IT+0x86>
 8002010:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002014:	e00e      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 8002016:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800201a:	e00b      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 800201c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002020:	e008      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 8002022:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002026:	e005      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 8002028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800202c:	e002      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 800202e:	2310      	movs	r3, #16
 8002030:	e000      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 8002032:	2301      	movs	r3, #1
 8002034:	4a11      	ldr	r2, [pc, #68]	@ (800207c <HAL_DMA_Abort_IT+0xec>)
 8002036:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
    } 
  }
  return status;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40020008 	.word	0x40020008
 8002068:	4002001c 	.word	0x4002001c
 800206c:	40020030 	.word	0x40020030
 8002070:	40020044 	.word	0x40020044
 8002074:	40020058 	.word	0x40020058
 8002078:	4002006c 	.word	0x4002006c
 800207c:	40020000 	.word	0x40020000

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b08b      	sub	sp, #44	@ 0x2c
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	e169      	b.n	8002368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002094:	2201      	movs	r2, #1
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8158 	bne.w	8002362 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a9a      	ldr	r2, [pc, #616]	@ (8002320 <HAL_GPIO_Init+0x2a0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d05e      	beq.n	800217a <HAL_GPIO_Init+0xfa>
 80020bc:	4a98      	ldr	r2, [pc, #608]	@ (8002320 <HAL_GPIO_Init+0x2a0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d875      	bhi.n	80021ae <HAL_GPIO_Init+0x12e>
 80020c2:	4a98      	ldr	r2, [pc, #608]	@ (8002324 <HAL_GPIO_Init+0x2a4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d058      	beq.n	800217a <HAL_GPIO_Init+0xfa>
 80020c8:	4a96      	ldr	r2, [pc, #600]	@ (8002324 <HAL_GPIO_Init+0x2a4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d86f      	bhi.n	80021ae <HAL_GPIO_Init+0x12e>
 80020ce:	4a96      	ldr	r2, [pc, #600]	@ (8002328 <HAL_GPIO_Init+0x2a8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d052      	beq.n	800217a <HAL_GPIO_Init+0xfa>
 80020d4:	4a94      	ldr	r2, [pc, #592]	@ (8002328 <HAL_GPIO_Init+0x2a8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d869      	bhi.n	80021ae <HAL_GPIO_Init+0x12e>
 80020da:	4a94      	ldr	r2, [pc, #592]	@ (800232c <HAL_GPIO_Init+0x2ac>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d04c      	beq.n	800217a <HAL_GPIO_Init+0xfa>
 80020e0:	4a92      	ldr	r2, [pc, #584]	@ (800232c <HAL_GPIO_Init+0x2ac>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d863      	bhi.n	80021ae <HAL_GPIO_Init+0x12e>
 80020e6:	4a92      	ldr	r2, [pc, #584]	@ (8002330 <HAL_GPIO_Init+0x2b0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d046      	beq.n	800217a <HAL_GPIO_Init+0xfa>
 80020ec:	4a90      	ldr	r2, [pc, #576]	@ (8002330 <HAL_GPIO_Init+0x2b0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d85d      	bhi.n	80021ae <HAL_GPIO_Init+0x12e>
 80020f2:	2b12      	cmp	r3, #18
 80020f4:	d82a      	bhi.n	800214c <HAL_GPIO_Init+0xcc>
 80020f6:	2b12      	cmp	r3, #18
 80020f8:	d859      	bhi.n	80021ae <HAL_GPIO_Init+0x12e>
 80020fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002100 <HAL_GPIO_Init+0x80>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	0800217b 	.word	0x0800217b
 8002104:	08002155 	.word	0x08002155
 8002108:	08002167 	.word	0x08002167
 800210c:	080021a9 	.word	0x080021a9
 8002110:	080021af 	.word	0x080021af
 8002114:	080021af 	.word	0x080021af
 8002118:	080021af 	.word	0x080021af
 800211c:	080021af 	.word	0x080021af
 8002120:	080021af 	.word	0x080021af
 8002124:	080021af 	.word	0x080021af
 8002128:	080021af 	.word	0x080021af
 800212c:	080021af 	.word	0x080021af
 8002130:	080021af 	.word	0x080021af
 8002134:	080021af 	.word	0x080021af
 8002138:	080021af 	.word	0x080021af
 800213c:	080021af 	.word	0x080021af
 8002140:	080021af 	.word	0x080021af
 8002144:	0800215d 	.word	0x0800215d
 8002148:	08002171 	.word	0x08002171
 800214c:	4a79      	ldr	r2, [pc, #484]	@ (8002334 <HAL_GPIO_Init+0x2b4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002152:	e02c      	b.n	80021ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e029      	b.n	80021b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	3304      	adds	r3, #4
 8002162:	623b      	str	r3, [r7, #32]
          break;
 8002164:	e024      	b.n	80021b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	3308      	adds	r3, #8
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e01f      	b.n	80021b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	330c      	adds	r3, #12
 8002176:	623b      	str	r3, [r7, #32]
          break;
 8002178:	e01a      	b.n	80021b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002182:	2304      	movs	r3, #4
 8002184:	623b      	str	r3, [r7, #32]
          break;
 8002186:	e013      	b.n	80021b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002190:	2308      	movs	r3, #8
 8002192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	611a      	str	r2, [r3, #16]
          break;
 800219a:	e009      	b.n	80021b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800219c:	2308      	movs	r3, #8
 800219e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	615a      	str	r2, [r3, #20]
          break;
 80021a6:	e003      	b.n	80021b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
          break;
 80021ac:	e000      	b.n	80021b0 <HAL_GPIO_Init+0x130>
          break;
 80021ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2bff      	cmp	r3, #255	@ 0xff
 80021b4:	d801      	bhi.n	80021ba <HAL_GPIO_Init+0x13a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_Init+0x13e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2bff      	cmp	r3, #255	@ 0xff
 80021c4:	d802      	bhi.n	80021cc <HAL_GPIO_Init+0x14c>
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	e002      	b.n	80021d2 <HAL_GPIO_Init+0x152>
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	3b08      	subs	r3, #8
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	210f      	movs	r1, #15
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	401a      	ands	r2, r3
 80021e4:	6a39      	ldr	r1, [r7, #32]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	431a      	orrs	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80b1 	beq.w	8002362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002200:	4b4d      	ldr	r3, [pc, #308]	@ (8002338 <HAL_GPIO_Init+0x2b8>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a4c      	ldr	r2, [pc, #304]	@ (8002338 <HAL_GPIO_Init+0x2b8>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b4a      	ldr	r3, [pc, #296]	@ (8002338 <HAL_GPIO_Init+0x2b8>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002218:	4a48      	ldr	r2, [pc, #288]	@ (800233c <HAL_GPIO_Init+0x2bc>)
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	220f      	movs	r2, #15
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a40      	ldr	r2, [pc, #256]	@ (8002340 <HAL_GPIO_Init+0x2c0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_GPIO_Init+0x1ec>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3f      	ldr	r2, [pc, #252]	@ (8002344 <HAL_GPIO_Init+0x2c4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00d      	beq.n	8002268 <HAL_GPIO_Init+0x1e8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3e      	ldr	r2, [pc, #248]	@ (8002348 <HAL_GPIO_Init+0x2c8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d007      	beq.n	8002264 <HAL_GPIO_Init+0x1e4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3d      	ldr	r2, [pc, #244]	@ (800234c <HAL_GPIO_Init+0x2cc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_GPIO_Init+0x1e0>
 800225c:	2303      	movs	r3, #3
 800225e:	e006      	b.n	800226e <HAL_GPIO_Init+0x1ee>
 8002260:	2304      	movs	r3, #4
 8002262:	e004      	b.n	800226e <HAL_GPIO_Init+0x1ee>
 8002264:	2302      	movs	r3, #2
 8002266:	e002      	b.n	800226e <HAL_GPIO_Init+0x1ee>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_GPIO_Init+0x1ee>
 800226c:	2300      	movs	r3, #0
 800226e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002270:	f002 0203 	and.w	r2, r2, #3
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	4093      	lsls	r3, r2
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800227e:	492f      	ldr	r1, [pc, #188]	@ (800233c <HAL_GPIO_Init+0x2bc>)
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3302      	adds	r3, #2
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002298:	4b2d      	ldr	r3, [pc, #180]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	492c      	ldr	r1, [pc, #176]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4928      	ldr	r1, [pc, #160]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c0:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	4922      	ldr	r1, [pc, #136]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ce:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	491e      	ldr	r1, [pc, #120]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4918      	ldr	r1, [pc, #96]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022f6:	4b16      	ldr	r3, [pc, #88]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	4914      	ldr	r1, [pc, #80]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 8002300:	4013      	ands	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d021      	beq.n	8002354 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002310:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	490e      	ldr	r1, [pc, #56]	@ (8002350 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e021      	b.n	8002362 <HAL_GPIO_Init+0x2e2>
 800231e:	bf00      	nop
 8002320:	10320000 	.word	0x10320000
 8002324:	10310000 	.word	0x10310000
 8002328:	10220000 	.word	0x10220000
 800232c:	10210000 	.word	0x10210000
 8002330:	10120000 	.word	0x10120000
 8002334:	10110000 	.word	0x10110000
 8002338:	40021000 	.word	0x40021000
 800233c:	40010000 	.word	0x40010000
 8002340:	40010800 	.word	0x40010800
 8002344:	40010c00 	.word	0x40010c00
 8002348:	40011000 	.word	0x40011000
 800234c:	40011400 	.word	0x40011400
 8002350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_GPIO_Init+0x304>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	43db      	mvns	r3, r3
 800235c:	4909      	ldr	r1, [pc, #36]	@ (8002384 <HAL_GPIO_Init+0x304>)
 800235e:	4013      	ands	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	3301      	adds	r3, #1
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	f47f ae8e 	bne.w	8002094 <HAL_GPIO_Init+0x14>
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	372c      	adds	r7, #44	@ 0x2c
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40010400 	.word	0x40010400

08002388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
 8002394:	4613      	mov	r3, r2
 8002396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023a4:	e003      	b.n	80023ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	041a      	lsls	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e272      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8087 	beq.w	80024e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d8:	4b92      	ldr	r3, [pc, #584]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d00c      	beq.n	80023fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d112      	bne.n	8002416 <HAL_RCC_OscConfig+0x5e>
 80023f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023fc:	d10b      	bne.n	8002416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fe:	4b89      	ldr	r3, [pc, #548]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x12c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d168      	bne.n	80024e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e24c      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x76>
 8002420:	4b80      	ldr	r3, [pc, #512]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a7f      	ldr	r2, [pc, #508]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e02e      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x98>
 8002436:	4b7b      	ldr	r3, [pc, #492]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7a      	ldr	r2, [pc, #488]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b78      	ldr	r3, [pc, #480]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e01d      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0xbc>
 800245a:	4b72      	ldr	r3, [pc, #456]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a71      	ldr	r2, [pc, #452]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 8002474:	4b6b      	ldr	r3, [pc, #428]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6a      	ldr	r2, [pc, #424]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b68      	ldr	r3, [pc, #416]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a67      	ldr	r2, [pc, #412]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fc06 	bl	8001ca4 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff fc02 	bl	8001ca4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e200      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xe4>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff fbf2 	bl	8001ca4 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff fbee 	bl	8001ca4 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1ec      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x10c>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d063      	beq.n	80025ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024fe:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x18c>
 800250a:	4b46      	ldr	r3, [pc, #280]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x176>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1c0      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4939      	ldr	r1, [pc, #228]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e03a      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <HAL_RCC_OscConfig+0x270>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fba7 	bl	8001ca4 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7ff fba3 	bl	8001ca4 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1a1      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4927      	ldr	r1, [pc, #156]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <HAL_RCC_OscConfig+0x270>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fb86 	bl	8001ca4 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7ff fb82 	bl	8001ca4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e180      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d03a      	beq.n	800263c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d4:	f7ff fb66 	bl	8001ca4 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7ff fb62 	bl	8001ca4 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e160      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 face 	bl	8002b9c <RCC_Delay>
 8002600:	e01c      	b.n	800263c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7ff fb4c 	bl	8001ca4 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260e:	e00f      	b.n	8002630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff fb48 	bl	8001ca4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d908      	bls.n	8002630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e146      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	42420000 	.word	0x42420000
 800262c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b92      	ldr	r3, [pc, #584]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e9      	bne.n	8002610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a6 	beq.w	8002796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b8b      	ldr	r3, [pc, #556]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b88      	ldr	r3, [pc, #544]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a87      	ldr	r2, [pc, #540]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b85      	ldr	r3, [pc, #532]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b82      	ldr	r3, [pc, #520]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b7f      	ldr	r3, [pc, #508]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7e      	ldr	r2, [pc, #504]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7ff fb09 	bl	8001ca4 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7ff fb05 	bl	8001ca4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	@ 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e103      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b75      	ldr	r3, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x312>
 80026bc:	4b6f      	ldr	r3, [pc, #444]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a6e      	ldr	r2, [pc, #440]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	e02d      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x334>
 80026d2:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a69      	ldr	r2, [pc, #420]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	4b67      	ldr	r3, [pc, #412]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a66      	ldr	r2, [pc, #408]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	e01c      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x356>
 80026f4:	4b61      	ldr	r3, [pc, #388]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a60      	ldr	r2, [pc, #384]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	4b5e      	ldr	r3, [pc, #376]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a5d      	ldr	r2, [pc, #372]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	e00b      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 800270e:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a5a      	ldr	r2, [pc, #360]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b58      	ldr	r3, [pc, #352]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a57      	ldr	r2, [pc, #348]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7ff fab9 	bl	8001ca4 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff fab5 	bl	8001ca4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0b1      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ee      	beq.n	8002736 <HAL_RCC_OscConfig+0x37e>
 8002758:	e014      	b.n	8002784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7ff faa3 	bl	8001ca4 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff fa9f 	bl	8001ca4 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e09b      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	4b40      	ldr	r3, [pc, #256]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ee      	bne.n	8002762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b3c      	ldr	r3, [pc, #240]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a3b      	ldr	r2, [pc, #236]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8087 	beq.w	80028ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a0:	4b36      	ldr	r3, [pc, #216]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d061      	beq.n	8002870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d146      	bne.n	8002842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b33      	ldr	r3, [pc, #204]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7ff fa73 	bl	8001ca4 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c2:	f7ff fa6f 	bl	8001ca4 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e06d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d4:	4b29      	ldr	r3, [pc, #164]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ea:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4921      	ldr	r1, [pc, #132]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a19      	ldr	r1, [r3, #32]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	430b      	orrs	r3, r1
 800280e:	491b      	ldr	r1, [pc, #108]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7ff fa43 	bl	8001ca4 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7ff fa3f 	bl	8001ca4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x46a>
 8002840:	e035      	b.n	80028ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff fa2c 	bl	8001ca4 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7ff fa28 	bl	8001ca4 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e026      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x498>
 800286e:	e01e      	b.n	80028ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e019      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_RCC_OscConfig+0x500>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4965      	ldr	r1, [pc, #404]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800293a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7ff f97a 	bl	8001ca4 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7ff f976 	bl	8001ca4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4922      	ldr	r1, [pc, #136]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	@ (8002a88 <HAL_RCC_ClockConfig+0x1cc>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_ClockConfig+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f8d8 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08009434 	.word	0x08009434
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8002abe:	e027      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac2:	613b      	str	r3, [r7, #16]
      break;
 8002ac4:	e027      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4a17      	ldr	r2, [pc, #92]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
 8002ad2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ade:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0c5b      	lsrs	r3, r3, #17
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002af2:	fb03 f202 	mul.w	r2, r3, r2
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e004      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	613b      	str	r3, [r7, #16]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b12:	613b      	str	r3, [r7, #16]
      break;
 8002b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b16:	693b      	ldr	r3, [r7, #16]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	0800944c 	.word	0x0800944c
 8002b30:	0800945c 	.word	0x0800945c
 8002b34:	003d0900 	.word	0x003d0900

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b02      	ldr	r3, [pc, #8]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000000 	.word	0x20000000

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b50:	f7ff fff2 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08009444 	.word	0x08009444

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b78:	f7ff ffde 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	0adb      	lsrs	r3, r3, #11
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	08009444 	.word	0x08009444

08002b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd0 <RCC_Delay+0x34>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <RCC_Delay+0x38>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0a5b      	lsrs	r3, r3, #9
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb8:	bf00      	nop
  }
  while (Delay --);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	60fa      	str	r2, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <RCC_Delay+0x1c>
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	10624dd3 	.word	0x10624dd3

08002bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e076      	b.n	8002cd8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bfa:	d009      	beq.n	8002c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
 8002c02:	e005      	b.n	8002c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe fe3c 	bl	80018a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	0c1a      	lsrs	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f002 0204 	and.w	r2, r2, #4
 8002cb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf0:	f7fe ffd8 	bl	8001ca4 <HAL_GetTick>
 8002cf4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d001      	beq.n	8002d0a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
 8002d08:	e12a      	b.n	8002f60 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_SPI_Transmit+0x36>
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e122      	b.n	8002f60 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_SPI_Transmit+0x48>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e11b      	b.n	8002f60 <HAL_SPI_Transmit+0x280>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d76:	d10f      	bne.n	8002d98 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da2:	2b40      	cmp	r3, #64	@ 0x40
 8002da4:	d007      	beq.n	8002db6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dbe:	d152      	bne.n	8002e66 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_Transmit+0xee>
 8002dc8:	8b7b      	ldrh	r3, [r7, #26]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d145      	bne.n	8002e5a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	1c9a      	adds	r2, r3, #2
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002df2:	e032      	b.n	8002e5a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d112      	bne.n	8002e28 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	1c9a      	adds	r2, r3, #2
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e26:	e018      	b.n	8002e5a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e28:	f7fe ff3c 	bl	8001ca4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d803      	bhi.n	8002e40 <HAL_SPI_Transmit+0x160>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3e:	d102      	bne.n	8002e46 <HAL_SPI_Transmit+0x166>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e082      	b.n	8002f60 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1c7      	bne.n	8002df4 <HAL_SPI_Transmit+0x114>
 8002e64:	e053      	b.n	8002f0e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_SPI_Transmit+0x194>
 8002e6e:	8b7b      	ldrh	r3, [r7, #26]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d147      	bne.n	8002f04 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	7812      	ldrb	r2, [r2, #0]
 8002e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e9a:	e033      	b.n	8002f04 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d113      	bne.n	8002ed2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ed0:	e018      	b.n	8002f04 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed2:	f7fe fee7 	bl	8001ca4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d803      	bhi.n	8002eea <HAL_SPI_Transmit+0x20a>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d102      	bne.n	8002ef0 <HAL_SPI_Transmit+0x210>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e02d      	b.n	8002f60 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1c6      	bne.n	8002e9c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	6839      	ldr	r1, [r7, #0]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fbd2 	bl	80036bc <SPI_EndRxTxTransaction>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d001      	beq.n	8002f88 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
 8002f86:	e104      	b.n	8003192 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f90:	d112      	bne.n	8002fb8 <HAL_SPI_Receive+0x50>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8f3 	bl	800319a <HAL_SPI_TransmitReceive>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	e0ec      	b.n	8003192 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb8:	f7fe fe74 	bl	8001ca4 <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_SPI_Receive+0x62>
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0e1      	b.n	8003192 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_SPI_Receive+0x74>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0da      	b.n	8003192 <HAL_SPI_Receive+0x22a>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	88fa      	ldrh	r2, [r7, #6]
 8003002:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800302a:	d10f      	bne.n	800304c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800304a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003056:	2b40      	cmp	r3, #64	@ 0x40
 8003058:	d007      	beq.n	800306a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d170      	bne.n	8003154 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003072:	e035      	b.n	80030e0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d115      	bne.n	80030ae <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f103 020c 	add.w	r2, r3, #12
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030ac:	e018      	b.n	80030e0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ae:	f7fe fdf9 	bl	8001ca4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d803      	bhi.n	80030c6 <HAL_SPI_Receive+0x15e>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d102      	bne.n	80030cc <HAL_SPI_Receive+0x164>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e058      	b.n	8003192 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1c4      	bne.n	8003074 <HAL_SPI_Receive+0x10c>
 80030ea:	e038      	b.n	800315e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d113      	bne.n	8003122 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	b292      	uxth	r2, r2
 8003106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003120:	e018      	b.n	8003154 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003122:	f7fe fdbf 	bl	8001ca4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d803      	bhi.n	800313a <HAL_SPI_Receive+0x1d2>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d102      	bne.n	8003140 <HAL_SPI_Receive+0x1d8>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e01e      	b.n	8003192 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1c6      	bne.n	80030ec <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fa58 	bl	8003618 <SPI_EndRxTransaction>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003190:	2300      	movs	r3, #0
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b08a      	sub	sp, #40	@ 0x28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031a8:	2301      	movs	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ac:	f7fe fd7a 	bl	8001ca4 <HAL_GetTick>
 80031b0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031b8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031c0:	887b      	ldrh	r3, [r7, #2]
 80031c2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d00c      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x4a>
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d0:	d106      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x46>
 80031da:	7ffb      	ldrb	r3, [r7, #31]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d001      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
 80031e2:	e17f      	b.n	80034e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x5c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x5c>
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e174      	b.n	80034e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x6e>
 8003204:	2302      	movs	r3, #2
 8003206:	e16d      	b.n	80034e4 <HAL_SPI_TransmitReceive+0x34a>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b04      	cmp	r3, #4
 800321a:	d003      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2205      	movs	r2, #5
 8003220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003264:	2b40      	cmp	r3, #64	@ 0x40
 8003266:	d007      	beq.n	8003278 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003280:	d17e      	bne.n	8003380 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_SPI_TransmitReceive+0xf6>
 800328a:	8afb      	ldrh	r3, [r7, #22]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d16c      	bne.n	800336a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	881a      	ldrh	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b4:	e059      	b.n	800336a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d11b      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x162>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x162>
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d113      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d119      	bne.n	800333e <HAL_SPI_TransmitReceive+0x1a4>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d014      	beq.n	800333e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331e:	b292      	uxth	r2, r2
 8003320:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	1c9a      	adds	r2, r3, #2
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800333a:	2301      	movs	r3, #1
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800333e:	f7fe fcb1 	bl	8001ca4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334a:	429a      	cmp	r2, r3
 800334c:	d80d      	bhi.n	800336a <HAL_SPI_TransmitReceive+0x1d0>
 800334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d009      	beq.n	800336a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0bc      	b.n	80034e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1a0      	bne.n	80032b6 <HAL_SPI_TransmitReceive+0x11c>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d19b      	bne.n	80032b6 <HAL_SPI_TransmitReceive+0x11c>
 800337e:	e082      	b.n	8003486 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_SPI_TransmitReceive+0x1f4>
 8003388:	8afb      	ldrh	r3, [r7, #22]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d171      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b4:	e05d      	b.n	8003472 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d11c      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x264>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_SPI_TransmitReceive+0x264>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d114      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d119      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x2a6>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d014      	beq.n	8003440 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800343c:	2301      	movs	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003440:	f7fe fc30 	bl	8001ca4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800344c:	429a      	cmp	r2, r3
 800344e:	d803      	bhi.n	8003458 <HAL_SPI_TransmitReceive+0x2be>
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d102      	bne.n	800345e <HAL_SPI_TransmitReceive+0x2c4>
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e038      	b.n	80034e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d19c      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x21c>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d197      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f916 	bl	80036bc <SPI_EndRxTxTransaction>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e01d      	b.n	80034e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80034e2:	2300      	movs	r3, #0
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3728      	adds	r7, #40	@ 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034fa:	b2db      	uxtb	r3, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
	...

08003508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003518:	f7fe fbc4 	bl	8001ca4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	4413      	add	r3, r2
 8003526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003528:	f7fe fbbc 	bl	8001ca4 <HAL_GetTick>
 800352c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800352e:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	015b      	lsls	r3, r3, #5
 8003534:	0d1b      	lsrs	r3, r3, #20
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800353e:	e054      	b.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d050      	beq.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003548:	f7fe fbac 	bl	8001ca4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	429a      	cmp	r2, r3
 8003556:	d902      	bls.n	800355e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d13d      	bne.n	80035da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800356c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003576:	d111      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003580:	d004      	beq.n	800358c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358a:	d107      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800359a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a4:	d10f      	bne.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e017      	b.n	800360a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	429a      	cmp	r2, r3
 8003606:	d19b      	bne.n	8003540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000

08003618 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800362c:	d111      	bne.n	8003652 <SPI_EndRxTransaction+0x3a>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003636:	d004      	beq.n	8003642 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003640:	d107      	bne.n	8003652 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003650:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800365a:	d117      	bne.n	800368c <SPI_EndRxTransaction+0x74>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003664:	d112      	bne.n	800368c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2200      	movs	r2, #0
 800366e:	2101      	movs	r1, #1
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff ff49 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01a      	beq.n	80036b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e013      	b.n	80036b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	2180      	movs	r1, #128	@ 0x80
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff ff36 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e000      	b.n	80036b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2201      	movs	r2, #1
 80036d0:	2102      	movs	r1, #2
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f7ff ff18 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e2:	f043 0220 	orr.w	r2, r3, #32
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e013      	b.n	8003716 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ff05 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e000      	b.n	8003716 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e042      	b.n	80037b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fe f8f9 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2224      	movs	r2, #36	@ 0x24
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003760:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fd62 	bl	800422c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003776:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003786:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003796:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08a      	sub	sp, #40	@ 0x28
 80037c2:	af02      	add	r7, sp, #8
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d175      	bne.n	80038ca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_UART_Transmit+0x2c>
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06e      	b.n	80038cc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2221      	movs	r2, #33	@ 0x21
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fc:	f7fe fa52 	bl	8001ca4 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003816:	d108      	bne.n	800382a <HAL_UART_Transmit+0x6c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e003      	b.n	8003832 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003832:	e02e      	b.n	8003892 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	@ 0x80
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fb00 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e03a      	b.n	80038cc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	3302      	adds	r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e007      	b.n	8003884 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3301      	adds	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1cb      	bne.n	8003834 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2200      	movs	r2, #0
 80038a4:	2140      	movs	r1, #64	@ 0x40
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 facc 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e006      	b.n	80038cc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b0ba      	sub	sp, #232	@ 0xe8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_UART_IRQHandler+0x66>
 8003926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fbbc 	bl	80040b0 <UART_Receive_IT>
      return;
 8003938:	e25b      	b.n	8003df2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800393a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80de 	beq.w	8003b00 <HAL_UART_IRQHandler+0x22c>
 8003944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003954:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80d1 	beq.w	8003b00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0xae>
 800396a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800396e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_UART_IRQHandler+0xd2>
 800398e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xf6>
 80039b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f043 0204 	orr.w	r2, r3, #4
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d011      	beq.n	80039fa <HAL_UART_IRQHandler+0x126>
 80039d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f043 0208 	orr.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 81f2 	beq.w	8003de8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_UART_IRQHandler+0x14e>
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fb47 	bl	80040b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <HAL_UART_IRQHandler+0x17a>
 8003a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d04f      	beq.n	8003aee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa51 	bl	8003ef6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d041      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1d9      	bne.n	8003a62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb4 <HAL_UART_IRQHandler+0x3e0>)
 8003abc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fa64 	bl	8001f90 <HAL_DMA_Abort_IT>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e00e      	b.n	8003afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f99c 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	e00a      	b.n	8003afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f998 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e006      	b.n	8003afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f994 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003afa:	e175      	b.n	8003de8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	bf00      	nop
    return;
 8003afe:	e173      	b.n	8003de8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 814f 	bne.w	8003da8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8148 	beq.w	8003da8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8141 	beq.w	8003da8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80b6 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8145 	beq.w	8003dec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	f080 813e 	bcs.w	8003dec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b76:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	f000 8088 	beq.w	8003c94 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bb0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1d9      	bne.n	8003b84 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003be0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bf4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e1      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c30:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c36:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e3      	bne.n	8003c0c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c64:	f023 0310 	bic.w	r3, r3, #16
 8003c68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c76:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c78:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e3      	bne.n	8003c52 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe f943 	bl	8001f1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8bf 	bl	8003e2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cb0:	e09c      	b.n	8003dec <HAL_UART_IRQHandler+0x518>
 8003cb2:	bf00      	nop
 8003cb4:	08003fbb 	.word	0x08003fbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 808e 	beq.w	8003df0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8089 	beq.w	8003df0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d02:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e3      	bne.n	8003cde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3314      	adds	r3, #20
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	623b      	str	r3, [r7, #32]
   return(result);
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e3      	bne.n	8003d16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0310 	bic.w	r3, r3, #16
 8003d72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d80:	61fa      	str	r2, [r7, #28]
 8003d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	69b9      	ldr	r1, [r7, #24]
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e3      	bne.n	8003d5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f844 	bl	8003e2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003da6:	e023      	b.n	8003df0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x4f4>
 8003db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f90e 	bl	8003fe2 <UART_Transmit_IT>
    return;
 8003dc6:	e014      	b.n	8003df2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <HAL_UART_IRQHandler+0x51e>
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f94d 	bl	8004080 <UART_EndTransmit_IT>
    return;
 8003de6:	e004      	b.n	8003df2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003de8:	bf00      	nop
 8003dea:	e002      	b.n	8003df2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003df0:	bf00      	nop
  }
}
 8003df2:	37e8      	adds	r7, #232	@ 0xe8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e54:	e03b      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d037      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fd ff21 	bl	8001ca4 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e03a      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d023      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b80      	cmp	r3, #128	@ 0x80
 8003e8a:	d020      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d01d      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d116      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f81d 	bl	8003ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00f      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d0b4      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b095      	sub	sp, #84	@ 0x54
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e5      	bne.n	8003efe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3314      	adds	r3, #20
 8003f50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d119      	bne.n	8003fa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f023 0310 	bic.w	r3, r3, #16
 8003f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f8e:	61ba      	str	r2, [r7, #24]
 8003f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6979      	ldr	r1, [r7, #20]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fb0:	bf00      	nop
 8003fb2:	3754      	adds	r7, #84	@ 0x54
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7ff ff21 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b21      	cmp	r3, #33	@ 0x21
 8003ff4:	d13e      	bne.n	8004074 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffe:	d114      	bne.n	800402a <UART_Transmit_IT+0x48>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d110      	bne.n	800402a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800401c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	1c9a      	adds	r2, r3, #2
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	621a      	str	r2, [r3, #32]
 8004028:	e008      	b.n	800403c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	1c59      	adds	r1, r3, #1
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6211      	str	r1, [r2, #32]
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4619      	mov	r1, r3
 800404a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10f      	bne.n	8004070 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800405e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800406e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e000      	b.n	8004076 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004074:	2302      	movs	r3, #2
  }
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004096:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fea9 	bl	8003df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	@ 0x30
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b22      	cmp	r3, #34	@ 0x22
 80040c2:	f040 80ae 	bne.w	8004222 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ce:	d117      	bne.n	8004100 <UART_Receive_IT+0x50>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d113      	bne.n	8004100 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	1c9a      	adds	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80040fe:	e026      	b.n	800414e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004112:	d007      	beq.n	8004124 <UART_Receive_IT+0x74>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <UART_Receive_IT+0x82>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e008      	b.n	8004144 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800413e:	b2da      	uxtb	r2, r3
 8004140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004142:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29b      	uxth	r3, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4619      	mov	r1, r3
 800415c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800415e:	2b00      	cmp	r3, #0
 8004160:	d15d      	bne.n	800421e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0220 	bic.w	r2, r2, #32
 8004170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d135      	bne.n	8004214 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	613b      	str	r3, [r7, #16]
   return(result);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f023 0310 	bic.w	r3, r3, #16
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ce:	623a      	str	r2, [r7, #32]
 80041d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	69f9      	ldr	r1, [r7, #28]
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	61bb      	str	r3, [r7, #24]
   return(result);
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e5      	bne.n	80041ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d10a      	bne.n	8004206 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fe0e 	bl	8003e2e <HAL_UARTEx_RxEventCallback>
 8004212:	e002      	b.n	800421a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fdf8 	bl	8003e0a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e002      	b.n	8004224 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
  }
}
 8004224:	4618      	mov	r0, r3
 8004226:	3730      	adds	r7, #48	@ 0x30
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004266:	f023 030c 	bic.w	r3, r3, #12
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	430b      	orrs	r3, r1
 8004272:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a2c      	ldr	r2, [pc, #176]	@ (8004340 <UART_SetConfig+0x114>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d103      	bne.n	800429c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fc6e 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	e002      	b.n	80042a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800429c:	f7fe fc56 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 80042a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009a      	lsls	r2, r3, #2
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	4a22      	ldr	r2, [pc, #136]	@ (8004344 <UART_SetConfig+0x118>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	0119      	lsls	r1, r3, #4
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009a      	lsls	r2, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <UART_SetConfig+0x118>)
 80042da:	fba3 0302 	umull	r0, r3, r3, r2
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2064      	movs	r0, #100	@ 0x64
 80042e2:	fb00 f303 	mul.w	r3, r0, r3
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	3332      	adds	r3, #50	@ 0x32
 80042ec:	4a15      	ldr	r2, [pc, #84]	@ (8004344 <UART_SetConfig+0x118>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f8:	4419      	add	r1, r3
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009a      	lsls	r2, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <UART_SetConfig+0x118>)
 8004312:	fba3 0302 	umull	r0, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	2064      	movs	r0, #100	@ 0x64
 800431a:	fb00 f303 	mul.w	r3, r0, r3
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	3332      	adds	r3, #50	@ 0x32
 8004324:	4a07      	ldr	r2, [pc, #28]	@ (8004344 <UART_SetConfig+0x118>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	f003 020f 	and.w	r2, r3, #15
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	440a      	add	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40013800 	.word	0x40013800
 8004344:	51eb851f 	.word	0x51eb851f

08004348 <__cvt>:
 8004348:	2b00      	cmp	r3, #0
 800434a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800434e:	461d      	mov	r5, r3
 8004350:	bfbb      	ittet	lt
 8004352:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004356:	461d      	movlt	r5, r3
 8004358:	2300      	movge	r3, #0
 800435a:	232d      	movlt	r3, #45	@ 0x2d
 800435c:	b088      	sub	sp, #32
 800435e:	4614      	mov	r4, r2
 8004360:	bfb8      	it	lt
 8004362:	4614      	movlt	r4, r2
 8004364:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004366:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004368:	7013      	strb	r3, [r2, #0]
 800436a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800436c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004370:	f023 0820 	bic.w	r8, r3, #32
 8004374:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004378:	d005      	beq.n	8004386 <__cvt+0x3e>
 800437a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800437e:	d100      	bne.n	8004382 <__cvt+0x3a>
 8004380:	3601      	adds	r6, #1
 8004382:	2302      	movs	r3, #2
 8004384:	e000      	b.n	8004388 <__cvt+0x40>
 8004386:	2303      	movs	r3, #3
 8004388:	aa07      	add	r2, sp, #28
 800438a:	9204      	str	r2, [sp, #16]
 800438c:	aa06      	add	r2, sp, #24
 800438e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004392:	e9cd 3600 	strd	r3, r6, [sp]
 8004396:	4622      	mov	r2, r4
 8004398:	462b      	mov	r3, r5
 800439a:	f001 f9bd 	bl	8005718 <_dtoa_r>
 800439e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80043a2:	4607      	mov	r7, r0
 80043a4:	d119      	bne.n	80043da <__cvt+0x92>
 80043a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80043a8:	07db      	lsls	r3, r3, #31
 80043aa:	d50e      	bpl.n	80043ca <__cvt+0x82>
 80043ac:	eb00 0906 	add.w	r9, r0, r6
 80043b0:	2200      	movs	r2, #0
 80043b2:	2300      	movs	r3, #0
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fc faf6 	bl	80009a8 <__aeabi_dcmpeq>
 80043bc:	b108      	cbz	r0, 80043c2 <__cvt+0x7a>
 80043be:	f8cd 901c 	str.w	r9, [sp, #28]
 80043c2:	2230      	movs	r2, #48	@ 0x30
 80043c4:	9b07      	ldr	r3, [sp, #28]
 80043c6:	454b      	cmp	r3, r9
 80043c8:	d31e      	bcc.n	8004408 <__cvt+0xc0>
 80043ca:	4638      	mov	r0, r7
 80043cc:	9b07      	ldr	r3, [sp, #28]
 80043ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80043d0:	1bdb      	subs	r3, r3, r7
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	b008      	add	sp, #32
 80043d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043de:	eb00 0906 	add.w	r9, r0, r6
 80043e2:	d1e5      	bne.n	80043b0 <__cvt+0x68>
 80043e4:	7803      	ldrb	r3, [r0, #0]
 80043e6:	2b30      	cmp	r3, #48	@ 0x30
 80043e8:	d10a      	bne.n	8004400 <__cvt+0xb8>
 80043ea:	2200      	movs	r2, #0
 80043ec:	2300      	movs	r3, #0
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fc fad9 	bl	80009a8 <__aeabi_dcmpeq>
 80043f6:	b918      	cbnz	r0, 8004400 <__cvt+0xb8>
 80043f8:	f1c6 0601 	rsb	r6, r6, #1
 80043fc:	f8ca 6000 	str.w	r6, [sl]
 8004400:	f8da 3000 	ldr.w	r3, [sl]
 8004404:	4499      	add	r9, r3
 8004406:	e7d3      	b.n	80043b0 <__cvt+0x68>
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	9107      	str	r1, [sp, #28]
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e7d9      	b.n	80043c4 <__cvt+0x7c>

08004410 <__exponent>:
 8004410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004412:	2900      	cmp	r1, #0
 8004414:	bfb6      	itet	lt
 8004416:	232d      	movlt	r3, #45	@ 0x2d
 8004418:	232b      	movge	r3, #43	@ 0x2b
 800441a:	4249      	neglt	r1, r1
 800441c:	2909      	cmp	r1, #9
 800441e:	7002      	strb	r2, [r0, #0]
 8004420:	7043      	strb	r3, [r0, #1]
 8004422:	dd29      	ble.n	8004478 <__exponent+0x68>
 8004424:	f10d 0307 	add.w	r3, sp, #7
 8004428:	461d      	mov	r5, r3
 800442a:	270a      	movs	r7, #10
 800442c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004430:	461a      	mov	r2, r3
 8004432:	fb07 1416 	mls	r4, r7, r6, r1
 8004436:	3430      	adds	r4, #48	@ 0x30
 8004438:	f802 4c01 	strb.w	r4, [r2, #-1]
 800443c:	460c      	mov	r4, r1
 800443e:	2c63      	cmp	r4, #99	@ 0x63
 8004440:	4631      	mov	r1, r6
 8004442:	f103 33ff 	add.w	r3, r3, #4294967295
 8004446:	dcf1      	bgt.n	800442c <__exponent+0x1c>
 8004448:	3130      	adds	r1, #48	@ 0x30
 800444a:	1e94      	subs	r4, r2, #2
 800444c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004450:	4623      	mov	r3, r4
 8004452:	1c41      	adds	r1, r0, #1
 8004454:	42ab      	cmp	r3, r5
 8004456:	d30a      	bcc.n	800446e <__exponent+0x5e>
 8004458:	f10d 0309 	add.w	r3, sp, #9
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	42ac      	cmp	r4, r5
 8004460:	bf88      	it	hi
 8004462:	2300      	movhi	r3, #0
 8004464:	3302      	adds	r3, #2
 8004466:	4403      	add	r3, r0
 8004468:	1a18      	subs	r0, r3, r0
 800446a:	b003      	add	sp, #12
 800446c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004472:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004476:	e7ed      	b.n	8004454 <__exponent+0x44>
 8004478:	2330      	movs	r3, #48	@ 0x30
 800447a:	3130      	adds	r1, #48	@ 0x30
 800447c:	7083      	strb	r3, [r0, #2]
 800447e:	70c1      	strb	r1, [r0, #3]
 8004480:	1d03      	adds	r3, r0, #4
 8004482:	e7f1      	b.n	8004468 <__exponent+0x58>

08004484 <_printf_float>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	b091      	sub	sp, #68	@ 0x44
 800448a:	460c      	mov	r4, r1
 800448c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004490:	4616      	mov	r6, r2
 8004492:	461f      	mov	r7, r3
 8004494:	4605      	mov	r5, r0
 8004496:	f001 f81d 	bl	80054d4 <_localeconv_r>
 800449a:	6803      	ldr	r3, [r0, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	9308      	str	r3, [sp, #32]
 80044a0:	f7fb fe56 	bl	8000150 <strlen>
 80044a4:	2300      	movs	r3, #0
 80044a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80044a8:	f8d8 3000 	ldr.w	r3, [r8]
 80044ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80044ae:	3307      	adds	r3, #7
 80044b0:	f023 0307 	bic.w	r3, r3, #7
 80044b4:	f103 0208 	add.w	r2, r3, #8
 80044b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80044bc:	f8d4 b000 	ldr.w	fp, [r4]
 80044c0:	f8c8 2000 	str.w	r2, [r8]
 80044c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80044cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044ce:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80044d2:	f04f 32ff 	mov.w	r2, #4294967295
 80044d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80044da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80044de:	4b9c      	ldr	r3, [pc, #624]	@ (8004750 <_printf_float+0x2cc>)
 80044e0:	f7fc fa94 	bl	8000a0c <__aeabi_dcmpun>
 80044e4:	bb70      	cbnz	r0, 8004544 <_printf_float+0xc0>
 80044e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295
 80044ee:	4b98      	ldr	r3, [pc, #608]	@ (8004750 <_printf_float+0x2cc>)
 80044f0:	f7fc fa6e 	bl	80009d0 <__aeabi_dcmple>
 80044f4:	bb30      	cbnz	r0, 8004544 <_printf_float+0xc0>
 80044f6:	2200      	movs	r2, #0
 80044f8:	2300      	movs	r3, #0
 80044fa:	4640      	mov	r0, r8
 80044fc:	4649      	mov	r1, r9
 80044fe:	f7fc fa5d 	bl	80009bc <__aeabi_dcmplt>
 8004502:	b110      	cbz	r0, 800450a <_printf_float+0x86>
 8004504:	232d      	movs	r3, #45	@ 0x2d
 8004506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800450a:	4a92      	ldr	r2, [pc, #584]	@ (8004754 <_printf_float+0x2d0>)
 800450c:	4b92      	ldr	r3, [pc, #584]	@ (8004758 <_printf_float+0x2d4>)
 800450e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004512:	bf8c      	ite	hi
 8004514:	4690      	movhi	r8, r2
 8004516:	4698      	movls	r8, r3
 8004518:	2303      	movs	r3, #3
 800451a:	f04f 0900 	mov.w	r9, #0
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	f02b 0304 	bic.w	r3, fp, #4
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	4633      	mov	r3, r6
 8004528:	4621      	mov	r1, r4
 800452a:	4628      	mov	r0, r5
 800452c:	9700      	str	r7, [sp, #0]
 800452e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004530:	f000 f9d4 	bl	80048dc <_printf_common>
 8004534:	3001      	adds	r0, #1
 8004536:	f040 8090 	bne.w	800465a <_printf_float+0x1d6>
 800453a:	f04f 30ff 	mov.w	r0, #4294967295
 800453e:	b011      	add	sp, #68	@ 0x44
 8004540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004544:	4642      	mov	r2, r8
 8004546:	464b      	mov	r3, r9
 8004548:	4640      	mov	r0, r8
 800454a:	4649      	mov	r1, r9
 800454c:	f7fc fa5e 	bl	8000a0c <__aeabi_dcmpun>
 8004550:	b148      	cbz	r0, 8004566 <_printf_float+0xe2>
 8004552:	464b      	mov	r3, r9
 8004554:	2b00      	cmp	r3, #0
 8004556:	bfb8      	it	lt
 8004558:	232d      	movlt	r3, #45	@ 0x2d
 800455a:	4a80      	ldr	r2, [pc, #512]	@ (800475c <_printf_float+0x2d8>)
 800455c:	bfb8      	it	lt
 800455e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004562:	4b7f      	ldr	r3, [pc, #508]	@ (8004760 <_printf_float+0x2dc>)
 8004564:	e7d3      	b.n	800450e <_printf_float+0x8a>
 8004566:	6863      	ldr	r3, [r4, #4]
 8004568:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	d13f      	bne.n	80045f0 <_printf_float+0x16c>
 8004570:	2306      	movs	r3, #6
 8004572:	6063      	str	r3, [r4, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	9206      	str	r2, [sp, #24]
 800457e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004580:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004584:	aa0d      	add	r2, sp, #52	@ 0x34
 8004586:	9203      	str	r2, [sp, #12]
 8004588:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800458c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004590:	6863      	ldr	r3, [r4, #4]
 8004592:	4642      	mov	r2, r8
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	4628      	mov	r0, r5
 8004598:	464b      	mov	r3, r9
 800459a:	910a      	str	r1, [sp, #40]	@ 0x28
 800459c:	f7ff fed4 	bl	8004348 <__cvt>
 80045a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80045a2:	4680      	mov	r8, r0
 80045a4:	2947      	cmp	r1, #71	@ 0x47
 80045a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80045a8:	d128      	bne.n	80045fc <_printf_float+0x178>
 80045aa:	1cc8      	adds	r0, r1, #3
 80045ac:	db02      	blt.n	80045b4 <_printf_float+0x130>
 80045ae:	6863      	ldr	r3, [r4, #4]
 80045b0:	4299      	cmp	r1, r3
 80045b2:	dd40      	ble.n	8004636 <_printf_float+0x1b2>
 80045b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80045b8:	fa5f fa8a 	uxtb.w	sl, sl
 80045bc:	4652      	mov	r2, sl
 80045be:	3901      	subs	r1, #1
 80045c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80045c4:	910d      	str	r1, [sp, #52]	@ 0x34
 80045c6:	f7ff ff23 	bl	8004410 <__exponent>
 80045ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045cc:	4681      	mov	r9, r0
 80045ce:	1813      	adds	r3, r2, r0
 80045d0:	2a01      	cmp	r2, #1
 80045d2:	6123      	str	r3, [r4, #16]
 80045d4:	dc02      	bgt.n	80045dc <_printf_float+0x158>
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	07d2      	lsls	r2, r2, #31
 80045da:	d501      	bpl.n	80045e0 <_printf_float+0x15c>
 80045dc:	3301      	adds	r3, #1
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d09e      	beq.n	8004526 <_printf_float+0xa2>
 80045e8:	232d      	movs	r3, #45	@ 0x2d
 80045ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045ee:	e79a      	b.n	8004526 <_printf_float+0xa2>
 80045f0:	2947      	cmp	r1, #71	@ 0x47
 80045f2:	d1bf      	bne.n	8004574 <_printf_float+0xf0>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1bd      	bne.n	8004574 <_printf_float+0xf0>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e7ba      	b.n	8004572 <_printf_float+0xee>
 80045fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004600:	d9dc      	bls.n	80045bc <_printf_float+0x138>
 8004602:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004606:	d118      	bne.n	800463a <_printf_float+0x1b6>
 8004608:	2900      	cmp	r1, #0
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	dd0b      	ble.n	8004626 <_printf_float+0x1a2>
 800460e:	6121      	str	r1, [r4, #16]
 8004610:	b913      	cbnz	r3, 8004618 <_printf_float+0x194>
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	07d0      	lsls	r0, r2, #31
 8004616:	d502      	bpl.n	800461e <_printf_float+0x19a>
 8004618:	3301      	adds	r3, #1
 800461a:	440b      	add	r3, r1
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	f04f 0900 	mov.w	r9, #0
 8004622:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004624:	e7dc      	b.n	80045e0 <_printf_float+0x15c>
 8004626:	b913      	cbnz	r3, 800462e <_printf_float+0x1aa>
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	07d2      	lsls	r2, r2, #31
 800462c:	d501      	bpl.n	8004632 <_printf_float+0x1ae>
 800462e:	3302      	adds	r3, #2
 8004630:	e7f4      	b.n	800461c <_printf_float+0x198>
 8004632:	2301      	movs	r3, #1
 8004634:	e7f2      	b.n	800461c <_printf_float+0x198>
 8004636:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800463a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800463c:	4299      	cmp	r1, r3
 800463e:	db05      	blt.n	800464c <_printf_float+0x1c8>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	6121      	str	r1, [r4, #16]
 8004644:	07d8      	lsls	r0, r3, #31
 8004646:	d5ea      	bpl.n	800461e <_printf_float+0x19a>
 8004648:	1c4b      	adds	r3, r1, #1
 800464a:	e7e7      	b.n	800461c <_printf_float+0x198>
 800464c:	2900      	cmp	r1, #0
 800464e:	bfcc      	ite	gt
 8004650:	2201      	movgt	r2, #1
 8004652:	f1c1 0202 	rsble	r2, r1, #2
 8004656:	4413      	add	r3, r2
 8004658:	e7e0      	b.n	800461c <_printf_float+0x198>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	055a      	lsls	r2, r3, #21
 800465e:	d407      	bmi.n	8004670 <_printf_float+0x1ec>
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	4642      	mov	r2, r8
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	47b8      	blx	r7
 800466a:	3001      	adds	r0, #1
 800466c:	d12b      	bne.n	80046c6 <_printf_float+0x242>
 800466e:	e764      	b.n	800453a <_printf_float+0xb6>
 8004670:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004674:	f240 80dc 	bls.w	8004830 <_printf_float+0x3ac>
 8004678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800467c:	2200      	movs	r2, #0
 800467e:	2300      	movs	r3, #0
 8004680:	f7fc f992 	bl	80009a8 <__aeabi_dcmpeq>
 8004684:	2800      	cmp	r0, #0
 8004686:	d033      	beq.n	80046f0 <_printf_float+0x26c>
 8004688:	2301      	movs	r3, #1
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	4a35      	ldr	r2, [pc, #212]	@ (8004764 <_printf_float+0x2e0>)
 8004690:	47b8      	blx	r7
 8004692:	3001      	adds	r0, #1
 8004694:	f43f af51 	beq.w	800453a <_printf_float+0xb6>
 8004698:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800469c:	4543      	cmp	r3, r8
 800469e:	db02      	blt.n	80046a6 <_printf_float+0x222>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	07d8      	lsls	r0, r3, #31
 80046a4:	d50f      	bpl.n	80046c6 <_printf_float+0x242>
 80046a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046aa:	4631      	mov	r1, r6
 80046ac:	4628      	mov	r0, r5
 80046ae:	47b8      	blx	r7
 80046b0:	3001      	adds	r0, #1
 80046b2:	f43f af42 	beq.w	800453a <_printf_float+0xb6>
 80046b6:	f04f 0900 	mov.w	r9, #0
 80046ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80046be:	f104 0a1a 	add.w	sl, r4, #26
 80046c2:	45c8      	cmp	r8, r9
 80046c4:	dc09      	bgt.n	80046da <_printf_float+0x256>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	079b      	lsls	r3, r3, #30
 80046ca:	f100 8102 	bmi.w	80048d2 <_printf_float+0x44e>
 80046ce:	68e0      	ldr	r0, [r4, #12]
 80046d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046d2:	4298      	cmp	r0, r3
 80046d4:	bfb8      	it	lt
 80046d6:	4618      	movlt	r0, r3
 80046d8:	e731      	b.n	800453e <_printf_float+0xba>
 80046da:	2301      	movs	r3, #1
 80046dc:	4652      	mov	r2, sl
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	47b8      	blx	r7
 80046e4:	3001      	adds	r0, #1
 80046e6:	f43f af28 	beq.w	800453a <_printf_float+0xb6>
 80046ea:	f109 0901 	add.w	r9, r9, #1
 80046ee:	e7e8      	b.n	80046c2 <_printf_float+0x23e>
 80046f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dc38      	bgt.n	8004768 <_printf_float+0x2e4>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4631      	mov	r1, r6
 80046fa:	4628      	mov	r0, r5
 80046fc:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <_printf_float+0x2e0>)
 80046fe:	47b8      	blx	r7
 8004700:	3001      	adds	r0, #1
 8004702:	f43f af1a 	beq.w	800453a <_printf_float+0xb6>
 8004706:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800470a:	ea59 0303 	orrs.w	r3, r9, r3
 800470e:	d102      	bne.n	8004716 <_printf_float+0x292>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	07d9      	lsls	r1, r3, #31
 8004714:	d5d7      	bpl.n	80046c6 <_printf_float+0x242>
 8004716:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	f43f af0a 	beq.w	800453a <_printf_float+0xb6>
 8004726:	f04f 0a00 	mov.w	sl, #0
 800472a:	f104 0b1a 	add.w	fp, r4, #26
 800472e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004730:	425b      	negs	r3, r3
 8004732:	4553      	cmp	r3, sl
 8004734:	dc01      	bgt.n	800473a <_printf_float+0x2b6>
 8004736:	464b      	mov	r3, r9
 8004738:	e793      	b.n	8004662 <_printf_float+0x1de>
 800473a:	2301      	movs	r3, #1
 800473c:	465a      	mov	r2, fp
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	f43f aef8 	beq.w	800453a <_printf_float+0xb6>
 800474a:	f10a 0a01 	add.w	sl, sl, #1
 800474e:	e7ee      	b.n	800472e <_printf_float+0x2aa>
 8004750:	7fefffff 	.word	0x7fefffff
 8004754:	08009462 	.word	0x08009462
 8004758:	0800945e 	.word	0x0800945e
 800475c:	0800946a 	.word	0x0800946a
 8004760:	08009466 	.word	0x08009466
 8004764:	080095a4 	.word	0x080095a4
 8004768:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800476a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800476e:	4553      	cmp	r3, sl
 8004770:	bfa8      	it	ge
 8004772:	4653      	movge	r3, sl
 8004774:	2b00      	cmp	r3, #0
 8004776:	4699      	mov	r9, r3
 8004778:	dc36      	bgt.n	80047e8 <_printf_float+0x364>
 800477a:	f04f 0b00 	mov.w	fp, #0
 800477e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004782:	f104 021a 	add.w	r2, r4, #26
 8004786:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004788:	930a      	str	r3, [sp, #40]	@ 0x28
 800478a:	eba3 0309 	sub.w	r3, r3, r9
 800478e:	455b      	cmp	r3, fp
 8004790:	dc31      	bgt.n	80047f6 <_printf_float+0x372>
 8004792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004794:	459a      	cmp	sl, r3
 8004796:	dc3a      	bgt.n	800480e <_printf_float+0x38a>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	07da      	lsls	r2, r3, #31
 800479c:	d437      	bmi.n	800480e <_printf_float+0x38a>
 800479e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047a0:	ebaa 0903 	sub.w	r9, sl, r3
 80047a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047a6:	ebaa 0303 	sub.w	r3, sl, r3
 80047aa:	4599      	cmp	r9, r3
 80047ac:	bfa8      	it	ge
 80047ae:	4699      	movge	r9, r3
 80047b0:	f1b9 0f00 	cmp.w	r9, #0
 80047b4:	dc33      	bgt.n	800481e <_printf_float+0x39a>
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047be:	f104 0b1a 	add.w	fp, r4, #26
 80047c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047c4:	ebaa 0303 	sub.w	r3, sl, r3
 80047c8:	eba3 0309 	sub.w	r3, r3, r9
 80047cc:	4543      	cmp	r3, r8
 80047ce:	f77f af7a 	ble.w	80046c6 <_printf_float+0x242>
 80047d2:	2301      	movs	r3, #1
 80047d4:	465a      	mov	r2, fp
 80047d6:	4631      	mov	r1, r6
 80047d8:	4628      	mov	r0, r5
 80047da:	47b8      	blx	r7
 80047dc:	3001      	adds	r0, #1
 80047de:	f43f aeac 	beq.w	800453a <_printf_float+0xb6>
 80047e2:	f108 0801 	add.w	r8, r8, #1
 80047e6:	e7ec      	b.n	80047c2 <_printf_float+0x33e>
 80047e8:	4642      	mov	r2, r8
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	d1c2      	bne.n	800477a <_printf_float+0x2f6>
 80047f4:	e6a1      	b.n	800453a <_printf_float+0xb6>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4631      	mov	r1, r6
 80047fa:	4628      	mov	r0, r5
 80047fc:	920a      	str	r2, [sp, #40]	@ 0x28
 80047fe:	47b8      	blx	r7
 8004800:	3001      	adds	r0, #1
 8004802:	f43f ae9a 	beq.w	800453a <_printf_float+0xb6>
 8004806:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004808:	f10b 0b01 	add.w	fp, fp, #1
 800480c:	e7bb      	b.n	8004786 <_printf_float+0x302>
 800480e:	4631      	mov	r1, r6
 8004810:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004814:	4628      	mov	r0, r5
 8004816:	47b8      	blx	r7
 8004818:	3001      	adds	r0, #1
 800481a:	d1c0      	bne.n	800479e <_printf_float+0x31a>
 800481c:	e68d      	b.n	800453a <_printf_float+0xb6>
 800481e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004820:	464b      	mov	r3, r9
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	4442      	add	r2, r8
 8004828:	47b8      	blx	r7
 800482a:	3001      	adds	r0, #1
 800482c:	d1c3      	bne.n	80047b6 <_printf_float+0x332>
 800482e:	e684      	b.n	800453a <_printf_float+0xb6>
 8004830:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004834:	f1ba 0f01 	cmp.w	sl, #1
 8004838:	dc01      	bgt.n	800483e <_printf_float+0x3ba>
 800483a:	07db      	lsls	r3, r3, #31
 800483c:	d536      	bpl.n	80048ac <_printf_float+0x428>
 800483e:	2301      	movs	r3, #1
 8004840:	4642      	mov	r2, r8
 8004842:	4631      	mov	r1, r6
 8004844:	4628      	mov	r0, r5
 8004846:	47b8      	blx	r7
 8004848:	3001      	adds	r0, #1
 800484a:	f43f ae76 	beq.w	800453a <_printf_float+0xb6>
 800484e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	f43f ae6e 	beq.w	800453a <_printf_float+0xb6>
 800485e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004862:	2200      	movs	r2, #0
 8004864:	2300      	movs	r3, #0
 8004866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800486a:	f7fc f89d 	bl	80009a8 <__aeabi_dcmpeq>
 800486e:	b9c0      	cbnz	r0, 80048a2 <_printf_float+0x41e>
 8004870:	4653      	mov	r3, sl
 8004872:	f108 0201 	add.w	r2, r8, #1
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	47b8      	blx	r7
 800487c:	3001      	adds	r0, #1
 800487e:	d10c      	bne.n	800489a <_printf_float+0x416>
 8004880:	e65b      	b.n	800453a <_printf_float+0xb6>
 8004882:	2301      	movs	r3, #1
 8004884:	465a      	mov	r2, fp
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f ae54 	beq.w	800453a <_printf_float+0xb6>
 8004892:	f108 0801 	add.w	r8, r8, #1
 8004896:	45d0      	cmp	r8, sl
 8004898:	dbf3      	blt.n	8004882 <_printf_float+0x3fe>
 800489a:	464b      	mov	r3, r9
 800489c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80048a0:	e6e0      	b.n	8004664 <_printf_float+0x1e0>
 80048a2:	f04f 0800 	mov.w	r8, #0
 80048a6:	f104 0b1a 	add.w	fp, r4, #26
 80048aa:	e7f4      	b.n	8004896 <_printf_float+0x412>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4642      	mov	r2, r8
 80048b0:	e7e1      	b.n	8004876 <_printf_float+0x3f2>
 80048b2:	2301      	movs	r3, #1
 80048b4:	464a      	mov	r2, r9
 80048b6:	4631      	mov	r1, r6
 80048b8:	4628      	mov	r0, r5
 80048ba:	47b8      	blx	r7
 80048bc:	3001      	adds	r0, #1
 80048be:	f43f ae3c 	beq.w	800453a <_printf_float+0xb6>
 80048c2:	f108 0801 	add.w	r8, r8, #1
 80048c6:	68e3      	ldr	r3, [r4, #12]
 80048c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80048ca:	1a5b      	subs	r3, r3, r1
 80048cc:	4543      	cmp	r3, r8
 80048ce:	dcf0      	bgt.n	80048b2 <_printf_float+0x42e>
 80048d0:	e6fd      	b.n	80046ce <_printf_float+0x24a>
 80048d2:	f04f 0800 	mov.w	r8, #0
 80048d6:	f104 0919 	add.w	r9, r4, #25
 80048da:	e7f4      	b.n	80048c6 <_printf_float+0x442>

080048dc <_printf_common>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	4616      	mov	r6, r2
 80048e2:	4698      	mov	r8, r3
 80048e4:	688a      	ldr	r2, [r1, #8]
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	4607      	mov	r7, r0
 80048ea:	4293      	cmp	r3, r2
 80048ec:	bfb8      	it	lt
 80048ee:	4613      	movlt	r3, r2
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048f6:	460c      	mov	r4, r1
 80048f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048fc:	b10a      	cbz	r2, 8004902 <_printf_common+0x26>
 80048fe:	3301      	adds	r3, #1
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	0699      	lsls	r1, r3, #26
 8004906:	bf42      	ittt	mi
 8004908:	6833      	ldrmi	r3, [r6, #0]
 800490a:	3302      	addmi	r3, #2
 800490c:	6033      	strmi	r3, [r6, #0]
 800490e:	6825      	ldr	r5, [r4, #0]
 8004910:	f015 0506 	ands.w	r5, r5, #6
 8004914:	d106      	bne.n	8004924 <_printf_common+0x48>
 8004916:	f104 0a19 	add.w	sl, r4, #25
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	6832      	ldr	r2, [r6, #0]
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	42ab      	cmp	r3, r5
 8004922:	dc2b      	bgt.n	800497c <_printf_common+0xa0>
 8004924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004928:	6822      	ldr	r2, [r4, #0]
 800492a:	3b00      	subs	r3, #0
 800492c:	bf18      	it	ne
 800492e:	2301      	movne	r3, #1
 8004930:	0692      	lsls	r2, r2, #26
 8004932:	d430      	bmi.n	8004996 <_printf_common+0xba>
 8004934:	4641      	mov	r1, r8
 8004936:	4638      	mov	r0, r7
 8004938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800493c:	47c8      	blx	r9
 800493e:	3001      	adds	r0, #1
 8004940:	d023      	beq.n	800498a <_printf_common+0xae>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	6922      	ldr	r2, [r4, #16]
 8004946:	f003 0306 	and.w	r3, r3, #6
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf14      	ite	ne
 800494e:	2500      	movne	r5, #0
 8004950:	6833      	ldreq	r3, [r6, #0]
 8004952:	f04f 0600 	mov.w	r6, #0
 8004956:	bf08      	it	eq
 8004958:	68e5      	ldreq	r5, [r4, #12]
 800495a:	f104 041a 	add.w	r4, r4, #26
 800495e:	bf08      	it	eq
 8004960:	1aed      	subeq	r5, r5, r3
 8004962:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004966:	bf08      	it	eq
 8004968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800496c:	4293      	cmp	r3, r2
 800496e:	bfc4      	itt	gt
 8004970:	1a9b      	subgt	r3, r3, r2
 8004972:	18ed      	addgt	r5, r5, r3
 8004974:	42b5      	cmp	r5, r6
 8004976:	d11a      	bne.n	80049ae <_printf_common+0xd2>
 8004978:	2000      	movs	r0, #0
 800497a:	e008      	b.n	800498e <_printf_common+0xb2>
 800497c:	2301      	movs	r3, #1
 800497e:	4652      	mov	r2, sl
 8004980:	4641      	mov	r1, r8
 8004982:	4638      	mov	r0, r7
 8004984:	47c8      	blx	r9
 8004986:	3001      	adds	r0, #1
 8004988:	d103      	bne.n	8004992 <_printf_common+0xb6>
 800498a:	f04f 30ff 	mov.w	r0, #4294967295
 800498e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004992:	3501      	adds	r5, #1
 8004994:	e7c1      	b.n	800491a <_printf_common+0x3e>
 8004996:	2030      	movs	r0, #48	@ 0x30
 8004998:	18e1      	adds	r1, r4, r3
 800499a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049a4:	4422      	add	r2, r4
 80049a6:	3302      	adds	r3, #2
 80049a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049ac:	e7c2      	b.n	8004934 <_printf_common+0x58>
 80049ae:	2301      	movs	r3, #1
 80049b0:	4622      	mov	r2, r4
 80049b2:	4641      	mov	r1, r8
 80049b4:	4638      	mov	r0, r7
 80049b6:	47c8      	blx	r9
 80049b8:	3001      	adds	r0, #1
 80049ba:	d0e6      	beq.n	800498a <_printf_common+0xae>
 80049bc:	3601      	adds	r6, #1
 80049be:	e7d9      	b.n	8004974 <_printf_common+0x98>

080049c0 <_printf_i>:
 80049c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	7e0f      	ldrb	r7, [r1, #24]
 80049c6:	4691      	mov	r9, r2
 80049c8:	2f78      	cmp	r7, #120	@ 0x78
 80049ca:	4680      	mov	r8, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	469a      	mov	sl, r3
 80049d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049d6:	d807      	bhi.n	80049e8 <_printf_i+0x28>
 80049d8:	2f62      	cmp	r7, #98	@ 0x62
 80049da:	d80a      	bhi.n	80049f2 <_printf_i+0x32>
 80049dc:	2f00      	cmp	r7, #0
 80049de:	f000 80d1 	beq.w	8004b84 <_printf_i+0x1c4>
 80049e2:	2f58      	cmp	r7, #88	@ 0x58
 80049e4:	f000 80b8 	beq.w	8004b58 <_printf_i+0x198>
 80049e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049f0:	e03a      	b.n	8004a68 <_printf_i+0xa8>
 80049f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049f6:	2b15      	cmp	r3, #21
 80049f8:	d8f6      	bhi.n	80049e8 <_printf_i+0x28>
 80049fa:	a101      	add	r1, pc, #4	@ (adr r1, 8004a00 <_printf_i+0x40>)
 80049fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a00:	08004a59 	.word	0x08004a59
 8004a04:	08004a6d 	.word	0x08004a6d
 8004a08:	080049e9 	.word	0x080049e9
 8004a0c:	080049e9 	.word	0x080049e9
 8004a10:	080049e9 	.word	0x080049e9
 8004a14:	080049e9 	.word	0x080049e9
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	080049e9 	.word	0x080049e9
 8004a20:	080049e9 	.word	0x080049e9
 8004a24:	080049e9 	.word	0x080049e9
 8004a28:	080049e9 	.word	0x080049e9
 8004a2c:	08004b6b 	.word	0x08004b6b
 8004a30:	08004a97 	.word	0x08004a97
 8004a34:	08004b25 	.word	0x08004b25
 8004a38:	080049e9 	.word	0x080049e9
 8004a3c:	080049e9 	.word	0x080049e9
 8004a40:	08004b8d 	.word	0x08004b8d
 8004a44:	080049e9 	.word	0x080049e9
 8004a48:	08004a97 	.word	0x08004a97
 8004a4c:	080049e9 	.word	0x080049e9
 8004a50:	080049e9 	.word	0x080049e9
 8004a54:	08004b2d 	.word	0x08004b2d
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	1d1a      	adds	r2, r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6032      	str	r2, [r6, #0]
 8004a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e09c      	b.n	8004ba6 <_printf_i+0x1e6>
 8004a6c:	6833      	ldr	r3, [r6, #0]
 8004a6e:	6820      	ldr	r0, [r4, #0]
 8004a70:	1d19      	adds	r1, r3, #4
 8004a72:	6031      	str	r1, [r6, #0]
 8004a74:	0606      	lsls	r6, r0, #24
 8004a76:	d501      	bpl.n	8004a7c <_printf_i+0xbc>
 8004a78:	681d      	ldr	r5, [r3, #0]
 8004a7a:	e003      	b.n	8004a84 <_printf_i+0xc4>
 8004a7c:	0645      	lsls	r5, r0, #25
 8004a7e:	d5fb      	bpl.n	8004a78 <_printf_i+0xb8>
 8004a80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	da03      	bge.n	8004a90 <_printf_i+0xd0>
 8004a88:	232d      	movs	r3, #45	@ 0x2d
 8004a8a:	426d      	negs	r5, r5
 8004a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a90:	230a      	movs	r3, #10
 8004a92:	4858      	ldr	r0, [pc, #352]	@ (8004bf4 <_printf_i+0x234>)
 8004a94:	e011      	b.n	8004aba <_printf_i+0xfa>
 8004a96:	6821      	ldr	r1, [r4, #0]
 8004a98:	6833      	ldr	r3, [r6, #0]
 8004a9a:	0608      	lsls	r0, r1, #24
 8004a9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004aa0:	d402      	bmi.n	8004aa8 <_printf_i+0xe8>
 8004aa2:	0649      	lsls	r1, r1, #25
 8004aa4:	bf48      	it	mi
 8004aa6:	b2ad      	uxthmi	r5, r5
 8004aa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	bf14      	ite	ne
 8004aae:	230a      	movne	r3, #10
 8004ab0:	2308      	moveq	r3, #8
 8004ab2:	4850      	ldr	r0, [pc, #320]	@ (8004bf4 <_printf_i+0x234>)
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aba:	6866      	ldr	r6, [r4, #4]
 8004abc:	2e00      	cmp	r6, #0
 8004abe:	60a6      	str	r6, [r4, #8]
 8004ac0:	db05      	blt.n	8004ace <_printf_i+0x10e>
 8004ac2:	6821      	ldr	r1, [r4, #0]
 8004ac4:	432e      	orrs	r6, r5
 8004ac6:	f021 0104 	bic.w	r1, r1, #4
 8004aca:	6021      	str	r1, [r4, #0]
 8004acc:	d04b      	beq.n	8004b66 <_printf_i+0x1a6>
 8004ace:	4616      	mov	r6, r2
 8004ad0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ad4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ad8:	5dc7      	ldrb	r7, [r0, r7]
 8004ada:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ade:	462f      	mov	r7, r5
 8004ae0:	42bb      	cmp	r3, r7
 8004ae2:	460d      	mov	r5, r1
 8004ae4:	d9f4      	bls.n	8004ad0 <_printf_i+0x110>
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d10b      	bne.n	8004b02 <_printf_i+0x142>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	07df      	lsls	r7, r3, #31
 8004aee:	d508      	bpl.n	8004b02 <_printf_i+0x142>
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	6861      	ldr	r1, [r4, #4]
 8004af4:	4299      	cmp	r1, r3
 8004af6:	bfde      	ittt	le
 8004af8:	2330      	movle	r3, #48	@ 0x30
 8004afa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004afe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b02:	1b92      	subs	r2, r2, r6
 8004b04:	6122      	str	r2, [r4, #16]
 8004b06:	464b      	mov	r3, r9
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f8cd a000 	str.w	sl, [sp]
 8004b10:	aa03      	add	r2, sp, #12
 8004b12:	f7ff fee3 	bl	80048dc <_printf_common>
 8004b16:	3001      	adds	r0, #1
 8004b18:	d14a      	bne.n	8004bb0 <_printf_i+0x1f0>
 8004b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1e:	b004      	add	sp, #16
 8004b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	f043 0320 	orr.w	r3, r3, #32
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	2778      	movs	r7, #120	@ 0x78
 8004b2e:	4832      	ldr	r0, [pc, #200]	@ (8004bf8 <_printf_i+0x238>)
 8004b30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	6831      	ldr	r1, [r6, #0]
 8004b38:	061f      	lsls	r7, r3, #24
 8004b3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b3e:	d402      	bmi.n	8004b46 <_printf_i+0x186>
 8004b40:	065f      	lsls	r7, r3, #25
 8004b42:	bf48      	it	mi
 8004b44:	b2ad      	uxthmi	r5, r5
 8004b46:	6031      	str	r1, [r6, #0]
 8004b48:	07d9      	lsls	r1, r3, #31
 8004b4a:	bf44      	itt	mi
 8004b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b50:	6023      	strmi	r3, [r4, #0]
 8004b52:	b11d      	cbz	r5, 8004b5c <_printf_i+0x19c>
 8004b54:	2310      	movs	r3, #16
 8004b56:	e7ad      	b.n	8004ab4 <_printf_i+0xf4>
 8004b58:	4826      	ldr	r0, [pc, #152]	@ (8004bf4 <_printf_i+0x234>)
 8004b5a:	e7e9      	b.n	8004b30 <_printf_i+0x170>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	f023 0320 	bic.w	r3, r3, #32
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	e7f6      	b.n	8004b54 <_printf_i+0x194>
 8004b66:	4616      	mov	r6, r2
 8004b68:	e7bd      	b.n	8004ae6 <_printf_i+0x126>
 8004b6a:	6833      	ldr	r3, [r6, #0]
 8004b6c:	6825      	ldr	r5, [r4, #0]
 8004b6e:	1d18      	adds	r0, r3, #4
 8004b70:	6961      	ldr	r1, [r4, #20]
 8004b72:	6030      	str	r0, [r6, #0]
 8004b74:	062e      	lsls	r6, r5, #24
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	d501      	bpl.n	8004b7e <_printf_i+0x1be>
 8004b7a:	6019      	str	r1, [r3, #0]
 8004b7c:	e002      	b.n	8004b84 <_printf_i+0x1c4>
 8004b7e:	0668      	lsls	r0, r5, #25
 8004b80:	d5fb      	bpl.n	8004b7a <_printf_i+0x1ba>
 8004b82:	8019      	strh	r1, [r3, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	4616      	mov	r6, r2
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	e7bc      	b.n	8004b06 <_printf_i+0x146>
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	2100      	movs	r1, #0
 8004b90:	1d1a      	adds	r2, r3, #4
 8004b92:	6032      	str	r2, [r6, #0]
 8004b94:	681e      	ldr	r6, [r3, #0]
 8004b96:	6862      	ldr	r2, [r4, #4]
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f000 fd12 	bl	80055c2 <memchr>
 8004b9e:	b108      	cbz	r0, 8004ba4 <_printf_i+0x1e4>
 8004ba0:	1b80      	subs	r0, r0, r6
 8004ba2:	6060      	str	r0, [r4, #4]
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bae:	e7aa      	b.n	8004b06 <_printf_i+0x146>
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	47d0      	blx	sl
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d0ad      	beq.n	8004b1a <_printf_i+0x15a>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	079b      	lsls	r3, r3, #30
 8004bc2:	d413      	bmi.n	8004bec <_printf_i+0x22c>
 8004bc4:	68e0      	ldr	r0, [r4, #12]
 8004bc6:	9b03      	ldr	r3, [sp, #12]
 8004bc8:	4298      	cmp	r0, r3
 8004bca:	bfb8      	it	lt
 8004bcc:	4618      	movlt	r0, r3
 8004bce:	e7a6      	b.n	8004b1e <_printf_i+0x15e>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	47d0      	blx	sl
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d09d      	beq.n	8004b1a <_printf_i+0x15a>
 8004bde:	3501      	adds	r5, #1
 8004be0:	68e3      	ldr	r3, [r4, #12]
 8004be2:	9903      	ldr	r1, [sp, #12]
 8004be4:	1a5b      	subs	r3, r3, r1
 8004be6:	42ab      	cmp	r3, r5
 8004be8:	dcf2      	bgt.n	8004bd0 <_printf_i+0x210>
 8004bea:	e7eb      	b.n	8004bc4 <_printf_i+0x204>
 8004bec:	2500      	movs	r5, #0
 8004bee:	f104 0619 	add.w	r6, r4, #25
 8004bf2:	e7f5      	b.n	8004be0 <_printf_i+0x220>
 8004bf4:	0800946e 	.word	0x0800946e
 8004bf8:	0800947f 	.word	0x0800947f

08004bfc <_scanf_float>:
 8004bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	b087      	sub	sp, #28
 8004c02:	9303      	str	r3, [sp, #12]
 8004c04:	688b      	ldr	r3, [r1, #8]
 8004c06:	4691      	mov	r9, r2
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004c0e:	bf82      	ittt	hi
 8004c10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004c14:	eb03 0b05 	addhi.w	fp, r3, r5
 8004c18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	f04f 0500 	mov.w	r5, #0
 8004c22:	bf88      	it	hi
 8004c24:	608b      	strhi	r3, [r1, #8]
 8004c26:	680b      	ldr	r3, [r1, #0]
 8004c28:	4680      	mov	r8, r0
 8004c2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004c2e:	f842 3b1c 	str.w	r3, [r2], #28
 8004c32:	460c      	mov	r4, r1
 8004c34:	bf98      	it	ls
 8004c36:	f04f 0b00 	movls.w	fp, #0
 8004c3a:	4616      	mov	r6, r2
 8004c3c:	46aa      	mov	sl, r5
 8004c3e:	462f      	mov	r7, r5
 8004c40:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004c44:	9201      	str	r2, [sp, #4]
 8004c46:	9502      	str	r5, [sp, #8]
 8004c48:	68a2      	ldr	r2, [r4, #8]
 8004c4a:	b15a      	cbz	r2, 8004c64 <_scanf_float+0x68>
 8004c4c:	f8d9 3000 	ldr.w	r3, [r9]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b4e      	cmp	r3, #78	@ 0x4e
 8004c54:	d862      	bhi.n	8004d1c <_scanf_float+0x120>
 8004c56:	2b40      	cmp	r3, #64	@ 0x40
 8004c58:	d83a      	bhi.n	8004cd0 <_scanf_float+0xd4>
 8004c5a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004c5e:	b2c8      	uxtb	r0, r1
 8004c60:	280e      	cmp	r0, #14
 8004c62:	d938      	bls.n	8004cd6 <_scanf_float+0xda>
 8004c64:	b11f      	cbz	r7, 8004c6e <_scanf_float+0x72>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c72:	f1ba 0f01 	cmp.w	sl, #1
 8004c76:	f200 8114 	bhi.w	8004ea2 <_scanf_float+0x2a6>
 8004c7a:	9b01      	ldr	r3, [sp, #4]
 8004c7c:	429e      	cmp	r6, r3
 8004c7e:	f200 8105 	bhi.w	8004e8c <_scanf_float+0x290>
 8004c82:	2001      	movs	r0, #1
 8004c84:	b007      	add	sp, #28
 8004c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004c8e:	2a0d      	cmp	r2, #13
 8004c90:	d8e8      	bhi.n	8004c64 <_scanf_float+0x68>
 8004c92:	a101      	add	r1, pc, #4	@ (adr r1, 8004c98 <_scanf_float+0x9c>)
 8004c94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c98:	08004de1 	.word	0x08004de1
 8004c9c:	08004c65 	.word	0x08004c65
 8004ca0:	08004c65 	.word	0x08004c65
 8004ca4:	08004c65 	.word	0x08004c65
 8004ca8:	08004e3d 	.word	0x08004e3d
 8004cac:	08004e17 	.word	0x08004e17
 8004cb0:	08004c65 	.word	0x08004c65
 8004cb4:	08004c65 	.word	0x08004c65
 8004cb8:	08004def 	.word	0x08004def
 8004cbc:	08004c65 	.word	0x08004c65
 8004cc0:	08004c65 	.word	0x08004c65
 8004cc4:	08004c65 	.word	0x08004c65
 8004cc8:	08004c65 	.word	0x08004c65
 8004ccc:	08004dab 	.word	0x08004dab
 8004cd0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004cd4:	e7db      	b.n	8004c8e <_scanf_float+0x92>
 8004cd6:	290e      	cmp	r1, #14
 8004cd8:	d8c4      	bhi.n	8004c64 <_scanf_float+0x68>
 8004cda:	a001      	add	r0, pc, #4	@ (adr r0, 8004ce0 <_scanf_float+0xe4>)
 8004cdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ce0:	08004d9b 	.word	0x08004d9b
 8004ce4:	08004c65 	.word	0x08004c65
 8004ce8:	08004d9b 	.word	0x08004d9b
 8004cec:	08004e2b 	.word	0x08004e2b
 8004cf0:	08004c65 	.word	0x08004c65
 8004cf4:	08004d3d 	.word	0x08004d3d
 8004cf8:	08004d81 	.word	0x08004d81
 8004cfc:	08004d81 	.word	0x08004d81
 8004d00:	08004d81 	.word	0x08004d81
 8004d04:	08004d81 	.word	0x08004d81
 8004d08:	08004d81 	.word	0x08004d81
 8004d0c:	08004d81 	.word	0x08004d81
 8004d10:	08004d81 	.word	0x08004d81
 8004d14:	08004d81 	.word	0x08004d81
 8004d18:	08004d81 	.word	0x08004d81
 8004d1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004d1e:	d809      	bhi.n	8004d34 <_scanf_float+0x138>
 8004d20:	2b60      	cmp	r3, #96	@ 0x60
 8004d22:	d8b2      	bhi.n	8004c8a <_scanf_float+0x8e>
 8004d24:	2b54      	cmp	r3, #84	@ 0x54
 8004d26:	d07b      	beq.n	8004e20 <_scanf_float+0x224>
 8004d28:	2b59      	cmp	r3, #89	@ 0x59
 8004d2a:	d19b      	bne.n	8004c64 <_scanf_float+0x68>
 8004d2c:	2d07      	cmp	r5, #7
 8004d2e:	d199      	bne.n	8004c64 <_scanf_float+0x68>
 8004d30:	2508      	movs	r5, #8
 8004d32:	e02f      	b.n	8004d94 <_scanf_float+0x198>
 8004d34:	2b74      	cmp	r3, #116	@ 0x74
 8004d36:	d073      	beq.n	8004e20 <_scanf_float+0x224>
 8004d38:	2b79      	cmp	r3, #121	@ 0x79
 8004d3a:	e7f6      	b.n	8004d2a <_scanf_float+0x12e>
 8004d3c:	6821      	ldr	r1, [r4, #0]
 8004d3e:	05c8      	lsls	r0, r1, #23
 8004d40:	d51e      	bpl.n	8004d80 <_scanf_float+0x184>
 8004d42:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004d46:	6021      	str	r1, [r4, #0]
 8004d48:	3701      	adds	r7, #1
 8004d4a:	f1bb 0f00 	cmp.w	fp, #0
 8004d4e:	d003      	beq.n	8004d58 <_scanf_float+0x15c>
 8004d50:	3201      	adds	r2, #1
 8004d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d56:	60a2      	str	r2, [r4, #8]
 8004d58:	68a3      	ldr	r3, [r4, #8]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	60a3      	str	r3, [r4, #8]
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	3301      	adds	r3, #1
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f8c9 3004 	str.w	r3, [r9, #4]
 8004d70:	f340 8083 	ble.w	8004e7a <_scanf_float+0x27e>
 8004d74:	f8d9 3000 	ldr.w	r3, [r9]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f8c9 3000 	str.w	r3, [r9]
 8004d7e:	e763      	b.n	8004c48 <_scanf_float+0x4c>
 8004d80:	eb1a 0105 	adds.w	r1, sl, r5
 8004d84:	f47f af6e 	bne.w	8004c64 <_scanf_float+0x68>
 8004d88:	460d      	mov	r5, r1
 8004d8a:	468a      	mov	sl, r1
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	f806 3b01 	strb.w	r3, [r6], #1
 8004d98:	e7de      	b.n	8004d58 <_scanf_float+0x15c>
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	0610      	lsls	r0, r2, #24
 8004d9e:	f57f af61 	bpl.w	8004c64 <_scanf_float+0x68>
 8004da2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004da6:	6022      	str	r2, [r4, #0]
 8004da8:	e7f4      	b.n	8004d94 <_scanf_float+0x198>
 8004daa:	f1ba 0f00 	cmp.w	sl, #0
 8004dae:	d10c      	bne.n	8004dca <_scanf_float+0x1ce>
 8004db0:	b977      	cbnz	r7, 8004dd0 <_scanf_float+0x1d4>
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004db8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004dbc:	d108      	bne.n	8004dd0 <_scanf_float+0x1d4>
 8004dbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004dc2:	f04f 0a01 	mov.w	sl, #1
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	e7e4      	b.n	8004d94 <_scanf_float+0x198>
 8004dca:	f1ba 0f02 	cmp.w	sl, #2
 8004dce:	d051      	beq.n	8004e74 <_scanf_float+0x278>
 8004dd0:	2d01      	cmp	r5, #1
 8004dd2:	d002      	beq.n	8004dda <_scanf_float+0x1de>
 8004dd4:	2d04      	cmp	r5, #4
 8004dd6:	f47f af45 	bne.w	8004c64 <_scanf_float+0x68>
 8004dda:	3501      	adds	r5, #1
 8004ddc:	b2ed      	uxtb	r5, r5
 8004dde:	e7d9      	b.n	8004d94 <_scanf_float+0x198>
 8004de0:	f1ba 0f01 	cmp.w	sl, #1
 8004de4:	f47f af3e 	bne.w	8004c64 <_scanf_float+0x68>
 8004de8:	f04f 0a02 	mov.w	sl, #2
 8004dec:	e7d2      	b.n	8004d94 <_scanf_float+0x198>
 8004dee:	b975      	cbnz	r5, 8004e0e <_scanf_float+0x212>
 8004df0:	2f00      	cmp	r7, #0
 8004df2:	f47f af38 	bne.w	8004c66 <_scanf_float+0x6a>
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004dfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004e00:	f040 80ff 	bne.w	8005002 <_scanf_float+0x406>
 8004e04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004e08:	2501      	movs	r5, #1
 8004e0a:	6022      	str	r2, [r4, #0]
 8004e0c:	e7c2      	b.n	8004d94 <_scanf_float+0x198>
 8004e0e:	2d03      	cmp	r5, #3
 8004e10:	d0e3      	beq.n	8004dda <_scanf_float+0x1de>
 8004e12:	2d05      	cmp	r5, #5
 8004e14:	e7df      	b.n	8004dd6 <_scanf_float+0x1da>
 8004e16:	2d02      	cmp	r5, #2
 8004e18:	f47f af24 	bne.w	8004c64 <_scanf_float+0x68>
 8004e1c:	2503      	movs	r5, #3
 8004e1e:	e7b9      	b.n	8004d94 <_scanf_float+0x198>
 8004e20:	2d06      	cmp	r5, #6
 8004e22:	f47f af1f 	bne.w	8004c64 <_scanf_float+0x68>
 8004e26:	2507      	movs	r5, #7
 8004e28:	e7b4      	b.n	8004d94 <_scanf_float+0x198>
 8004e2a:	6822      	ldr	r2, [r4, #0]
 8004e2c:	0591      	lsls	r1, r2, #22
 8004e2e:	f57f af19 	bpl.w	8004c64 <_scanf_float+0x68>
 8004e32:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004e36:	6022      	str	r2, [r4, #0]
 8004e38:	9702      	str	r7, [sp, #8]
 8004e3a:	e7ab      	b.n	8004d94 <_scanf_float+0x198>
 8004e3c:	6822      	ldr	r2, [r4, #0]
 8004e3e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004e42:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004e46:	d005      	beq.n	8004e54 <_scanf_float+0x258>
 8004e48:	0550      	lsls	r0, r2, #21
 8004e4a:	f57f af0b 	bpl.w	8004c64 <_scanf_float+0x68>
 8004e4e:	2f00      	cmp	r7, #0
 8004e50:	f000 80d7 	beq.w	8005002 <_scanf_float+0x406>
 8004e54:	0591      	lsls	r1, r2, #22
 8004e56:	bf58      	it	pl
 8004e58:	9902      	ldrpl	r1, [sp, #8]
 8004e5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004e5e:	bf58      	it	pl
 8004e60:	1a79      	subpl	r1, r7, r1
 8004e62:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004e66:	f04f 0700 	mov.w	r7, #0
 8004e6a:	bf58      	it	pl
 8004e6c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e70:	6022      	str	r2, [r4, #0]
 8004e72:	e78f      	b.n	8004d94 <_scanf_float+0x198>
 8004e74:	f04f 0a03 	mov.w	sl, #3
 8004e78:	e78c      	b.n	8004d94 <_scanf_float+0x198>
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004e82:	4798      	blx	r3
 8004e84:	2800      	cmp	r0, #0
 8004e86:	f43f aedf 	beq.w	8004c48 <_scanf_float+0x4c>
 8004e8a:	e6eb      	b.n	8004c64 <_scanf_float+0x68>
 8004e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e90:	464a      	mov	r2, r9
 8004e92:	4640      	mov	r0, r8
 8004e94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e98:	4798      	blx	r3
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	e6eb      	b.n	8004c7a <_scanf_float+0x7e>
 8004ea2:	1e6b      	subs	r3, r5, #1
 8004ea4:	2b06      	cmp	r3, #6
 8004ea6:	d824      	bhi.n	8004ef2 <_scanf_float+0x2f6>
 8004ea8:	2d02      	cmp	r5, #2
 8004eaa:	d836      	bhi.n	8004f1a <_scanf_float+0x31e>
 8004eac:	9b01      	ldr	r3, [sp, #4]
 8004eae:	429e      	cmp	r6, r3
 8004eb0:	f67f aee7 	bls.w	8004c82 <_scanf_float+0x86>
 8004eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004eb8:	464a      	mov	r2, r9
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ec0:	4798      	blx	r3
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	e7f0      	b.n	8004eac <_scanf_float+0x2b0>
 8004eca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ece:	464a      	mov	r2, r9
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004ed6:	4798      	blx	r3
 8004ed8:	6923      	ldr	r3, [r4, #16]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6123      	str	r3, [r4, #16]
 8004ede:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ee2:	fa5f fa8a 	uxtb.w	sl, sl
 8004ee6:	f1ba 0f02 	cmp.w	sl, #2
 8004eea:	d1ee      	bne.n	8004eca <_scanf_float+0x2ce>
 8004eec:	3d03      	subs	r5, #3
 8004eee:	b2ed      	uxtb	r5, r5
 8004ef0:	1b76      	subs	r6, r6, r5
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	05da      	lsls	r2, r3, #23
 8004ef6:	d530      	bpl.n	8004f5a <_scanf_float+0x35e>
 8004ef8:	055b      	lsls	r3, r3, #21
 8004efa:	d511      	bpl.n	8004f20 <_scanf_float+0x324>
 8004efc:	9b01      	ldr	r3, [sp, #4]
 8004efe:	429e      	cmp	r6, r3
 8004f00:	f67f aebf 	bls.w	8004c82 <_scanf_float+0x86>
 8004f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f08:	464a      	mov	r2, r9
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f10:	4798      	blx	r3
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	6123      	str	r3, [r4, #16]
 8004f18:	e7f0      	b.n	8004efc <_scanf_float+0x300>
 8004f1a:	46aa      	mov	sl, r5
 8004f1c:	46b3      	mov	fp, r6
 8004f1e:	e7de      	b.n	8004ede <_scanf_float+0x2e2>
 8004f20:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	2965      	cmp	r1, #101	@ 0x65
 8004f28:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f2c:	f106 35ff 	add.w	r5, r6, #4294967295
 8004f30:	6123      	str	r3, [r4, #16]
 8004f32:	d00c      	beq.n	8004f4e <_scanf_float+0x352>
 8004f34:	2945      	cmp	r1, #69	@ 0x45
 8004f36:	d00a      	beq.n	8004f4e <_scanf_float+0x352>
 8004f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f3c:	464a      	mov	r2, r9
 8004f3e:	4640      	mov	r0, r8
 8004f40:	4798      	blx	r3
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	1eb5      	subs	r5, r6, #2
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	464a      	mov	r2, r9
 8004f50:	4640      	mov	r0, r8
 8004f52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f56:	4798      	blx	r3
 8004f58:	462e      	mov	r6, r5
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	f012 0210 	ands.w	r2, r2, #16
 8004f60:	d001      	beq.n	8004f66 <_scanf_float+0x36a>
 8004f62:	2000      	movs	r0, #0
 8004f64:	e68e      	b.n	8004c84 <_scanf_float+0x88>
 8004f66:	7032      	strb	r2, [r6, #0]
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f72:	d125      	bne.n	8004fc0 <_scanf_float+0x3c4>
 8004f74:	9b02      	ldr	r3, [sp, #8]
 8004f76:	429f      	cmp	r7, r3
 8004f78:	d00a      	beq.n	8004f90 <_scanf_float+0x394>
 8004f7a:	1bda      	subs	r2, r3, r7
 8004f7c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004f80:	429e      	cmp	r6, r3
 8004f82:	bf28      	it	cs
 8004f84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004f88:	4630      	mov	r0, r6
 8004f8a:	491f      	ldr	r1, [pc, #124]	@ (8005008 <_scanf_float+0x40c>)
 8004f8c:	f000 f972 	bl	8005274 <siprintf>
 8004f90:	2200      	movs	r2, #0
 8004f92:	4640      	mov	r0, r8
 8004f94:	9901      	ldr	r1, [sp, #4]
 8004f96:	f002 fd2b 	bl	80079f0 <_strtod_r>
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	6825      	ldr	r5, [r4, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f015 0f02 	tst.w	r5, #2
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	460f      	mov	r7, r1
 8004fa8:	f103 0204 	add.w	r2, r3, #4
 8004fac:	d015      	beq.n	8004fda <_scanf_float+0x3de>
 8004fae:	9903      	ldr	r1, [sp, #12]
 8004fb0:	600a      	str	r2, [r1, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	e9c3 6700 	strd	r6, r7, [r3]
 8004fb8:	68e3      	ldr	r3, [r4, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60e3      	str	r3, [r4, #12]
 8004fbe:	e7d0      	b.n	8004f62 <_scanf_float+0x366>
 8004fc0:	9b04      	ldr	r3, [sp, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0e4      	beq.n	8004f90 <_scanf_float+0x394>
 8004fc6:	9905      	ldr	r1, [sp, #20]
 8004fc8:	230a      	movs	r3, #10
 8004fca:	4640      	mov	r0, r8
 8004fcc:	3101      	adds	r1, #1
 8004fce:	f002 fd8f 	bl	8007af0 <_strtol_r>
 8004fd2:	9b04      	ldr	r3, [sp, #16]
 8004fd4:	9e05      	ldr	r6, [sp, #20]
 8004fd6:	1ac2      	subs	r2, r0, r3
 8004fd8:	e7d0      	b.n	8004f7c <_scanf_float+0x380>
 8004fda:	076d      	lsls	r5, r5, #29
 8004fdc:	d4e7      	bmi.n	8004fae <_scanf_float+0x3b2>
 8004fde:	9d03      	ldr	r5, [sp, #12]
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	681d      	ldr	r5, [r3, #0]
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	f7fb fd10 	bl	8000a0c <__aeabi_dcmpun>
 8004fec:	b120      	cbz	r0, 8004ff8 <_scanf_float+0x3fc>
 8004fee:	4807      	ldr	r0, [pc, #28]	@ (800500c <_scanf_float+0x410>)
 8004ff0:	f000 fb04 	bl	80055fc <nanf>
 8004ff4:	6028      	str	r0, [r5, #0]
 8004ff6:	e7df      	b.n	8004fb8 <_scanf_float+0x3bc>
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	f7fb fd64 	bl	8000ac8 <__aeabi_d2f>
 8005000:	e7f8      	b.n	8004ff4 <_scanf_float+0x3f8>
 8005002:	2700      	movs	r7, #0
 8005004:	e633      	b.n	8004c6e <_scanf_float+0x72>
 8005006:	bf00      	nop
 8005008:	08009490 	.word	0x08009490
 800500c:	080095ec 	.word	0x080095ec

08005010 <std>:
 8005010:	2300      	movs	r3, #0
 8005012:	b510      	push	{r4, lr}
 8005014:	4604      	mov	r4, r0
 8005016:	e9c0 3300 	strd	r3, r3, [r0]
 800501a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800501e:	6083      	str	r3, [r0, #8]
 8005020:	8181      	strh	r1, [r0, #12]
 8005022:	6643      	str	r3, [r0, #100]	@ 0x64
 8005024:	81c2      	strh	r2, [r0, #14]
 8005026:	6183      	str	r3, [r0, #24]
 8005028:	4619      	mov	r1, r3
 800502a:	2208      	movs	r2, #8
 800502c:	305c      	adds	r0, #92	@ 0x5c
 800502e:	f000 fa49 	bl	80054c4 <memset>
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <std+0x58>)
 8005034:	6224      	str	r4, [r4, #32]
 8005036:	6263      	str	r3, [r4, #36]	@ 0x24
 8005038:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <std+0x5c>)
 800503a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800503c:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <std+0x60>)
 800503e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005040:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <std+0x64>)
 8005042:	6323      	str	r3, [r4, #48]	@ 0x30
 8005044:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <std+0x68>)
 8005046:	429c      	cmp	r4, r3
 8005048:	d006      	beq.n	8005058 <std+0x48>
 800504a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800504e:	4294      	cmp	r4, r2
 8005050:	d002      	beq.n	8005058 <std+0x48>
 8005052:	33d0      	adds	r3, #208	@ 0xd0
 8005054:	429c      	cmp	r4, r3
 8005056:	d105      	bne.n	8005064 <std+0x54>
 8005058:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005060:	f000 baac 	b.w	80055bc <__retarget_lock_init_recursive>
 8005064:	bd10      	pop	{r4, pc}
 8005066:	bf00      	nop
 8005068:	08005311 	.word	0x08005311
 800506c:	08005337 	.word	0x08005337
 8005070:	0800536f 	.word	0x0800536f
 8005074:	08005393 	.word	0x08005393
 8005078:	20000308 	.word	0x20000308

0800507c <stdio_exit_handler>:
 800507c:	4a02      	ldr	r2, [pc, #8]	@ (8005088 <stdio_exit_handler+0xc>)
 800507e:	4903      	ldr	r1, [pc, #12]	@ (800508c <stdio_exit_handler+0x10>)
 8005080:	4803      	ldr	r0, [pc, #12]	@ (8005090 <stdio_exit_handler+0x14>)
 8005082:	f000 b869 	b.w	8005158 <_fwalk_sglue>
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c
 800508c:	08008759 	.word	0x08008759
 8005090:	2000001c 	.word	0x2000001c

08005094 <cleanup_stdio>:
 8005094:	6841      	ldr	r1, [r0, #4]
 8005096:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <cleanup_stdio+0x34>)
 8005098:	b510      	push	{r4, lr}
 800509a:	4299      	cmp	r1, r3
 800509c:	4604      	mov	r4, r0
 800509e:	d001      	beq.n	80050a4 <cleanup_stdio+0x10>
 80050a0:	f003 fb5a 	bl	8008758 <_fflush_r>
 80050a4:	68a1      	ldr	r1, [r4, #8]
 80050a6:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <cleanup_stdio+0x38>)
 80050a8:	4299      	cmp	r1, r3
 80050aa:	d002      	beq.n	80050b2 <cleanup_stdio+0x1e>
 80050ac:	4620      	mov	r0, r4
 80050ae:	f003 fb53 	bl	8008758 <_fflush_r>
 80050b2:	68e1      	ldr	r1, [r4, #12]
 80050b4:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <cleanup_stdio+0x3c>)
 80050b6:	4299      	cmp	r1, r3
 80050b8:	d004      	beq.n	80050c4 <cleanup_stdio+0x30>
 80050ba:	4620      	mov	r0, r4
 80050bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c0:	f003 bb4a 	b.w	8008758 <_fflush_r>
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	bf00      	nop
 80050c8:	20000308 	.word	0x20000308
 80050cc:	20000370 	.word	0x20000370
 80050d0:	200003d8 	.word	0x200003d8

080050d4 <global_stdio_init.part.0>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <global_stdio_init.part.0+0x30>)
 80050d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005108 <global_stdio_init.part.0+0x34>)
 80050da:	4a0c      	ldr	r2, [pc, #48]	@ (800510c <global_stdio_init.part.0+0x38>)
 80050dc:	4620      	mov	r0, r4
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	2104      	movs	r1, #4
 80050e2:	2200      	movs	r2, #0
 80050e4:	f7ff ff94 	bl	8005010 <std>
 80050e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050ec:	2201      	movs	r2, #1
 80050ee:	2109      	movs	r1, #9
 80050f0:	f7ff ff8e 	bl	8005010 <std>
 80050f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050f8:	2202      	movs	r2, #2
 80050fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050fe:	2112      	movs	r1, #18
 8005100:	f7ff bf86 	b.w	8005010 <std>
 8005104:	20000440 	.word	0x20000440
 8005108:	20000308 	.word	0x20000308
 800510c:	0800507d 	.word	0x0800507d

08005110 <__sfp_lock_acquire>:
 8005110:	4801      	ldr	r0, [pc, #4]	@ (8005118 <__sfp_lock_acquire+0x8>)
 8005112:	f000 ba54 	b.w	80055be <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	20000449 	.word	0x20000449

0800511c <__sfp_lock_release>:
 800511c:	4801      	ldr	r0, [pc, #4]	@ (8005124 <__sfp_lock_release+0x8>)
 800511e:	f000 ba4f 	b.w	80055c0 <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	20000449 	.word	0x20000449

08005128 <__sinit>:
 8005128:	b510      	push	{r4, lr}
 800512a:	4604      	mov	r4, r0
 800512c:	f7ff fff0 	bl	8005110 <__sfp_lock_acquire>
 8005130:	6a23      	ldr	r3, [r4, #32]
 8005132:	b11b      	cbz	r3, 800513c <__sinit+0x14>
 8005134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005138:	f7ff bff0 	b.w	800511c <__sfp_lock_release>
 800513c:	4b04      	ldr	r3, [pc, #16]	@ (8005150 <__sinit+0x28>)
 800513e:	6223      	str	r3, [r4, #32]
 8005140:	4b04      	ldr	r3, [pc, #16]	@ (8005154 <__sinit+0x2c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f5      	bne.n	8005134 <__sinit+0xc>
 8005148:	f7ff ffc4 	bl	80050d4 <global_stdio_init.part.0>
 800514c:	e7f2      	b.n	8005134 <__sinit+0xc>
 800514e:	bf00      	nop
 8005150:	08005095 	.word	0x08005095
 8005154:	20000440 	.word	0x20000440

08005158 <_fwalk_sglue>:
 8005158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800515c:	4607      	mov	r7, r0
 800515e:	4688      	mov	r8, r1
 8005160:	4614      	mov	r4, r2
 8005162:	2600      	movs	r6, #0
 8005164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005168:	f1b9 0901 	subs.w	r9, r9, #1
 800516c:	d505      	bpl.n	800517a <_fwalk_sglue+0x22>
 800516e:	6824      	ldr	r4, [r4, #0]
 8005170:	2c00      	cmp	r4, #0
 8005172:	d1f7      	bne.n	8005164 <_fwalk_sglue+0xc>
 8005174:	4630      	mov	r0, r6
 8005176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800517a:	89ab      	ldrh	r3, [r5, #12]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d907      	bls.n	8005190 <_fwalk_sglue+0x38>
 8005180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005184:	3301      	adds	r3, #1
 8005186:	d003      	beq.n	8005190 <_fwalk_sglue+0x38>
 8005188:	4629      	mov	r1, r5
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	4306      	orrs	r6, r0
 8005190:	3568      	adds	r5, #104	@ 0x68
 8005192:	e7e9      	b.n	8005168 <_fwalk_sglue+0x10>

08005194 <iprintf>:
 8005194:	b40f      	push	{r0, r1, r2, r3}
 8005196:	b507      	push	{r0, r1, r2, lr}
 8005198:	4906      	ldr	r1, [pc, #24]	@ (80051b4 <iprintf+0x20>)
 800519a:	ab04      	add	r3, sp, #16
 800519c:	6808      	ldr	r0, [r1, #0]
 800519e:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a2:	6881      	ldr	r1, [r0, #8]
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	f002 fff3 	bl	8008190 <_vfiprintf_r>
 80051aa:	b003      	add	sp, #12
 80051ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80051b0:	b004      	add	sp, #16
 80051b2:	4770      	bx	lr
 80051b4:	20000018 	.word	0x20000018

080051b8 <_puts_r>:
 80051b8:	6a03      	ldr	r3, [r0, #32]
 80051ba:	b570      	push	{r4, r5, r6, lr}
 80051bc:	4605      	mov	r5, r0
 80051be:	460e      	mov	r6, r1
 80051c0:	6884      	ldr	r4, [r0, #8]
 80051c2:	b90b      	cbnz	r3, 80051c8 <_puts_r+0x10>
 80051c4:	f7ff ffb0 	bl	8005128 <__sinit>
 80051c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051ca:	07db      	lsls	r3, r3, #31
 80051cc:	d405      	bmi.n	80051da <_puts_r+0x22>
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	0598      	lsls	r0, r3, #22
 80051d2:	d402      	bmi.n	80051da <_puts_r+0x22>
 80051d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051d6:	f000 f9f2 	bl	80055be <__retarget_lock_acquire_recursive>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	0719      	lsls	r1, r3, #28
 80051de:	d502      	bpl.n	80051e6 <_puts_r+0x2e>
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d135      	bne.n	8005252 <_puts_r+0x9a>
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 f915 	bl	8005418 <__swsetup_r>
 80051ee:	b380      	cbz	r0, 8005252 <_puts_r+0x9a>
 80051f0:	f04f 35ff 	mov.w	r5, #4294967295
 80051f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051f6:	07da      	lsls	r2, r3, #31
 80051f8:	d405      	bmi.n	8005206 <_puts_r+0x4e>
 80051fa:	89a3      	ldrh	r3, [r4, #12]
 80051fc:	059b      	lsls	r3, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_puts_r+0x4e>
 8005200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005202:	f000 f9dd 	bl	80055c0 <__retarget_lock_release_recursive>
 8005206:	4628      	mov	r0, r5
 8005208:	bd70      	pop	{r4, r5, r6, pc}
 800520a:	2b00      	cmp	r3, #0
 800520c:	da04      	bge.n	8005218 <_puts_r+0x60>
 800520e:	69a2      	ldr	r2, [r4, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	dc17      	bgt.n	8005244 <_puts_r+0x8c>
 8005214:	290a      	cmp	r1, #10
 8005216:	d015      	beq.n	8005244 <_puts_r+0x8c>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	6022      	str	r2, [r4, #0]
 800521e:	7019      	strb	r1, [r3, #0]
 8005220:	68a3      	ldr	r3, [r4, #8]
 8005222:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005226:	3b01      	subs	r3, #1
 8005228:	60a3      	str	r3, [r4, #8]
 800522a:	2900      	cmp	r1, #0
 800522c:	d1ed      	bne.n	800520a <_puts_r+0x52>
 800522e:	2b00      	cmp	r3, #0
 8005230:	da11      	bge.n	8005256 <_puts_r+0x9e>
 8005232:	4622      	mov	r2, r4
 8005234:	210a      	movs	r1, #10
 8005236:	4628      	mov	r0, r5
 8005238:	f000 f8af 	bl	800539a <__swbuf_r>
 800523c:	3001      	adds	r0, #1
 800523e:	d0d7      	beq.n	80051f0 <_puts_r+0x38>
 8005240:	250a      	movs	r5, #10
 8005242:	e7d7      	b.n	80051f4 <_puts_r+0x3c>
 8005244:	4622      	mov	r2, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f8a7 	bl	800539a <__swbuf_r>
 800524c:	3001      	adds	r0, #1
 800524e:	d1e7      	bne.n	8005220 <_puts_r+0x68>
 8005250:	e7ce      	b.n	80051f0 <_puts_r+0x38>
 8005252:	3e01      	subs	r6, #1
 8005254:	e7e4      	b.n	8005220 <_puts_r+0x68>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	6022      	str	r2, [r4, #0]
 800525c:	220a      	movs	r2, #10
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e7ee      	b.n	8005240 <_puts_r+0x88>
	...

08005264 <puts>:
 8005264:	4b02      	ldr	r3, [pc, #8]	@ (8005270 <puts+0xc>)
 8005266:	4601      	mov	r1, r0
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	f7ff bfa5 	b.w	80051b8 <_puts_r>
 800526e:	bf00      	nop
 8005270:	20000018 	.word	0x20000018

08005274 <siprintf>:
 8005274:	b40e      	push	{r1, r2, r3}
 8005276:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800527a:	b510      	push	{r4, lr}
 800527c:	2400      	movs	r4, #0
 800527e:	b09d      	sub	sp, #116	@ 0x74
 8005280:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005282:	9002      	str	r0, [sp, #8]
 8005284:	9006      	str	r0, [sp, #24]
 8005286:	9107      	str	r1, [sp, #28]
 8005288:	9104      	str	r1, [sp, #16]
 800528a:	4809      	ldr	r0, [pc, #36]	@ (80052b0 <siprintf+0x3c>)
 800528c:	4909      	ldr	r1, [pc, #36]	@ (80052b4 <siprintf+0x40>)
 800528e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005292:	9105      	str	r1, [sp, #20]
 8005294:	6800      	ldr	r0, [r0, #0]
 8005296:	a902      	add	r1, sp, #8
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800529c:	f002 fc86 	bl	8007bac <_svfiprintf_r>
 80052a0:	9b02      	ldr	r3, [sp, #8]
 80052a2:	701c      	strb	r4, [r3, #0]
 80052a4:	b01d      	add	sp, #116	@ 0x74
 80052a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052aa:	b003      	add	sp, #12
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20000018 	.word	0x20000018
 80052b4:	ffff0208 	.word	0xffff0208

080052b8 <siscanf>:
 80052b8:	b40e      	push	{r1, r2, r3}
 80052ba:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80052be:	b570      	push	{r4, r5, r6, lr}
 80052c0:	2500      	movs	r5, #0
 80052c2:	b09d      	sub	sp, #116	@ 0x74
 80052c4:	ac21      	add	r4, sp, #132	@ 0x84
 80052c6:	f854 6b04 	ldr.w	r6, [r4], #4
 80052ca:	f8ad 2014 	strh.w	r2, [sp, #20]
 80052ce:	951b      	str	r5, [sp, #108]	@ 0x6c
 80052d0:	9002      	str	r0, [sp, #8]
 80052d2:	9006      	str	r0, [sp, #24]
 80052d4:	f7fa ff3c 	bl	8000150 <strlen>
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <siscanf+0x50>)
 80052da:	9003      	str	r0, [sp, #12]
 80052dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052e2:	9007      	str	r0, [sp, #28]
 80052e4:	4809      	ldr	r0, [pc, #36]	@ (800530c <siscanf+0x54>)
 80052e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052ea:	4632      	mov	r2, r6
 80052ec:	4623      	mov	r3, r4
 80052ee:	a902      	add	r1, sp, #8
 80052f0:	6800      	ldr	r0, [r0, #0]
 80052f2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80052f4:	9514      	str	r5, [sp, #80]	@ 0x50
 80052f6:	9401      	str	r4, [sp, #4]
 80052f8:	f002 fdae 	bl	8007e58 <__ssvfiscanf_r>
 80052fc:	b01d      	add	sp, #116	@ 0x74
 80052fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005302:	b003      	add	sp, #12
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	08005333 	.word	0x08005333
 800530c:	20000018 	.word	0x20000018

08005310 <__sread>:
 8005310:	b510      	push	{r4, lr}
 8005312:	460c      	mov	r4, r1
 8005314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005318:	f000 f902 	bl	8005520 <_read_r>
 800531c:	2800      	cmp	r0, #0
 800531e:	bfab      	itete	ge
 8005320:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005322:	89a3      	ldrhlt	r3, [r4, #12]
 8005324:	181b      	addge	r3, r3, r0
 8005326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800532a:	bfac      	ite	ge
 800532c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800532e:	81a3      	strhlt	r3, [r4, #12]
 8005330:	bd10      	pop	{r4, pc}

08005332 <__seofread>:
 8005332:	2000      	movs	r0, #0
 8005334:	4770      	bx	lr

08005336 <__swrite>:
 8005336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533a:	461f      	mov	r7, r3
 800533c:	898b      	ldrh	r3, [r1, #12]
 800533e:	4605      	mov	r5, r0
 8005340:	05db      	lsls	r3, r3, #23
 8005342:	460c      	mov	r4, r1
 8005344:	4616      	mov	r6, r2
 8005346:	d505      	bpl.n	8005354 <__swrite+0x1e>
 8005348:	2302      	movs	r3, #2
 800534a:	2200      	movs	r2, #0
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	f000 f8d4 	bl	80054fc <_lseek_r>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	4632      	mov	r2, r6
 8005358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	4628      	mov	r0, r5
 8005360:	463b      	mov	r3, r7
 8005362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	f000 b8eb 	b.w	8005544 <_write_r>

0800536e <__sseek>:
 800536e:	b510      	push	{r4, lr}
 8005370:	460c      	mov	r4, r1
 8005372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005376:	f000 f8c1 	bl	80054fc <_lseek_r>
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	bf15      	itete	ne
 8005380:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005382:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005386:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800538a:	81a3      	strheq	r3, [r4, #12]
 800538c:	bf18      	it	ne
 800538e:	81a3      	strhne	r3, [r4, #12]
 8005390:	bd10      	pop	{r4, pc}

08005392 <__sclose>:
 8005392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005396:	f000 b8a1 	b.w	80054dc <_close_r>

0800539a <__swbuf_r>:
 800539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539c:	460e      	mov	r6, r1
 800539e:	4614      	mov	r4, r2
 80053a0:	4605      	mov	r5, r0
 80053a2:	b118      	cbz	r0, 80053ac <__swbuf_r+0x12>
 80053a4:	6a03      	ldr	r3, [r0, #32]
 80053a6:	b90b      	cbnz	r3, 80053ac <__swbuf_r+0x12>
 80053a8:	f7ff febe 	bl	8005128 <__sinit>
 80053ac:	69a3      	ldr	r3, [r4, #24]
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	071a      	lsls	r2, r3, #28
 80053b4:	d501      	bpl.n	80053ba <__swbuf_r+0x20>
 80053b6:	6923      	ldr	r3, [r4, #16]
 80053b8:	b943      	cbnz	r3, 80053cc <__swbuf_r+0x32>
 80053ba:	4621      	mov	r1, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 f82b 	bl	8005418 <__swsetup_r>
 80053c2:	b118      	cbz	r0, 80053cc <__swbuf_r+0x32>
 80053c4:	f04f 37ff 	mov.w	r7, #4294967295
 80053c8:	4638      	mov	r0, r7
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	6922      	ldr	r2, [r4, #16]
 80053d0:	b2f6      	uxtb	r6, r6
 80053d2:	1a98      	subs	r0, r3, r2
 80053d4:	6963      	ldr	r3, [r4, #20]
 80053d6:	4637      	mov	r7, r6
 80053d8:	4283      	cmp	r3, r0
 80053da:	dc05      	bgt.n	80053e8 <__swbuf_r+0x4e>
 80053dc:	4621      	mov	r1, r4
 80053de:	4628      	mov	r0, r5
 80053e0:	f003 f9ba 	bl	8008758 <_fflush_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d1ed      	bne.n	80053c4 <__swbuf_r+0x2a>
 80053e8:	68a3      	ldr	r3, [r4, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	60a3      	str	r3, [r4, #8]
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	701e      	strb	r6, [r3, #0]
 80053f6:	6962      	ldr	r2, [r4, #20]
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d004      	beq.n	8005408 <__swbuf_r+0x6e>
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	07db      	lsls	r3, r3, #31
 8005402:	d5e1      	bpl.n	80053c8 <__swbuf_r+0x2e>
 8005404:	2e0a      	cmp	r6, #10
 8005406:	d1df      	bne.n	80053c8 <__swbuf_r+0x2e>
 8005408:	4621      	mov	r1, r4
 800540a:	4628      	mov	r0, r5
 800540c:	f003 f9a4 	bl	8008758 <_fflush_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	d0d9      	beq.n	80053c8 <__swbuf_r+0x2e>
 8005414:	e7d6      	b.n	80053c4 <__swbuf_r+0x2a>
	...

08005418 <__swsetup_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4b29      	ldr	r3, [pc, #164]	@ (80054c0 <__swsetup_r+0xa8>)
 800541c:	4605      	mov	r5, r0
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	460c      	mov	r4, r1
 8005422:	b118      	cbz	r0, 800542c <__swsetup_r+0x14>
 8005424:	6a03      	ldr	r3, [r0, #32]
 8005426:	b90b      	cbnz	r3, 800542c <__swsetup_r+0x14>
 8005428:	f7ff fe7e 	bl	8005128 <__sinit>
 800542c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005430:	0719      	lsls	r1, r3, #28
 8005432:	d422      	bmi.n	800547a <__swsetup_r+0x62>
 8005434:	06da      	lsls	r2, r3, #27
 8005436:	d407      	bmi.n	8005448 <__swsetup_r+0x30>
 8005438:	2209      	movs	r2, #9
 800543a:	602a      	str	r2, [r5, #0]
 800543c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	e033      	b.n	80054b0 <__swsetup_r+0x98>
 8005448:	0758      	lsls	r0, r3, #29
 800544a:	d512      	bpl.n	8005472 <__swsetup_r+0x5a>
 800544c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800544e:	b141      	cbz	r1, 8005462 <__swsetup_r+0x4a>
 8005450:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005454:	4299      	cmp	r1, r3
 8005456:	d002      	beq.n	800545e <__swsetup_r+0x46>
 8005458:	4628      	mov	r0, r5
 800545a:	f000 ff31 	bl	80062c0 <_free_r>
 800545e:	2300      	movs	r3, #0
 8005460:	6363      	str	r3, [r4, #52]	@ 0x34
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	2300      	movs	r3, #0
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f043 0308 	orr.w	r3, r3, #8
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	b94b      	cbnz	r3, 8005492 <__swsetup_r+0x7a>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005488:	d003      	beq.n	8005492 <__swsetup_r+0x7a>
 800548a:	4621      	mov	r1, r4
 800548c:	4628      	mov	r0, r5
 800548e:	f003 f9b0 	bl	80087f2 <__smakebuf_r>
 8005492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005496:	f013 0201 	ands.w	r2, r3, #1
 800549a:	d00a      	beq.n	80054b2 <__swsetup_r+0x9a>
 800549c:	2200      	movs	r2, #0
 800549e:	60a2      	str	r2, [r4, #8]
 80054a0:	6962      	ldr	r2, [r4, #20]
 80054a2:	4252      	negs	r2, r2
 80054a4:	61a2      	str	r2, [r4, #24]
 80054a6:	6922      	ldr	r2, [r4, #16]
 80054a8:	b942      	cbnz	r2, 80054bc <__swsetup_r+0xa4>
 80054aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054ae:	d1c5      	bne.n	800543c <__swsetup_r+0x24>
 80054b0:	bd38      	pop	{r3, r4, r5, pc}
 80054b2:	0799      	lsls	r1, r3, #30
 80054b4:	bf58      	it	pl
 80054b6:	6962      	ldrpl	r2, [r4, #20]
 80054b8:	60a2      	str	r2, [r4, #8]
 80054ba:	e7f4      	b.n	80054a6 <__swsetup_r+0x8e>
 80054bc:	2000      	movs	r0, #0
 80054be:	e7f7      	b.n	80054b0 <__swsetup_r+0x98>
 80054c0:	20000018 	.word	0x20000018

080054c4 <memset>:
 80054c4:	4603      	mov	r3, r0
 80054c6:	4402      	add	r2, r0
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d100      	bne.n	80054ce <memset+0xa>
 80054cc:	4770      	bx	lr
 80054ce:	f803 1b01 	strb.w	r1, [r3], #1
 80054d2:	e7f9      	b.n	80054c8 <memset+0x4>

080054d4 <_localeconv_r>:
 80054d4:	4800      	ldr	r0, [pc, #0]	@ (80054d8 <_localeconv_r+0x4>)
 80054d6:	4770      	bx	lr
 80054d8:	20000158 	.word	0x20000158

080054dc <_close_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	2300      	movs	r3, #0
 80054e0:	4d05      	ldr	r5, [pc, #20]	@ (80054f8 <_close_r+0x1c>)
 80054e2:	4604      	mov	r4, r0
 80054e4:	4608      	mov	r0, r1
 80054e6:	602b      	str	r3, [r5, #0]
 80054e8:	f7fc faf1 	bl	8001ace <_close>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_close_r+0x1a>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_close_r+0x1a>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	20000444 	.word	0x20000444

080054fc <_lseek_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	2200      	movs	r2, #0
 8005506:	4d05      	ldr	r5, [pc, #20]	@ (800551c <_lseek_r+0x20>)
 8005508:	602a      	str	r2, [r5, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	f7fc fb03 	bl	8001b16 <_lseek>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_lseek_r+0x1e>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_lseek_r+0x1e>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	20000444 	.word	0x20000444

08005520 <_read_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4604      	mov	r4, r0
 8005524:	4608      	mov	r0, r1
 8005526:	4611      	mov	r1, r2
 8005528:	2200      	movs	r2, #0
 800552a:	4d05      	ldr	r5, [pc, #20]	@ (8005540 <_read_r+0x20>)
 800552c:	602a      	str	r2, [r5, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	f7fc fab0 	bl	8001a94 <_read>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_read_r+0x1e>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_read_r+0x1e>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20000444 	.word	0x20000444

08005544 <_write_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4604      	mov	r4, r0
 8005548:	4608      	mov	r0, r1
 800554a:	4611      	mov	r1, r2
 800554c:	2200      	movs	r2, #0
 800554e:	4d05      	ldr	r5, [pc, #20]	@ (8005564 <_write_r+0x20>)
 8005550:	602a      	str	r2, [r5, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	f7fb ff3a 	bl	80013cc <_write>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_write_r+0x1e>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_write_r+0x1e>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	20000444 	.word	0x20000444

08005568 <__errno>:
 8005568:	4b01      	ldr	r3, [pc, #4]	@ (8005570 <__errno+0x8>)
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000018 	.word	0x20000018

08005574 <__libc_init_array>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	2600      	movs	r6, #0
 8005578:	4d0c      	ldr	r5, [pc, #48]	@ (80055ac <__libc_init_array+0x38>)
 800557a:	4c0d      	ldr	r4, [pc, #52]	@ (80055b0 <__libc_init_array+0x3c>)
 800557c:	1b64      	subs	r4, r4, r5
 800557e:	10a4      	asrs	r4, r4, #2
 8005580:	42a6      	cmp	r6, r4
 8005582:	d109      	bne.n	8005598 <__libc_init_array+0x24>
 8005584:	f003 fed6 	bl	8009334 <_init>
 8005588:	2600      	movs	r6, #0
 800558a:	4d0a      	ldr	r5, [pc, #40]	@ (80055b4 <__libc_init_array+0x40>)
 800558c:	4c0a      	ldr	r4, [pc, #40]	@ (80055b8 <__libc_init_array+0x44>)
 800558e:	1b64      	subs	r4, r4, r5
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	42a6      	cmp	r6, r4
 8005594:	d105      	bne.n	80055a2 <__libc_init_array+0x2e>
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	f855 3b04 	ldr.w	r3, [r5], #4
 800559c:	4798      	blx	r3
 800559e:	3601      	adds	r6, #1
 80055a0:	e7ee      	b.n	8005580 <__libc_init_array+0xc>
 80055a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a6:	4798      	blx	r3
 80055a8:	3601      	adds	r6, #1
 80055aa:	e7f2      	b.n	8005592 <__libc_init_array+0x1e>
 80055ac:	080098ac 	.word	0x080098ac
 80055b0:	080098ac 	.word	0x080098ac
 80055b4:	080098ac 	.word	0x080098ac
 80055b8:	080098b0 	.word	0x080098b0

080055bc <__retarget_lock_init_recursive>:
 80055bc:	4770      	bx	lr

080055be <__retarget_lock_acquire_recursive>:
 80055be:	4770      	bx	lr

080055c0 <__retarget_lock_release_recursive>:
 80055c0:	4770      	bx	lr

080055c2 <memchr>:
 80055c2:	4603      	mov	r3, r0
 80055c4:	b510      	push	{r4, lr}
 80055c6:	b2c9      	uxtb	r1, r1
 80055c8:	4402      	add	r2, r0
 80055ca:	4293      	cmp	r3, r2
 80055cc:	4618      	mov	r0, r3
 80055ce:	d101      	bne.n	80055d4 <memchr+0x12>
 80055d0:	2000      	movs	r0, #0
 80055d2:	e003      	b.n	80055dc <memchr+0x1a>
 80055d4:	7804      	ldrb	r4, [r0, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	428c      	cmp	r4, r1
 80055da:	d1f6      	bne.n	80055ca <memchr+0x8>
 80055dc:	bd10      	pop	{r4, pc}

080055de <memcpy>:
 80055de:	440a      	add	r2, r1
 80055e0:	4291      	cmp	r1, r2
 80055e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80055e6:	d100      	bne.n	80055ea <memcpy+0xc>
 80055e8:	4770      	bx	lr
 80055ea:	b510      	push	{r4, lr}
 80055ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f0:	4291      	cmp	r1, r2
 80055f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f6:	d1f9      	bne.n	80055ec <memcpy+0xe>
 80055f8:	bd10      	pop	{r4, pc}
	...

080055fc <nanf>:
 80055fc:	4800      	ldr	r0, [pc, #0]	@ (8005600 <nanf+0x4>)
 80055fe:	4770      	bx	lr
 8005600:	7fc00000 	.word	0x7fc00000

08005604 <quorem>:
 8005604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005608:	6903      	ldr	r3, [r0, #16]
 800560a:	690c      	ldr	r4, [r1, #16]
 800560c:	4607      	mov	r7, r0
 800560e:	42a3      	cmp	r3, r4
 8005610:	db7e      	blt.n	8005710 <quorem+0x10c>
 8005612:	3c01      	subs	r4, #1
 8005614:	00a3      	lsls	r3, r4, #2
 8005616:	f100 0514 	add.w	r5, r0, #20
 800561a:	f101 0814 	add.w	r8, r1, #20
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800562a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800562e:	3301      	adds	r3, #1
 8005630:	429a      	cmp	r2, r3
 8005632:	fbb2 f6f3 	udiv	r6, r2, r3
 8005636:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800563a:	d32e      	bcc.n	800569a <quorem+0x96>
 800563c:	f04f 0a00 	mov.w	sl, #0
 8005640:	46c4      	mov	ip, r8
 8005642:	46ae      	mov	lr, r5
 8005644:	46d3      	mov	fp, sl
 8005646:	f85c 3b04 	ldr.w	r3, [ip], #4
 800564a:	b298      	uxth	r0, r3
 800564c:	fb06 a000 	mla	r0, r6, r0, sl
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	0c02      	lsrs	r2, r0, #16
 8005654:	fb06 2303 	mla	r3, r6, r3, r2
 8005658:	f8de 2000 	ldr.w	r2, [lr]
 800565c:	b280      	uxth	r0, r0
 800565e:	b292      	uxth	r2, r2
 8005660:	1a12      	subs	r2, r2, r0
 8005662:	445a      	add	r2, fp
 8005664:	f8de 0000 	ldr.w	r0, [lr]
 8005668:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800566c:	b29b      	uxth	r3, r3
 800566e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005672:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005676:	b292      	uxth	r2, r2
 8005678:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800567c:	45e1      	cmp	r9, ip
 800567e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005682:	f84e 2b04 	str.w	r2, [lr], #4
 8005686:	d2de      	bcs.n	8005646 <quorem+0x42>
 8005688:	9b00      	ldr	r3, [sp, #0]
 800568a:	58eb      	ldr	r3, [r5, r3]
 800568c:	b92b      	cbnz	r3, 800569a <quorem+0x96>
 800568e:	9b01      	ldr	r3, [sp, #4]
 8005690:	3b04      	subs	r3, #4
 8005692:	429d      	cmp	r5, r3
 8005694:	461a      	mov	r2, r3
 8005696:	d32f      	bcc.n	80056f8 <quorem+0xf4>
 8005698:	613c      	str	r4, [r7, #16]
 800569a:	4638      	mov	r0, r7
 800569c:	f001 f9ca 	bl	8006a34 <__mcmp>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	db25      	blt.n	80056f0 <quorem+0xec>
 80056a4:	4629      	mov	r1, r5
 80056a6:	2000      	movs	r0, #0
 80056a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80056ac:	f8d1 c000 	ldr.w	ip, [r1]
 80056b0:	fa1f fe82 	uxth.w	lr, r2
 80056b4:	fa1f f38c 	uxth.w	r3, ip
 80056b8:	eba3 030e 	sub.w	r3, r3, lr
 80056bc:	4403      	add	r3, r0
 80056be:	0c12      	lsrs	r2, r2, #16
 80056c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ce:	45c1      	cmp	r9, r8
 80056d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056d4:	f841 3b04 	str.w	r3, [r1], #4
 80056d8:	d2e6      	bcs.n	80056a8 <quorem+0xa4>
 80056da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056e2:	b922      	cbnz	r2, 80056ee <quorem+0xea>
 80056e4:	3b04      	subs	r3, #4
 80056e6:	429d      	cmp	r5, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	d30b      	bcc.n	8005704 <quorem+0x100>
 80056ec:	613c      	str	r4, [r7, #16]
 80056ee:	3601      	adds	r6, #1
 80056f0:	4630      	mov	r0, r6
 80056f2:	b003      	add	sp, #12
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	3b04      	subs	r3, #4
 80056fc:	2a00      	cmp	r2, #0
 80056fe:	d1cb      	bne.n	8005698 <quorem+0x94>
 8005700:	3c01      	subs	r4, #1
 8005702:	e7c6      	b.n	8005692 <quorem+0x8e>
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	3b04      	subs	r3, #4
 8005708:	2a00      	cmp	r2, #0
 800570a:	d1ef      	bne.n	80056ec <quorem+0xe8>
 800570c:	3c01      	subs	r4, #1
 800570e:	e7ea      	b.n	80056e6 <quorem+0xe2>
 8005710:	2000      	movs	r0, #0
 8005712:	e7ee      	b.n	80056f2 <quorem+0xee>
 8005714:	0000      	movs	r0, r0
	...

08005718 <_dtoa_r>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	69c7      	ldr	r7, [r0, #28]
 8005722:	b097      	sub	sp, #92	@ 0x5c
 8005724:	4681      	mov	r9, r0
 8005726:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800572a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800572c:	b97f      	cbnz	r7, 800574e <_dtoa_r+0x36>
 800572e:	2010      	movs	r0, #16
 8005730:	f000 fe0e 	bl	8006350 <malloc>
 8005734:	4602      	mov	r2, r0
 8005736:	f8c9 001c 	str.w	r0, [r9, #28]
 800573a:	b920      	cbnz	r0, 8005746 <_dtoa_r+0x2e>
 800573c:	21ef      	movs	r1, #239	@ 0xef
 800573e:	4bac      	ldr	r3, [pc, #688]	@ (80059f0 <_dtoa_r+0x2d8>)
 8005740:	48ac      	ldr	r0, [pc, #688]	@ (80059f4 <_dtoa_r+0x2dc>)
 8005742:	f003 f967 	bl	8008a14 <__assert_func>
 8005746:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800574a:	6007      	str	r7, [r0, #0]
 800574c:	60c7      	str	r7, [r0, #12]
 800574e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	b159      	cbz	r1, 800576e <_dtoa_r+0x56>
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	2301      	movs	r3, #1
 800575a:	4093      	lsls	r3, r2
 800575c:	604a      	str	r2, [r1, #4]
 800575e:	608b      	str	r3, [r1, #8]
 8005760:	4648      	mov	r0, r9
 8005762:	f000 feeb 	bl	800653c <_Bfree>
 8005766:	2200      	movs	r2, #0
 8005768:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	1e2b      	subs	r3, r5, #0
 8005770:	bfaf      	iteee	ge
 8005772:	2300      	movge	r3, #0
 8005774:	2201      	movlt	r2, #1
 8005776:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800577a:	9307      	strlt	r3, [sp, #28]
 800577c:	bfa8      	it	ge
 800577e:	6033      	strge	r3, [r6, #0]
 8005780:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005784:	4b9c      	ldr	r3, [pc, #624]	@ (80059f8 <_dtoa_r+0x2e0>)
 8005786:	bfb8      	it	lt
 8005788:	6032      	strlt	r2, [r6, #0]
 800578a:	ea33 0308 	bics.w	r3, r3, r8
 800578e:	d112      	bne.n	80057b6 <_dtoa_r+0x9e>
 8005790:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005794:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800579c:	4323      	orrs	r3, r4
 800579e:	f000 855e 	beq.w	800625e <_dtoa_r+0xb46>
 80057a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80059fc <_dtoa_r+0x2e4>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8560 	beq.w	800626e <_dtoa_r+0xb56>
 80057ae:	f10a 0303 	add.w	r3, sl, #3
 80057b2:	f000 bd5a 	b.w	800626a <_dtoa_r+0xb52>
 80057b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80057be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057c2:	2200      	movs	r2, #0
 80057c4:	2300      	movs	r3, #0
 80057c6:	f7fb f8ef 	bl	80009a8 <__aeabi_dcmpeq>
 80057ca:	4607      	mov	r7, r0
 80057cc:	b158      	cbz	r0, 80057e6 <_dtoa_r+0xce>
 80057ce:	2301      	movs	r3, #1
 80057d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057d6:	b113      	cbz	r3, 80057de <_dtoa_r+0xc6>
 80057d8:	4b89      	ldr	r3, [pc, #548]	@ (8005a00 <_dtoa_r+0x2e8>)
 80057da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005a04 <_dtoa_r+0x2ec>
 80057e2:	f000 bd44 	b.w	800626e <_dtoa_r+0xb56>
 80057e6:	ab14      	add	r3, sp, #80	@ 0x50
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	ab15      	add	r3, sp, #84	@ 0x54
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	4648      	mov	r0, r9
 80057f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80057f4:	f001 fa36 	bl	8006c64 <__d2b>
 80057f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80057fc:	9003      	str	r0, [sp, #12]
 80057fe:	2e00      	cmp	r6, #0
 8005800:	d078      	beq.n	80058f4 <_dtoa_r+0x1dc>
 8005802:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005808:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800580c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005810:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005814:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005818:	9712      	str	r7, [sp, #72]	@ 0x48
 800581a:	4619      	mov	r1, r3
 800581c:	2200      	movs	r2, #0
 800581e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a08 <_dtoa_r+0x2f0>)
 8005820:	f7fa fca2 	bl	8000168 <__aeabi_dsub>
 8005824:	a36c      	add	r3, pc, #432	@ (adr r3, 80059d8 <_dtoa_r+0x2c0>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fa fe55 	bl	80004d8 <__aeabi_dmul>
 800582e:	a36c      	add	r3, pc, #432	@ (adr r3, 80059e0 <_dtoa_r+0x2c8>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa fc9a 	bl	800016c <__adddf3>
 8005838:	4604      	mov	r4, r0
 800583a:	4630      	mov	r0, r6
 800583c:	460d      	mov	r5, r1
 800583e:	f7fa fde1 	bl	8000404 <__aeabi_i2d>
 8005842:	a369      	add	r3, pc, #420	@ (adr r3, 80059e8 <_dtoa_r+0x2d0>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fa fe46 	bl	80004d8 <__aeabi_dmul>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4620      	mov	r0, r4
 8005852:	4629      	mov	r1, r5
 8005854:	f7fa fc8a 	bl	800016c <__adddf3>
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	f7fb f8ec 	bl	8000a38 <__aeabi_d2iz>
 8005860:	2200      	movs	r2, #0
 8005862:	4607      	mov	r7, r0
 8005864:	2300      	movs	r3, #0
 8005866:	4620      	mov	r0, r4
 8005868:	4629      	mov	r1, r5
 800586a:	f7fb f8a7 	bl	80009bc <__aeabi_dcmplt>
 800586e:	b140      	cbz	r0, 8005882 <_dtoa_r+0x16a>
 8005870:	4638      	mov	r0, r7
 8005872:	f7fa fdc7 	bl	8000404 <__aeabi_i2d>
 8005876:	4622      	mov	r2, r4
 8005878:	462b      	mov	r3, r5
 800587a:	f7fb f895 	bl	80009a8 <__aeabi_dcmpeq>
 800587e:	b900      	cbnz	r0, 8005882 <_dtoa_r+0x16a>
 8005880:	3f01      	subs	r7, #1
 8005882:	2f16      	cmp	r7, #22
 8005884:	d854      	bhi.n	8005930 <_dtoa_r+0x218>
 8005886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800588a:	4b60      	ldr	r3, [pc, #384]	@ (8005a0c <_dtoa_r+0x2f4>)
 800588c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f7fb f892 	bl	80009bc <__aeabi_dcmplt>
 8005898:	2800      	cmp	r0, #0
 800589a:	d04b      	beq.n	8005934 <_dtoa_r+0x21c>
 800589c:	2300      	movs	r3, #0
 800589e:	3f01      	subs	r7, #1
 80058a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058a4:	1b9b      	subs	r3, r3, r6
 80058a6:	1e5a      	subs	r2, r3, #1
 80058a8:	bf49      	itett	mi
 80058aa:	f1c3 0301 	rsbmi	r3, r3, #1
 80058ae:	2300      	movpl	r3, #0
 80058b0:	9304      	strmi	r3, [sp, #16]
 80058b2:	2300      	movmi	r3, #0
 80058b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80058b6:	bf54      	ite	pl
 80058b8:	9304      	strpl	r3, [sp, #16]
 80058ba:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80058bc:	2f00      	cmp	r7, #0
 80058be:	db3b      	blt.n	8005938 <_dtoa_r+0x220>
 80058c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c2:	970e      	str	r7, [sp, #56]	@ 0x38
 80058c4:	443b      	add	r3, r7
 80058c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c8:	2300      	movs	r3, #0
 80058ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80058cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	d865      	bhi.n	800599e <_dtoa_r+0x286>
 80058d2:	2b05      	cmp	r3, #5
 80058d4:	bfc4      	itt	gt
 80058d6:	3b04      	subgt	r3, #4
 80058d8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80058da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058dc:	bfc8      	it	gt
 80058de:	2400      	movgt	r4, #0
 80058e0:	f1a3 0302 	sub.w	r3, r3, #2
 80058e4:	bfd8      	it	le
 80058e6:	2401      	movle	r4, #1
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d864      	bhi.n	80059b6 <_dtoa_r+0x29e>
 80058ec:	e8df f003 	tbb	[pc, r3]
 80058f0:	2c385553 	.word	0x2c385553
 80058f4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058f8:	441e      	add	r6, r3
 80058fa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058fe:	2b20      	cmp	r3, #32
 8005900:	bfc1      	itttt	gt
 8005902:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005906:	fa08 f803 	lslgt.w	r8, r8, r3
 800590a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800590e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005912:	bfd6      	itet	le
 8005914:	f1c3 0320 	rsble	r3, r3, #32
 8005918:	ea48 0003 	orrgt.w	r0, r8, r3
 800591c:	fa04 f003 	lslle.w	r0, r4, r3
 8005920:	f7fa fd60 	bl	80003e4 <__aeabi_ui2d>
 8005924:	2201      	movs	r2, #1
 8005926:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800592a:	3e01      	subs	r6, #1
 800592c:	9212      	str	r2, [sp, #72]	@ 0x48
 800592e:	e774      	b.n	800581a <_dtoa_r+0x102>
 8005930:	2301      	movs	r3, #1
 8005932:	e7b5      	b.n	80058a0 <_dtoa_r+0x188>
 8005934:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005936:	e7b4      	b.n	80058a2 <_dtoa_r+0x18a>
 8005938:	9b04      	ldr	r3, [sp, #16]
 800593a:	1bdb      	subs	r3, r3, r7
 800593c:	9304      	str	r3, [sp, #16]
 800593e:	427b      	negs	r3, r7
 8005940:	930a      	str	r3, [sp, #40]	@ 0x28
 8005942:	2300      	movs	r3, #0
 8005944:	930e      	str	r3, [sp, #56]	@ 0x38
 8005946:	e7c1      	b.n	80058cc <_dtoa_r+0x1b4>
 8005948:	2301      	movs	r3, #1
 800594a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800594c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800594e:	eb07 0b03 	add.w	fp, r7, r3
 8005952:	f10b 0301 	add.w	r3, fp, #1
 8005956:	2b01      	cmp	r3, #1
 8005958:	9308      	str	r3, [sp, #32]
 800595a:	bfb8      	it	lt
 800595c:	2301      	movlt	r3, #1
 800595e:	e006      	b.n	800596e <_dtoa_r+0x256>
 8005960:	2301      	movs	r3, #1
 8005962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005964:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005966:	2b00      	cmp	r3, #0
 8005968:	dd28      	ble.n	80059bc <_dtoa_r+0x2a4>
 800596a:	469b      	mov	fp, r3
 800596c:	9308      	str	r3, [sp, #32]
 800596e:	2100      	movs	r1, #0
 8005970:	2204      	movs	r2, #4
 8005972:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005976:	f102 0514 	add.w	r5, r2, #20
 800597a:	429d      	cmp	r5, r3
 800597c:	d926      	bls.n	80059cc <_dtoa_r+0x2b4>
 800597e:	6041      	str	r1, [r0, #4]
 8005980:	4648      	mov	r0, r9
 8005982:	f000 fd9b 	bl	80064bc <_Balloc>
 8005986:	4682      	mov	sl, r0
 8005988:	2800      	cmp	r0, #0
 800598a:	d143      	bne.n	8005a14 <_dtoa_r+0x2fc>
 800598c:	4602      	mov	r2, r0
 800598e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005992:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <_dtoa_r+0x2f8>)
 8005994:	e6d4      	b.n	8005740 <_dtoa_r+0x28>
 8005996:	2300      	movs	r3, #0
 8005998:	e7e3      	b.n	8005962 <_dtoa_r+0x24a>
 800599a:	2300      	movs	r3, #0
 800599c:	e7d5      	b.n	800594a <_dtoa_r+0x232>
 800599e:	2401      	movs	r4, #1
 80059a0:	2300      	movs	r3, #0
 80059a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80059a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80059a6:	f04f 3bff 	mov.w	fp, #4294967295
 80059aa:	2200      	movs	r2, #0
 80059ac:	2312      	movs	r3, #18
 80059ae:	f8cd b020 	str.w	fp, [sp, #32]
 80059b2:	9221      	str	r2, [sp, #132]	@ 0x84
 80059b4:	e7db      	b.n	800596e <_dtoa_r+0x256>
 80059b6:	2301      	movs	r3, #1
 80059b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059ba:	e7f4      	b.n	80059a6 <_dtoa_r+0x28e>
 80059bc:	f04f 0b01 	mov.w	fp, #1
 80059c0:	465b      	mov	r3, fp
 80059c2:	f8cd b020 	str.w	fp, [sp, #32]
 80059c6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80059ca:	e7d0      	b.n	800596e <_dtoa_r+0x256>
 80059cc:	3101      	adds	r1, #1
 80059ce:	0052      	lsls	r2, r2, #1
 80059d0:	e7d1      	b.n	8005976 <_dtoa_r+0x25e>
 80059d2:	bf00      	nop
 80059d4:	f3af 8000 	nop.w
 80059d8:	636f4361 	.word	0x636f4361
 80059dc:	3fd287a7 	.word	0x3fd287a7
 80059e0:	8b60c8b3 	.word	0x8b60c8b3
 80059e4:	3fc68a28 	.word	0x3fc68a28
 80059e8:	509f79fb 	.word	0x509f79fb
 80059ec:	3fd34413 	.word	0x3fd34413
 80059f0:	080094a2 	.word	0x080094a2
 80059f4:	080094b9 	.word	0x080094b9
 80059f8:	7ff00000 	.word	0x7ff00000
 80059fc:	0800949e 	.word	0x0800949e
 8005a00:	080095a5 	.word	0x080095a5
 8005a04:	080095a4 	.word	0x080095a4
 8005a08:	3ff80000 	.word	0x3ff80000
 8005a0c:	08009688 	.word	0x08009688
 8005a10:	08009511 	.word	0x08009511
 8005a14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a18:	6018      	str	r0, [r3, #0]
 8005a1a:	9b08      	ldr	r3, [sp, #32]
 8005a1c:	2b0e      	cmp	r3, #14
 8005a1e:	f200 80a1 	bhi.w	8005b64 <_dtoa_r+0x44c>
 8005a22:	2c00      	cmp	r4, #0
 8005a24:	f000 809e 	beq.w	8005b64 <_dtoa_r+0x44c>
 8005a28:	2f00      	cmp	r7, #0
 8005a2a:	dd33      	ble.n	8005a94 <_dtoa_r+0x37c>
 8005a2c:	4b9c      	ldr	r3, [pc, #624]	@ (8005ca0 <_dtoa_r+0x588>)
 8005a2e:	f007 020f 	and.w	r2, r7, #15
 8005a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a36:	05f8      	lsls	r0, r7, #23
 8005a38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a3c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005a40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a44:	d516      	bpl.n	8005a74 <_dtoa_r+0x35c>
 8005a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a4a:	4b96      	ldr	r3, [pc, #600]	@ (8005ca4 <_dtoa_r+0x58c>)
 8005a4c:	2603      	movs	r6, #3
 8005a4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a52:	f7fa fe6b 	bl	800072c <__aeabi_ddiv>
 8005a56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a5a:	f004 040f 	and.w	r4, r4, #15
 8005a5e:	4d91      	ldr	r5, [pc, #580]	@ (8005ca4 <_dtoa_r+0x58c>)
 8005a60:	b954      	cbnz	r4, 8005a78 <_dtoa_r+0x360>
 8005a62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a6a:	f7fa fe5f 	bl	800072c <__aeabi_ddiv>
 8005a6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a72:	e028      	b.n	8005ac6 <_dtoa_r+0x3ae>
 8005a74:	2602      	movs	r6, #2
 8005a76:	e7f2      	b.n	8005a5e <_dtoa_r+0x346>
 8005a78:	07e1      	lsls	r1, r4, #31
 8005a7a:	d508      	bpl.n	8005a8e <_dtoa_r+0x376>
 8005a7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a84:	f7fa fd28 	bl	80004d8 <__aeabi_dmul>
 8005a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	1064      	asrs	r4, r4, #1
 8005a90:	3508      	adds	r5, #8
 8005a92:	e7e5      	b.n	8005a60 <_dtoa_r+0x348>
 8005a94:	f000 80af 	beq.w	8005bf6 <_dtoa_r+0x4de>
 8005a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a9c:	427c      	negs	r4, r7
 8005a9e:	4b80      	ldr	r3, [pc, #512]	@ (8005ca0 <_dtoa_r+0x588>)
 8005aa0:	f004 020f 	and.w	r2, r4, #15
 8005aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f7fa fd14 	bl	80004d8 <__aeabi_dmul>
 8005ab0:	2602      	movs	r6, #2
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ab8:	4d7a      	ldr	r5, [pc, #488]	@ (8005ca4 <_dtoa_r+0x58c>)
 8005aba:	1124      	asrs	r4, r4, #4
 8005abc:	2c00      	cmp	r4, #0
 8005abe:	f040 808f 	bne.w	8005be0 <_dtoa_r+0x4c8>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1d3      	bne.n	8005a6e <_dtoa_r+0x356>
 8005ac6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8094 	beq.w	8005bfa <_dtoa_r+0x4e2>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	4b73      	ldr	r3, [pc, #460]	@ (8005ca8 <_dtoa_r+0x590>)
 8005ada:	f7fa ff6f 	bl	80009bc <__aeabi_dcmplt>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f000 808b 	beq.w	8005bfa <_dtoa_r+0x4e2>
 8005ae4:	9b08      	ldr	r3, [sp, #32]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8087 	beq.w	8005bfa <_dtoa_r+0x4e2>
 8005aec:	f1bb 0f00 	cmp.w	fp, #0
 8005af0:	dd34      	ble.n	8005b5c <_dtoa_r+0x444>
 8005af2:	4620      	mov	r0, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	4629      	mov	r1, r5
 8005af8:	4b6c      	ldr	r3, [pc, #432]	@ (8005cac <_dtoa_r+0x594>)
 8005afa:	f7fa fced 	bl	80004d8 <__aeabi_dmul>
 8005afe:	465c      	mov	r4, fp
 8005b00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b04:	f107 38ff 	add.w	r8, r7, #4294967295
 8005b08:	3601      	adds	r6, #1
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7fa fc7a 	bl	8000404 <__aeabi_i2d>
 8005b10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b14:	f7fa fce0 	bl	80004d8 <__aeabi_dmul>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4b65      	ldr	r3, [pc, #404]	@ (8005cb0 <_dtoa_r+0x598>)
 8005b1c:	f7fa fb26 	bl	800016c <__adddf3>
 8005b20:	4605      	mov	r5, r0
 8005b22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b26:	2c00      	cmp	r4, #0
 8005b28:	d16a      	bne.n	8005c00 <_dtoa_r+0x4e8>
 8005b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	4b60      	ldr	r3, [pc, #384]	@ (8005cb4 <_dtoa_r+0x59c>)
 8005b32:	f7fa fb19 	bl	8000168 <__aeabi_dsub>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b3e:	462a      	mov	r2, r5
 8005b40:	4633      	mov	r3, r6
 8005b42:	f7fa ff59 	bl	80009f8 <__aeabi_dcmpgt>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f040 8298 	bne.w	800607c <_dtoa_r+0x964>
 8005b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b50:	462a      	mov	r2, r5
 8005b52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b56:	f7fa ff31 	bl	80009bc <__aeabi_dcmplt>
 8005b5a:	bb38      	cbnz	r0, 8005bac <_dtoa_r+0x494>
 8005b5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b60:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005b64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f2c0 8157 	blt.w	8005e1a <_dtoa_r+0x702>
 8005b6c:	2f0e      	cmp	r7, #14
 8005b6e:	f300 8154 	bgt.w	8005e1a <_dtoa_r+0x702>
 8005b72:	4b4b      	ldr	r3, [pc, #300]	@ (8005ca0 <_dtoa_r+0x588>)
 8005b74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b7c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f280 80e5 	bge.w	8005d52 <_dtoa_r+0x63a>
 8005b88:	9b08      	ldr	r3, [sp, #32]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f300 80e1 	bgt.w	8005d52 <_dtoa_r+0x63a>
 8005b90:	d10c      	bne.n	8005bac <_dtoa_r+0x494>
 8005b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b96:	2200      	movs	r2, #0
 8005b98:	4b46      	ldr	r3, [pc, #280]	@ (8005cb4 <_dtoa_r+0x59c>)
 8005b9a:	f7fa fc9d 	bl	80004d8 <__aeabi_dmul>
 8005b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ba2:	f7fa ff1f 	bl	80009e4 <__aeabi_dcmpge>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f000 8266 	beq.w	8006078 <_dtoa_r+0x960>
 8005bac:	2400      	movs	r4, #0
 8005bae:	4625      	mov	r5, r4
 8005bb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bb2:	4656      	mov	r6, sl
 8005bb4:	ea6f 0803 	mvn.w	r8, r3
 8005bb8:	2700      	movs	r7, #0
 8005bba:	4621      	mov	r1, r4
 8005bbc:	4648      	mov	r0, r9
 8005bbe:	f000 fcbd 	bl	800653c <_Bfree>
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	f000 80bd 	beq.w	8005d42 <_dtoa_r+0x62a>
 8005bc8:	b12f      	cbz	r7, 8005bd6 <_dtoa_r+0x4be>
 8005bca:	42af      	cmp	r7, r5
 8005bcc:	d003      	beq.n	8005bd6 <_dtoa_r+0x4be>
 8005bce:	4639      	mov	r1, r7
 8005bd0:	4648      	mov	r0, r9
 8005bd2:	f000 fcb3 	bl	800653c <_Bfree>
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4648      	mov	r0, r9
 8005bda:	f000 fcaf 	bl	800653c <_Bfree>
 8005bde:	e0b0      	b.n	8005d42 <_dtoa_r+0x62a>
 8005be0:	07e2      	lsls	r2, r4, #31
 8005be2:	d505      	bpl.n	8005bf0 <_dtoa_r+0x4d8>
 8005be4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005be8:	f7fa fc76 	bl	80004d8 <__aeabi_dmul>
 8005bec:	2301      	movs	r3, #1
 8005bee:	3601      	adds	r6, #1
 8005bf0:	1064      	asrs	r4, r4, #1
 8005bf2:	3508      	adds	r5, #8
 8005bf4:	e762      	b.n	8005abc <_dtoa_r+0x3a4>
 8005bf6:	2602      	movs	r6, #2
 8005bf8:	e765      	b.n	8005ac6 <_dtoa_r+0x3ae>
 8005bfa:	46b8      	mov	r8, r7
 8005bfc:	9c08      	ldr	r4, [sp, #32]
 8005bfe:	e784      	b.n	8005b0a <_dtoa_r+0x3f2>
 8005c00:	4b27      	ldr	r3, [pc, #156]	@ (8005ca0 <_dtoa_r+0x588>)
 8005c02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c0c:	4454      	add	r4, sl
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	d054      	beq.n	8005cbc <_dtoa_r+0x5a4>
 8005c12:	2000      	movs	r0, #0
 8005c14:	4928      	ldr	r1, [pc, #160]	@ (8005cb8 <_dtoa_r+0x5a0>)
 8005c16:	f7fa fd89 	bl	800072c <__aeabi_ddiv>
 8005c1a:	4633      	mov	r3, r6
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	f7fa faa3 	bl	8000168 <__aeabi_dsub>
 8005c22:	4656      	mov	r6, sl
 8005c24:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c2c:	f7fa ff04 	bl	8000a38 <__aeabi_d2iz>
 8005c30:	4605      	mov	r5, r0
 8005c32:	f7fa fbe7 	bl	8000404 <__aeabi_i2d>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c3e:	f7fa fa93 	bl	8000168 <__aeabi_dsub>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	3530      	adds	r5, #48	@ 0x30
 8005c48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c50:	f806 5b01 	strb.w	r5, [r6], #1
 8005c54:	f7fa feb2 	bl	80009bc <__aeabi_dcmplt>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d172      	bne.n	8005d42 <_dtoa_r+0x62a>
 8005c5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c60:	2000      	movs	r0, #0
 8005c62:	4911      	ldr	r1, [pc, #68]	@ (8005ca8 <_dtoa_r+0x590>)
 8005c64:	f7fa fa80 	bl	8000168 <__aeabi_dsub>
 8005c68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c6c:	f7fa fea6 	bl	80009bc <__aeabi_dcmplt>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f040 80b4 	bne.w	8005dde <_dtoa_r+0x6c6>
 8005c76:	42a6      	cmp	r6, r4
 8005c78:	f43f af70 	beq.w	8005b5c <_dtoa_r+0x444>
 8005c7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c80:	2200      	movs	r2, #0
 8005c82:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <_dtoa_r+0x594>)
 8005c84:	f7fa fc28 	bl	80004d8 <__aeabi_dmul>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <_dtoa_r+0x594>)
 8005c94:	f7fa fc20 	bl	80004d8 <__aeabi_dmul>
 8005c98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c9c:	e7c4      	b.n	8005c28 <_dtoa_r+0x510>
 8005c9e:	bf00      	nop
 8005ca0:	08009688 	.word	0x08009688
 8005ca4:	08009660 	.word	0x08009660
 8005ca8:	3ff00000 	.word	0x3ff00000
 8005cac:	40240000 	.word	0x40240000
 8005cb0:	401c0000 	.word	0x401c0000
 8005cb4:	40140000 	.word	0x40140000
 8005cb8:	3fe00000 	.word	0x3fe00000
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7fa fc0a 	bl	80004d8 <__aeabi_dmul>
 8005cc4:	4656      	mov	r6, sl
 8005cc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cca:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005ccc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cd0:	f7fa feb2 	bl	8000a38 <__aeabi_d2iz>
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	f7fa fb95 	bl	8000404 <__aeabi_i2d>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ce2:	f7fa fa41 	bl	8000168 <__aeabi_dsub>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	3530      	adds	r5, #48	@ 0x30
 8005cec:	f806 5b01 	strb.w	r5, [r6], #1
 8005cf0:	42a6      	cmp	r6, r4
 8005cf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	d124      	bne.n	8005d46 <_dtoa_r+0x62e>
 8005cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d00:	4bae      	ldr	r3, [pc, #696]	@ (8005fbc <_dtoa_r+0x8a4>)
 8005d02:	f7fa fa33 	bl	800016c <__adddf3>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0e:	f7fa fe73 	bl	80009f8 <__aeabi_dcmpgt>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d163      	bne.n	8005dde <_dtoa_r+0x6c6>
 8005d16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	49a7      	ldr	r1, [pc, #668]	@ (8005fbc <_dtoa_r+0x8a4>)
 8005d1e:	f7fa fa23 	bl	8000168 <__aeabi_dsub>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d2a:	f7fa fe47 	bl	80009bc <__aeabi_dcmplt>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f43f af14 	beq.w	8005b5c <_dtoa_r+0x444>
 8005d34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d36:	1e73      	subs	r3, r6, #1
 8005d38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d3e:	2b30      	cmp	r3, #48	@ 0x30
 8005d40:	d0f8      	beq.n	8005d34 <_dtoa_r+0x61c>
 8005d42:	4647      	mov	r7, r8
 8005d44:	e03b      	b.n	8005dbe <_dtoa_r+0x6a6>
 8005d46:	4b9e      	ldr	r3, [pc, #632]	@ (8005fc0 <_dtoa_r+0x8a8>)
 8005d48:	f7fa fbc6 	bl	80004d8 <__aeabi_dmul>
 8005d4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d50:	e7bc      	b.n	8005ccc <_dtoa_r+0x5b4>
 8005d52:	4656      	mov	r6, sl
 8005d54:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fce4 	bl	800072c <__aeabi_ddiv>
 8005d64:	f7fa fe68 	bl	8000a38 <__aeabi_d2iz>
 8005d68:	4680      	mov	r8, r0
 8005d6a:	f7fa fb4b 	bl	8000404 <__aeabi_i2d>
 8005d6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d72:	f7fa fbb1 	bl	80004d8 <__aeabi_dmul>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7fa f9f3 	bl	8000168 <__aeabi_dsub>
 8005d82:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d86:	9d08      	ldr	r5, [sp, #32]
 8005d88:	f806 4b01 	strb.w	r4, [r6], #1
 8005d8c:	eba6 040a 	sub.w	r4, r6, sl
 8005d90:	42a5      	cmp	r5, r4
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	d133      	bne.n	8005e00 <_dtoa_r+0x6e8>
 8005d98:	f7fa f9e8 	bl	800016c <__adddf3>
 8005d9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005da0:	4604      	mov	r4, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	f7fa fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8005da8:	b9c0      	cbnz	r0, 8005ddc <_dtoa_r+0x6c4>
 8005daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fdf9 	bl	80009a8 <__aeabi_dcmpeq>
 8005db6:	b110      	cbz	r0, 8005dbe <_dtoa_r+0x6a6>
 8005db8:	f018 0f01 	tst.w	r8, #1
 8005dbc:	d10e      	bne.n	8005ddc <_dtoa_r+0x6c4>
 8005dbe:	4648      	mov	r0, r9
 8005dc0:	9903      	ldr	r1, [sp, #12]
 8005dc2:	f000 fbbb 	bl	800653c <_Bfree>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	7033      	strb	r3, [r6, #0]
 8005dca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005dcc:	3701      	adds	r7, #1
 8005dce:	601f      	str	r7, [r3, #0]
 8005dd0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 824b 	beq.w	800626e <_dtoa_r+0xb56>
 8005dd8:	601e      	str	r6, [r3, #0]
 8005dda:	e248      	b.n	800626e <_dtoa_r+0xb56>
 8005ddc:	46b8      	mov	r8, r7
 8005dde:	4633      	mov	r3, r6
 8005de0:	461e      	mov	r6, r3
 8005de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005de6:	2a39      	cmp	r2, #57	@ 0x39
 8005de8:	d106      	bne.n	8005df8 <_dtoa_r+0x6e0>
 8005dea:	459a      	cmp	sl, r3
 8005dec:	d1f8      	bne.n	8005de0 <_dtoa_r+0x6c8>
 8005dee:	2230      	movs	r2, #48	@ 0x30
 8005df0:	f108 0801 	add.w	r8, r8, #1
 8005df4:	f88a 2000 	strb.w	r2, [sl]
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	3201      	adds	r2, #1
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	e7a0      	b.n	8005d42 <_dtoa_r+0x62a>
 8005e00:	2200      	movs	r2, #0
 8005e02:	4b6f      	ldr	r3, [pc, #444]	@ (8005fc0 <_dtoa_r+0x8a8>)
 8005e04:	f7fa fb68 	bl	80004d8 <__aeabi_dmul>
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	460d      	mov	r5, r1
 8005e10:	f7fa fdca 	bl	80009a8 <__aeabi_dcmpeq>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d09f      	beq.n	8005d58 <_dtoa_r+0x640>
 8005e18:	e7d1      	b.n	8005dbe <_dtoa_r+0x6a6>
 8005e1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	f000 80ea 	beq.w	8005ff6 <_dtoa_r+0x8de>
 8005e22:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e24:	2a01      	cmp	r2, #1
 8005e26:	f300 80cd 	bgt.w	8005fc4 <_dtoa_r+0x8ac>
 8005e2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	f000 80c1 	beq.w	8005fb4 <_dtoa_r+0x89c>
 8005e32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e38:	9e04      	ldr	r6, [sp, #16]
 8005e3a:	9a04      	ldr	r2, [sp, #16]
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	441a      	add	r2, r3
 8005e40:	9204      	str	r2, [sp, #16]
 8005e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e44:	4648      	mov	r0, r9
 8005e46:	441a      	add	r2, r3
 8005e48:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e4a:	f000 fc75 	bl	8006738 <__i2b>
 8005e4e:	4605      	mov	r5, r0
 8005e50:	b166      	cbz	r6, 8005e6c <_dtoa_r+0x754>
 8005e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dd09      	ble.n	8005e6c <_dtoa_r+0x754>
 8005e58:	42b3      	cmp	r3, r6
 8005e5a:	bfa8      	it	ge
 8005e5c:	4633      	movge	r3, r6
 8005e5e:	9a04      	ldr	r2, [sp, #16]
 8005e60:	1af6      	subs	r6, r6, r3
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	9204      	str	r2, [sp, #16]
 8005e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6e:	b30b      	cbz	r3, 8005eb4 <_dtoa_r+0x79c>
 8005e70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80c6 	beq.w	8006004 <_dtoa_r+0x8ec>
 8005e78:	2c00      	cmp	r4, #0
 8005e7a:	f000 80c0 	beq.w	8005ffe <_dtoa_r+0x8e6>
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4622      	mov	r2, r4
 8005e82:	4648      	mov	r0, r9
 8005e84:	f000 fd10 	bl	80068a8 <__pow5mult>
 8005e88:	9a03      	ldr	r2, [sp, #12]
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	4648      	mov	r0, r9
 8005e90:	f000 fc68 	bl	8006764 <__multiply>
 8005e94:	9903      	ldr	r1, [sp, #12]
 8005e96:	4680      	mov	r8, r0
 8005e98:	4648      	mov	r0, r9
 8005e9a:	f000 fb4f 	bl	800653c <_Bfree>
 8005e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ea0:	1b1b      	subs	r3, r3, r4
 8005ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ea4:	f000 80b1 	beq.w	800600a <_dtoa_r+0x8f2>
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005eac:	4648      	mov	r0, r9
 8005eae:	f000 fcfb 	bl	80068a8 <__pow5mult>
 8005eb2:	9003      	str	r0, [sp, #12]
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	4648      	mov	r0, r9
 8005eb8:	f000 fc3e 	bl	8006738 <__i2b>
 8005ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 81d8 	beq.w	8006276 <_dtoa_r+0xb5e>
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4648      	mov	r0, r9
 8005ecc:	f000 fcec 	bl	80068a8 <__pow5mult>
 8005ed0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	f300 809f 	bgt.w	8006018 <_dtoa_r+0x900>
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8097 	bne.w	8006010 <_dtoa_r+0x8f8>
 8005ee2:	9b07      	ldr	r3, [sp, #28]
 8005ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f040 8093 	bne.w	8006014 <_dtoa_r+0x8fc>
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ef4:	0d1b      	lsrs	r3, r3, #20
 8005ef6:	051b      	lsls	r3, r3, #20
 8005ef8:	b133      	cbz	r3, 8005f08 <_dtoa_r+0x7f0>
 8005efa:	9b04      	ldr	r3, [sp, #16]
 8005efc:	3301      	adds	r3, #1
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f02:	3301      	adds	r3, #1
 8005f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f06:	2301      	movs	r3, #1
 8005f08:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 81b8 	beq.w	8006282 <_dtoa_r+0xb6a>
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f18:	6918      	ldr	r0, [r3, #16]
 8005f1a:	f000 fbc1 	bl	80066a0 <__hi0bits>
 8005f1e:	f1c0 0020 	rsb	r0, r0, #32
 8005f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f24:	4418      	add	r0, r3
 8005f26:	f010 001f 	ands.w	r0, r0, #31
 8005f2a:	f000 8082 	beq.w	8006032 <_dtoa_r+0x91a>
 8005f2e:	f1c0 0320 	rsb	r3, r0, #32
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	dd73      	ble.n	800601e <_dtoa_r+0x906>
 8005f36:	9b04      	ldr	r3, [sp, #16]
 8005f38:	f1c0 001c 	rsb	r0, r0, #28
 8005f3c:	4403      	add	r3, r0
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f42:	4406      	add	r6, r0
 8005f44:	4403      	add	r3, r0
 8005f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f48:	9b04      	ldr	r3, [sp, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dd05      	ble.n	8005f5a <_dtoa_r+0x842>
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4648      	mov	r0, r9
 8005f52:	9903      	ldr	r1, [sp, #12]
 8005f54:	f000 fd02 	bl	800695c <__lshift>
 8005f58:	9003      	str	r0, [sp, #12]
 8005f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dd05      	ble.n	8005f6c <_dtoa_r+0x854>
 8005f60:	4621      	mov	r1, r4
 8005f62:	461a      	mov	r2, r3
 8005f64:	4648      	mov	r0, r9
 8005f66:	f000 fcf9 	bl	800695c <__lshift>
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d061      	beq.n	8006036 <_dtoa_r+0x91e>
 8005f72:	4621      	mov	r1, r4
 8005f74:	9803      	ldr	r0, [sp, #12]
 8005f76:	f000 fd5d 	bl	8006a34 <__mcmp>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	da5b      	bge.n	8006036 <_dtoa_r+0x91e>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	220a      	movs	r2, #10
 8005f82:	4648      	mov	r0, r9
 8005f84:	9903      	ldr	r1, [sp, #12]
 8005f86:	f000 fafb 	bl	8006580 <__multadd>
 8005f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f8c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005f90:	9003      	str	r0, [sp, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8177 	beq.w	8006286 <_dtoa_r+0xb6e>
 8005f98:	4629      	mov	r1, r5
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	220a      	movs	r2, #10
 8005f9e:	4648      	mov	r0, r9
 8005fa0:	f000 faee 	bl	8006580 <__multadd>
 8005fa4:	f1bb 0f00 	cmp.w	fp, #0
 8005fa8:	4605      	mov	r5, r0
 8005faa:	dc6f      	bgt.n	800608c <_dtoa_r+0x974>
 8005fac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	dc49      	bgt.n	8006046 <_dtoa_r+0x92e>
 8005fb2:	e06b      	b.n	800608c <_dtoa_r+0x974>
 8005fb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005fba:	e73c      	b.n	8005e36 <_dtoa_r+0x71e>
 8005fbc:	3fe00000 	.word	0x3fe00000
 8005fc0:	40240000 	.word	0x40240000
 8005fc4:	9b08      	ldr	r3, [sp, #32]
 8005fc6:	1e5c      	subs	r4, r3, #1
 8005fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	db09      	blt.n	8005fe2 <_dtoa_r+0x8ca>
 8005fce:	1b1c      	subs	r4, r3, r4
 8005fd0:	9b08      	ldr	r3, [sp, #32]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f6bf af30 	bge.w	8005e38 <_dtoa_r+0x720>
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	9a08      	ldr	r2, [sp, #32]
 8005fdc:	1a9e      	subs	r6, r3, r2
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e72b      	b.n	8005e3a <_dtoa_r+0x722>
 8005fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fe6:	1ae3      	subs	r3, r4, r3
 8005fe8:	441a      	add	r2, r3
 8005fea:	940a      	str	r4, [sp, #40]	@ 0x28
 8005fec:	9e04      	ldr	r6, [sp, #16]
 8005fee:	2400      	movs	r4, #0
 8005ff0:	9b08      	ldr	r3, [sp, #32]
 8005ff2:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ff4:	e721      	b.n	8005e3a <_dtoa_r+0x722>
 8005ff6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ff8:	9e04      	ldr	r6, [sp, #16]
 8005ffa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ffc:	e728      	b.n	8005e50 <_dtoa_r+0x738>
 8005ffe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006002:	e751      	b.n	8005ea8 <_dtoa_r+0x790>
 8006004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006006:	9903      	ldr	r1, [sp, #12]
 8006008:	e750      	b.n	8005eac <_dtoa_r+0x794>
 800600a:	f8cd 800c 	str.w	r8, [sp, #12]
 800600e:	e751      	b.n	8005eb4 <_dtoa_r+0x79c>
 8006010:	2300      	movs	r3, #0
 8006012:	e779      	b.n	8005f08 <_dtoa_r+0x7f0>
 8006014:	9b06      	ldr	r3, [sp, #24]
 8006016:	e777      	b.n	8005f08 <_dtoa_r+0x7f0>
 8006018:	2300      	movs	r3, #0
 800601a:	930a      	str	r3, [sp, #40]	@ 0x28
 800601c:	e779      	b.n	8005f12 <_dtoa_r+0x7fa>
 800601e:	d093      	beq.n	8005f48 <_dtoa_r+0x830>
 8006020:	9a04      	ldr	r2, [sp, #16]
 8006022:	331c      	adds	r3, #28
 8006024:	441a      	add	r2, r3
 8006026:	9204      	str	r2, [sp, #16]
 8006028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800602a:	441e      	add	r6, r3
 800602c:	441a      	add	r2, r3
 800602e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006030:	e78a      	b.n	8005f48 <_dtoa_r+0x830>
 8006032:	4603      	mov	r3, r0
 8006034:	e7f4      	b.n	8006020 <_dtoa_r+0x908>
 8006036:	9b08      	ldr	r3, [sp, #32]
 8006038:	46b8      	mov	r8, r7
 800603a:	2b00      	cmp	r3, #0
 800603c:	dc20      	bgt.n	8006080 <_dtoa_r+0x968>
 800603e:	469b      	mov	fp, r3
 8006040:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006042:	2b02      	cmp	r3, #2
 8006044:	dd1e      	ble.n	8006084 <_dtoa_r+0x96c>
 8006046:	f1bb 0f00 	cmp.w	fp, #0
 800604a:	f47f adb1 	bne.w	8005bb0 <_dtoa_r+0x498>
 800604e:	4621      	mov	r1, r4
 8006050:	465b      	mov	r3, fp
 8006052:	2205      	movs	r2, #5
 8006054:	4648      	mov	r0, r9
 8006056:	f000 fa93 	bl	8006580 <__multadd>
 800605a:	4601      	mov	r1, r0
 800605c:	4604      	mov	r4, r0
 800605e:	9803      	ldr	r0, [sp, #12]
 8006060:	f000 fce8 	bl	8006a34 <__mcmp>
 8006064:	2800      	cmp	r0, #0
 8006066:	f77f ada3 	ble.w	8005bb0 <_dtoa_r+0x498>
 800606a:	4656      	mov	r6, sl
 800606c:	2331      	movs	r3, #49	@ 0x31
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	f806 3b01 	strb.w	r3, [r6], #1
 8006076:	e59f      	b.n	8005bb8 <_dtoa_r+0x4a0>
 8006078:	46b8      	mov	r8, r7
 800607a:	9c08      	ldr	r4, [sp, #32]
 800607c:	4625      	mov	r5, r4
 800607e:	e7f4      	b.n	800606a <_dtoa_r+0x952>
 8006080:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8101 	beq.w	800628e <_dtoa_r+0xb76>
 800608c:	2e00      	cmp	r6, #0
 800608e:	dd05      	ble.n	800609c <_dtoa_r+0x984>
 8006090:	4629      	mov	r1, r5
 8006092:	4632      	mov	r2, r6
 8006094:	4648      	mov	r0, r9
 8006096:	f000 fc61 	bl	800695c <__lshift>
 800609a:	4605      	mov	r5, r0
 800609c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d05c      	beq.n	800615c <_dtoa_r+0xa44>
 80060a2:	4648      	mov	r0, r9
 80060a4:	6869      	ldr	r1, [r5, #4]
 80060a6:	f000 fa09 	bl	80064bc <_Balloc>
 80060aa:	4606      	mov	r6, r0
 80060ac:	b928      	cbnz	r0, 80060ba <_dtoa_r+0x9a2>
 80060ae:	4602      	mov	r2, r0
 80060b0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060b4:	4b80      	ldr	r3, [pc, #512]	@ (80062b8 <_dtoa_r+0xba0>)
 80060b6:	f7ff bb43 	b.w	8005740 <_dtoa_r+0x28>
 80060ba:	692a      	ldr	r2, [r5, #16]
 80060bc:	f105 010c 	add.w	r1, r5, #12
 80060c0:	3202      	adds	r2, #2
 80060c2:	0092      	lsls	r2, r2, #2
 80060c4:	300c      	adds	r0, #12
 80060c6:	f7ff fa8a 	bl	80055de <memcpy>
 80060ca:	2201      	movs	r2, #1
 80060cc:	4631      	mov	r1, r6
 80060ce:	4648      	mov	r0, r9
 80060d0:	f000 fc44 	bl	800695c <__lshift>
 80060d4:	462f      	mov	r7, r5
 80060d6:	4605      	mov	r5, r0
 80060d8:	f10a 0301 	add.w	r3, sl, #1
 80060dc:	9304      	str	r3, [sp, #16]
 80060de:	eb0a 030b 	add.w	r3, sl, fp
 80060e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060e4:	9b06      	ldr	r3, [sp, #24]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	4621      	mov	r1, r4
 80060f0:	9803      	ldr	r0, [sp, #12]
 80060f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80060f6:	f7ff fa85 	bl	8005604 <quorem>
 80060fa:	4603      	mov	r3, r0
 80060fc:	4639      	mov	r1, r7
 80060fe:	3330      	adds	r3, #48	@ 0x30
 8006100:	9006      	str	r0, [sp, #24]
 8006102:	9803      	ldr	r0, [sp, #12]
 8006104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006106:	f000 fc95 	bl	8006a34 <__mcmp>
 800610a:	462a      	mov	r2, r5
 800610c:	9008      	str	r0, [sp, #32]
 800610e:	4621      	mov	r1, r4
 8006110:	4648      	mov	r0, r9
 8006112:	f000 fcab 	bl	8006a6c <__mdiff>
 8006116:	68c2      	ldr	r2, [r0, #12]
 8006118:	4606      	mov	r6, r0
 800611a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800611c:	bb02      	cbnz	r2, 8006160 <_dtoa_r+0xa48>
 800611e:	4601      	mov	r1, r0
 8006120:	9803      	ldr	r0, [sp, #12]
 8006122:	f000 fc87 	bl	8006a34 <__mcmp>
 8006126:	4602      	mov	r2, r0
 8006128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800612a:	4631      	mov	r1, r6
 800612c:	4648      	mov	r0, r9
 800612e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006132:	f000 fa03 	bl	800653c <_Bfree>
 8006136:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006138:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800613a:	9e04      	ldr	r6, [sp, #16]
 800613c:	ea42 0103 	orr.w	r1, r2, r3
 8006140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006142:	4319      	orrs	r1, r3
 8006144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006146:	d10d      	bne.n	8006164 <_dtoa_r+0xa4c>
 8006148:	2b39      	cmp	r3, #57	@ 0x39
 800614a:	d027      	beq.n	800619c <_dtoa_r+0xa84>
 800614c:	9a08      	ldr	r2, [sp, #32]
 800614e:	2a00      	cmp	r2, #0
 8006150:	dd01      	ble.n	8006156 <_dtoa_r+0xa3e>
 8006152:	9b06      	ldr	r3, [sp, #24]
 8006154:	3331      	adds	r3, #49	@ 0x31
 8006156:	f88b 3000 	strb.w	r3, [fp]
 800615a:	e52e      	b.n	8005bba <_dtoa_r+0x4a2>
 800615c:	4628      	mov	r0, r5
 800615e:	e7b9      	b.n	80060d4 <_dtoa_r+0x9bc>
 8006160:	2201      	movs	r2, #1
 8006162:	e7e2      	b.n	800612a <_dtoa_r+0xa12>
 8006164:	9908      	ldr	r1, [sp, #32]
 8006166:	2900      	cmp	r1, #0
 8006168:	db04      	blt.n	8006174 <_dtoa_r+0xa5c>
 800616a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800616c:	4301      	orrs	r1, r0
 800616e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006170:	4301      	orrs	r1, r0
 8006172:	d120      	bne.n	80061b6 <_dtoa_r+0xa9e>
 8006174:	2a00      	cmp	r2, #0
 8006176:	ddee      	ble.n	8006156 <_dtoa_r+0xa3e>
 8006178:	2201      	movs	r2, #1
 800617a:	9903      	ldr	r1, [sp, #12]
 800617c:	4648      	mov	r0, r9
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	f000 fbec 	bl	800695c <__lshift>
 8006184:	4621      	mov	r1, r4
 8006186:	9003      	str	r0, [sp, #12]
 8006188:	f000 fc54 	bl	8006a34 <__mcmp>
 800618c:	2800      	cmp	r0, #0
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	dc02      	bgt.n	8006198 <_dtoa_r+0xa80>
 8006192:	d1e0      	bne.n	8006156 <_dtoa_r+0xa3e>
 8006194:	07da      	lsls	r2, r3, #31
 8006196:	d5de      	bpl.n	8006156 <_dtoa_r+0xa3e>
 8006198:	2b39      	cmp	r3, #57	@ 0x39
 800619a:	d1da      	bne.n	8006152 <_dtoa_r+0xa3a>
 800619c:	2339      	movs	r3, #57	@ 0x39
 800619e:	f88b 3000 	strb.w	r3, [fp]
 80061a2:	4633      	mov	r3, r6
 80061a4:	461e      	mov	r6, r3
 80061a6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	2a39      	cmp	r2, #57	@ 0x39
 80061ae:	d04e      	beq.n	800624e <_dtoa_r+0xb36>
 80061b0:	3201      	adds	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	e501      	b.n	8005bba <_dtoa_r+0x4a2>
 80061b6:	2a00      	cmp	r2, #0
 80061b8:	dd03      	ble.n	80061c2 <_dtoa_r+0xaaa>
 80061ba:	2b39      	cmp	r3, #57	@ 0x39
 80061bc:	d0ee      	beq.n	800619c <_dtoa_r+0xa84>
 80061be:	3301      	adds	r3, #1
 80061c0:	e7c9      	b.n	8006156 <_dtoa_r+0xa3e>
 80061c2:	9a04      	ldr	r2, [sp, #16]
 80061c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061ca:	428a      	cmp	r2, r1
 80061cc:	d028      	beq.n	8006220 <_dtoa_r+0xb08>
 80061ce:	2300      	movs	r3, #0
 80061d0:	220a      	movs	r2, #10
 80061d2:	9903      	ldr	r1, [sp, #12]
 80061d4:	4648      	mov	r0, r9
 80061d6:	f000 f9d3 	bl	8006580 <__multadd>
 80061da:	42af      	cmp	r7, r5
 80061dc:	9003      	str	r0, [sp, #12]
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	f04f 020a 	mov.w	r2, #10
 80061e6:	4639      	mov	r1, r7
 80061e8:	4648      	mov	r0, r9
 80061ea:	d107      	bne.n	80061fc <_dtoa_r+0xae4>
 80061ec:	f000 f9c8 	bl	8006580 <__multadd>
 80061f0:	4607      	mov	r7, r0
 80061f2:	4605      	mov	r5, r0
 80061f4:	9b04      	ldr	r3, [sp, #16]
 80061f6:	3301      	adds	r3, #1
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	e777      	b.n	80060ec <_dtoa_r+0x9d4>
 80061fc:	f000 f9c0 	bl	8006580 <__multadd>
 8006200:	4629      	mov	r1, r5
 8006202:	4607      	mov	r7, r0
 8006204:	2300      	movs	r3, #0
 8006206:	220a      	movs	r2, #10
 8006208:	4648      	mov	r0, r9
 800620a:	f000 f9b9 	bl	8006580 <__multadd>
 800620e:	4605      	mov	r5, r0
 8006210:	e7f0      	b.n	80061f4 <_dtoa_r+0xadc>
 8006212:	f1bb 0f00 	cmp.w	fp, #0
 8006216:	bfcc      	ite	gt
 8006218:	465e      	movgt	r6, fp
 800621a:	2601      	movle	r6, #1
 800621c:	2700      	movs	r7, #0
 800621e:	4456      	add	r6, sl
 8006220:	2201      	movs	r2, #1
 8006222:	9903      	ldr	r1, [sp, #12]
 8006224:	4648      	mov	r0, r9
 8006226:	9304      	str	r3, [sp, #16]
 8006228:	f000 fb98 	bl	800695c <__lshift>
 800622c:	4621      	mov	r1, r4
 800622e:	9003      	str	r0, [sp, #12]
 8006230:	f000 fc00 	bl	8006a34 <__mcmp>
 8006234:	2800      	cmp	r0, #0
 8006236:	dcb4      	bgt.n	80061a2 <_dtoa_r+0xa8a>
 8006238:	d102      	bne.n	8006240 <_dtoa_r+0xb28>
 800623a:	9b04      	ldr	r3, [sp, #16]
 800623c:	07db      	lsls	r3, r3, #31
 800623e:	d4b0      	bmi.n	80061a2 <_dtoa_r+0xa8a>
 8006240:	4633      	mov	r3, r6
 8006242:	461e      	mov	r6, r3
 8006244:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006248:	2a30      	cmp	r2, #48	@ 0x30
 800624a:	d0fa      	beq.n	8006242 <_dtoa_r+0xb2a>
 800624c:	e4b5      	b.n	8005bba <_dtoa_r+0x4a2>
 800624e:	459a      	cmp	sl, r3
 8006250:	d1a8      	bne.n	80061a4 <_dtoa_r+0xa8c>
 8006252:	2331      	movs	r3, #49	@ 0x31
 8006254:	f108 0801 	add.w	r8, r8, #1
 8006258:	f88a 3000 	strb.w	r3, [sl]
 800625c:	e4ad      	b.n	8005bba <_dtoa_r+0x4a2>
 800625e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006260:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80062bc <_dtoa_r+0xba4>
 8006264:	b11b      	cbz	r3, 800626e <_dtoa_r+0xb56>
 8006266:	f10a 0308 	add.w	r3, sl, #8
 800626a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4650      	mov	r0, sl
 8006270:	b017      	add	sp, #92	@ 0x5c
 8006272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006276:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006278:	2b01      	cmp	r3, #1
 800627a:	f77f ae2e 	ble.w	8005eda <_dtoa_r+0x7c2>
 800627e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006280:	930a      	str	r3, [sp, #40]	@ 0x28
 8006282:	2001      	movs	r0, #1
 8006284:	e64d      	b.n	8005f22 <_dtoa_r+0x80a>
 8006286:	f1bb 0f00 	cmp.w	fp, #0
 800628a:	f77f aed9 	ble.w	8006040 <_dtoa_r+0x928>
 800628e:	4656      	mov	r6, sl
 8006290:	4621      	mov	r1, r4
 8006292:	9803      	ldr	r0, [sp, #12]
 8006294:	f7ff f9b6 	bl	8005604 <quorem>
 8006298:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800629c:	f806 3b01 	strb.w	r3, [r6], #1
 80062a0:	eba6 020a 	sub.w	r2, r6, sl
 80062a4:	4593      	cmp	fp, r2
 80062a6:	ddb4      	ble.n	8006212 <_dtoa_r+0xafa>
 80062a8:	2300      	movs	r3, #0
 80062aa:	220a      	movs	r2, #10
 80062ac:	4648      	mov	r0, r9
 80062ae:	9903      	ldr	r1, [sp, #12]
 80062b0:	f000 f966 	bl	8006580 <__multadd>
 80062b4:	9003      	str	r0, [sp, #12]
 80062b6:	e7eb      	b.n	8006290 <_dtoa_r+0xb78>
 80062b8:	08009511 	.word	0x08009511
 80062bc:	08009495 	.word	0x08009495

080062c0 <_free_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4605      	mov	r5, r0
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d040      	beq.n	800634a <_free_r+0x8a>
 80062c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062cc:	1f0c      	subs	r4, r1, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bfb8      	it	lt
 80062d2:	18e4      	addlt	r4, r4, r3
 80062d4:	f000 f8e6 	bl	80064a4 <__malloc_lock>
 80062d8:	4a1c      	ldr	r2, [pc, #112]	@ (800634c <_free_r+0x8c>)
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	b933      	cbnz	r3, 80062ec <_free_r+0x2c>
 80062de:	6063      	str	r3, [r4, #4]
 80062e0:	6014      	str	r4, [r2, #0]
 80062e2:	4628      	mov	r0, r5
 80062e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062e8:	f000 b8e2 	b.w	80064b0 <__malloc_unlock>
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	d908      	bls.n	8006302 <_free_r+0x42>
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	1821      	adds	r1, r4, r0
 80062f4:	428b      	cmp	r3, r1
 80062f6:	bf01      	itttt	eq
 80062f8:	6819      	ldreq	r1, [r3, #0]
 80062fa:	685b      	ldreq	r3, [r3, #4]
 80062fc:	1809      	addeq	r1, r1, r0
 80062fe:	6021      	streq	r1, [r4, #0]
 8006300:	e7ed      	b.n	80062de <_free_r+0x1e>
 8006302:	461a      	mov	r2, r3
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	b10b      	cbz	r3, 800630c <_free_r+0x4c>
 8006308:	42a3      	cmp	r3, r4
 800630a:	d9fa      	bls.n	8006302 <_free_r+0x42>
 800630c:	6811      	ldr	r1, [r2, #0]
 800630e:	1850      	adds	r0, r2, r1
 8006310:	42a0      	cmp	r0, r4
 8006312:	d10b      	bne.n	800632c <_free_r+0x6c>
 8006314:	6820      	ldr	r0, [r4, #0]
 8006316:	4401      	add	r1, r0
 8006318:	1850      	adds	r0, r2, r1
 800631a:	4283      	cmp	r3, r0
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	d1e0      	bne.n	80062e2 <_free_r+0x22>
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4408      	add	r0, r1
 8006326:	6010      	str	r0, [r2, #0]
 8006328:	6053      	str	r3, [r2, #4]
 800632a:	e7da      	b.n	80062e2 <_free_r+0x22>
 800632c:	d902      	bls.n	8006334 <_free_r+0x74>
 800632e:	230c      	movs	r3, #12
 8006330:	602b      	str	r3, [r5, #0]
 8006332:	e7d6      	b.n	80062e2 <_free_r+0x22>
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	1821      	adds	r1, r4, r0
 8006338:	428b      	cmp	r3, r1
 800633a:	bf01      	itttt	eq
 800633c:	6819      	ldreq	r1, [r3, #0]
 800633e:	685b      	ldreq	r3, [r3, #4]
 8006340:	1809      	addeq	r1, r1, r0
 8006342:	6021      	streq	r1, [r4, #0]
 8006344:	6063      	str	r3, [r4, #4]
 8006346:	6054      	str	r4, [r2, #4]
 8006348:	e7cb      	b.n	80062e2 <_free_r+0x22>
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	20000450 	.word	0x20000450

08006350 <malloc>:
 8006350:	4b02      	ldr	r3, [pc, #8]	@ (800635c <malloc+0xc>)
 8006352:	4601      	mov	r1, r0
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f000 b825 	b.w	80063a4 <_malloc_r>
 800635a:	bf00      	nop
 800635c:	20000018 	.word	0x20000018

08006360 <sbrk_aligned>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4e0f      	ldr	r6, [pc, #60]	@ (80063a0 <sbrk_aligned+0x40>)
 8006364:	460c      	mov	r4, r1
 8006366:	6831      	ldr	r1, [r6, #0]
 8006368:	4605      	mov	r5, r0
 800636a:	b911      	cbnz	r1, 8006372 <sbrk_aligned+0x12>
 800636c:	f002 fb3c 	bl	80089e8 <_sbrk_r>
 8006370:	6030      	str	r0, [r6, #0]
 8006372:	4621      	mov	r1, r4
 8006374:	4628      	mov	r0, r5
 8006376:	f002 fb37 	bl	80089e8 <_sbrk_r>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d103      	bne.n	8006386 <sbrk_aligned+0x26>
 800637e:	f04f 34ff 	mov.w	r4, #4294967295
 8006382:	4620      	mov	r0, r4
 8006384:	bd70      	pop	{r4, r5, r6, pc}
 8006386:	1cc4      	adds	r4, r0, #3
 8006388:	f024 0403 	bic.w	r4, r4, #3
 800638c:	42a0      	cmp	r0, r4
 800638e:	d0f8      	beq.n	8006382 <sbrk_aligned+0x22>
 8006390:	1a21      	subs	r1, r4, r0
 8006392:	4628      	mov	r0, r5
 8006394:	f002 fb28 	bl	80089e8 <_sbrk_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d1f2      	bne.n	8006382 <sbrk_aligned+0x22>
 800639c:	e7ef      	b.n	800637e <sbrk_aligned+0x1e>
 800639e:	bf00      	nop
 80063a0:	2000044c 	.word	0x2000044c

080063a4 <_malloc_r>:
 80063a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a8:	1ccd      	adds	r5, r1, #3
 80063aa:	f025 0503 	bic.w	r5, r5, #3
 80063ae:	3508      	adds	r5, #8
 80063b0:	2d0c      	cmp	r5, #12
 80063b2:	bf38      	it	cc
 80063b4:	250c      	movcc	r5, #12
 80063b6:	2d00      	cmp	r5, #0
 80063b8:	4606      	mov	r6, r0
 80063ba:	db01      	blt.n	80063c0 <_malloc_r+0x1c>
 80063bc:	42a9      	cmp	r1, r5
 80063be:	d904      	bls.n	80063ca <_malloc_r+0x26>
 80063c0:	230c      	movs	r3, #12
 80063c2:	6033      	str	r3, [r6, #0]
 80063c4:	2000      	movs	r0, #0
 80063c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064a0 <_malloc_r+0xfc>
 80063ce:	f000 f869 	bl	80064a4 <__malloc_lock>
 80063d2:	f8d8 3000 	ldr.w	r3, [r8]
 80063d6:	461c      	mov	r4, r3
 80063d8:	bb44      	cbnz	r4, 800642c <_malloc_r+0x88>
 80063da:	4629      	mov	r1, r5
 80063dc:	4630      	mov	r0, r6
 80063de:	f7ff ffbf 	bl	8006360 <sbrk_aligned>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	4604      	mov	r4, r0
 80063e6:	d158      	bne.n	800649a <_malloc_r+0xf6>
 80063e8:	f8d8 4000 	ldr.w	r4, [r8]
 80063ec:	4627      	mov	r7, r4
 80063ee:	2f00      	cmp	r7, #0
 80063f0:	d143      	bne.n	800647a <_malloc_r+0xd6>
 80063f2:	2c00      	cmp	r4, #0
 80063f4:	d04b      	beq.n	800648e <_malloc_r+0xea>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	4639      	mov	r1, r7
 80063fa:	4630      	mov	r0, r6
 80063fc:	eb04 0903 	add.w	r9, r4, r3
 8006400:	f002 faf2 	bl	80089e8 <_sbrk_r>
 8006404:	4581      	cmp	r9, r0
 8006406:	d142      	bne.n	800648e <_malloc_r+0xea>
 8006408:	6821      	ldr	r1, [r4, #0]
 800640a:	4630      	mov	r0, r6
 800640c:	1a6d      	subs	r5, r5, r1
 800640e:	4629      	mov	r1, r5
 8006410:	f7ff ffa6 	bl	8006360 <sbrk_aligned>
 8006414:	3001      	adds	r0, #1
 8006416:	d03a      	beq.n	800648e <_malloc_r+0xea>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	442b      	add	r3, r5
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	f8d8 3000 	ldr.w	r3, [r8]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	bb62      	cbnz	r2, 8006480 <_malloc_r+0xdc>
 8006426:	f8c8 7000 	str.w	r7, [r8]
 800642a:	e00f      	b.n	800644c <_malloc_r+0xa8>
 800642c:	6822      	ldr	r2, [r4, #0]
 800642e:	1b52      	subs	r2, r2, r5
 8006430:	d420      	bmi.n	8006474 <_malloc_r+0xd0>
 8006432:	2a0b      	cmp	r2, #11
 8006434:	d917      	bls.n	8006466 <_malloc_r+0xc2>
 8006436:	1961      	adds	r1, r4, r5
 8006438:	42a3      	cmp	r3, r4
 800643a:	6025      	str	r5, [r4, #0]
 800643c:	bf18      	it	ne
 800643e:	6059      	strne	r1, [r3, #4]
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	bf08      	it	eq
 8006444:	f8c8 1000 	streq.w	r1, [r8]
 8006448:	5162      	str	r2, [r4, r5]
 800644a:	604b      	str	r3, [r1, #4]
 800644c:	4630      	mov	r0, r6
 800644e:	f000 f82f 	bl	80064b0 <__malloc_unlock>
 8006452:	f104 000b 	add.w	r0, r4, #11
 8006456:	1d23      	adds	r3, r4, #4
 8006458:	f020 0007 	bic.w	r0, r0, #7
 800645c:	1ac2      	subs	r2, r0, r3
 800645e:	bf1c      	itt	ne
 8006460:	1a1b      	subne	r3, r3, r0
 8006462:	50a3      	strne	r3, [r4, r2]
 8006464:	e7af      	b.n	80063c6 <_malloc_r+0x22>
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	42a3      	cmp	r3, r4
 800646a:	bf0c      	ite	eq
 800646c:	f8c8 2000 	streq.w	r2, [r8]
 8006470:	605a      	strne	r2, [r3, #4]
 8006472:	e7eb      	b.n	800644c <_malloc_r+0xa8>
 8006474:	4623      	mov	r3, r4
 8006476:	6864      	ldr	r4, [r4, #4]
 8006478:	e7ae      	b.n	80063d8 <_malloc_r+0x34>
 800647a:	463c      	mov	r4, r7
 800647c:	687f      	ldr	r7, [r7, #4]
 800647e:	e7b6      	b.n	80063ee <_malloc_r+0x4a>
 8006480:	461a      	mov	r2, r3
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	42a3      	cmp	r3, r4
 8006486:	d1fb      	bne.n	8006480 <_malloc_r+0xdc>
 8006488:	2300      	movs	r3, #0
 800648a:	6053      	str	r3, [r2, #4]
 800648c:	e7de      	b.n	800644c <_malloc_r+0xa8>
 800648e:	230c      	movs	r3, #12
 8006490:	4630      	mov	r0, r6
 8006492:	6033      	str	r3, [r6, #0]
 8006494:	f000 f80c 	bl	80064b0 <__malloc_unlock>
 8006498:	e794      	b.n	80063c4 <_malloc_r+0x20>
 800649a:	6005      	str	r5, [r0, #0]
 800649c:	e7d6      	b.n	800644c <_malloc_r+0xa8>
 800649e:	bf00      	nop
 80064a0:	20000450 	.word	0x20000450

080064a4 <__malloc_lock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	@ (80064ac <__malloc_lock+0x8>)
 80064a6:	f7ff b88a 	b.w	80055be <__retarget_lock_acquire_recursive>
 80064aa:	bf00      	nop
 80064ac:	20000448 	.word	0x20000448

080064b0 <__malloc_unlock>:
 80064b0:	4801      	ldr	r0, [pc, #4]	@ (80064b8 <__malloc_unlock+0x8>)
 80064b2:	f7ff b885 	b.w	80055c0 <__retarget_lock_release_recursive>
 80064b6:	bf00      	nop
 80064b8:	20000448 	.word	0x20000448

080064bc <_Balloc>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	69c6      	ldr	r6, [r0, #28]
 80064c0:	4604      	mov	r4, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	b976      	cbnz	r6, 80064e4 <_Balloc+0x28>
 80064c6:	2010      	movs	r0, #16
 80064c8:	f7ff ff42 	bl	8006350 <malloc>
 80064cc:	4602      	mov	r2, r0
 80064ce:	61e0      	str	r0, [r4, #28]
 80064d0:	b920      	cbnz	r0, 80064dc <_Balloc+0x20>
 80064d2:	216b      	movs	r1, #107	@ 0x6b
 80064d4:	4b17      	ldr	r3, [pc, #92]	@ (8006534 <_Balloc+0x78>)
 80064d6:	4818      	ldr	r0, [pc, #96]	@ (8006538 <_Balloc+0x7c>)
 80064d8:	f002 fa9c 	bl	8008a14 <__assert_func>
 80064dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064e0:	6006      	str	r6, [r0, #0]
 80064e2:	60c6      	str	r6, [r0, #12]
 80064e4:	69e6      	ldr	r6, [r4, #28]
 80064e6:	68f3      	ldr	r3, [r6, #12]
 80064e8:	b183      	cbz	r3, 800650c <_Balloc+0x50>
 80064ea:	69e3      	ldr	r3, [r4, #28]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064f2:	b9b8      	cbnz	r0, 8006524 <_Balloc+0x68>
 80064f4:	2101      	movs	r1, #1
 80064f6:	fa01 f605 	lsl.w	r6, r1, r5
 80064fa:	1d72      	adds	r2, r6, #5
 80064fc:	4620      	mov	r0, r4
 80064fe:	0092      	lsls	r2, r2, #2
 8006500:	f002 faa6 	bl	8008a50 <_calloc_r>
 8006504:	b160      	cbz	r0, 8006520 <_Balloc+0x64>
 8006506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800650a:	e00e      	b.n	800652a <_Balloc+0x6e>
 800650c:	2221      	movs	r2, #33	@ 0x21
 800650e:	2104      	movs	r1, #4
 8006510:	4620      	mov	r0, r4
 8006512:	f002 fa9d 	bl	8008a50 <_calloc_r>
 8006516:	69e3      	ldr	r3, [r4, #28]
 8006518:	60f0      	str	r0, [r6, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e4      	bne.n	80064ea <_Balloc+0x2e>
 8006520:	2000      	movs	r0, #0
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	6802      	ldr	r2, [r0, #0]
 8006526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800652a:	2300      	movs	r3, #0
 800652c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006530:	e7f7      	b.n	8006522 <_Balloc+0x66>
 8006532:	bf00      	nop
 8006534:	080094a2 	.word	0x080094a2
 8006538:	08009522 	.word	0x08009522

0800653c <_Bfree>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	69c6      	ldr	r6, [r0, #28]
 8006540:	4605      	mov	r5, r0
 8006542:	460c      	mov	r4, r1
 8006544:	b976      	cbnz	r6, 8006564 <_Bfree+0x28>
 8006546:	2010      	movs	r0, #16
 8006548:	f7ff ff02 	bl	8006350 <malloc>
 800654c:	4602      	mov	r2, r0
 800654e:	61e8      	str	r0, [r5, #28]
 8006550:	b920      	cbnz	r0, 800655c <_Bfree+0x20>
 8006552:	218f      	movs	r1, #143	@ 0x8f
 8006554:	4b08      	ldr	r3, [pc, #32]	@ (8006578 <_Bfree+0x3c>)
 8006556:	4809      	ldr	r0, [pc, #36]	@ (800657c <_Bfree+0x40>)
 8006558:	f002 fa5c 	bl	8008a14 <__assert_func>
 800655c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006560:	6006      	str	r6, [r0, #0]
 8006562:	60c6      	str	r6, [r0, #12]
 8006564:	b13c      	cbz	r4, 8006576 <_Bfree+0x3a>
 8006566:	69eb      	ldr	r3, [r5, #28]
 8006568:	6862      	ldr	r2, [r4, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006570:	6021      	str	r1, [r4, #0]
 8006572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	080094a2 	.word	0x080094a2
 800657c:	08009522 	.word	0x08009522

08006580 <__multadd>:
 8006580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006584:	4607      	mov	r7, r0
 8006586:	460c      	mov	r4, r1
 8006588:	461e      	mov	r6, r3
 800658a:	2000      	movs	r0, #0
 800658c:	690d      	ldr	r5, [r1, #16]
 800658e:	f101 0c14 	add.w	ip, r1, #20
 8006592:	f8dc 3000 	ldr.w	r3, [ip]
 8006596:	3001      	adds	r0, #1
 8006598:	b299      	uxth	r1, r3
 800659a:	fb02 6101 	mla	r1, r2, r1, r6
 800659e:	0c1e      	lsrs	r6, r3, #16
 80065a0:	0c0b      	lsrs	r3, r1, #16
 80065a2:	fb02 3306 	mla	r3, r2, r6, r3
 80065a6:	b289      	uxth	r1, r1
 80065a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065ac:	4285      	cmp	r5, r0
 80065ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065b2:	f84c 1b04 	str.w	r1, [ip], #4
 80065b6:	dcec      	bgt.n	8006592 <__multadd+0x12>
 80065b8:	b30e      	cbz	r6, 80065fe <__multadd+0x7e>
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	42ab      	cmp	r3, r5
 80065be:	dc19      	bgt.n	80065f4 <__multadd+0x74>
 80065c0:	6861      	ldr	r1, [r4, #4]
 80065c2:	4638      	mov	r0, r7
 80065c4:	3101      	adds	r1, #1
 80065c6:	f7ff ff79 	bl	80064bc <_Balloc>
 80065ca:	4680      	mov	r8, r0
 80065cc:	b928      	cbnz	r0, 80065da <__multadd+0x5a>
 80065ce:	4602      	mov	r2, r0
 80065d0:	21ba      	movs	r1, #186	@ 0xba
 80065d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006604 <__multadd+0x84>)
 80065d4:	480c      	ldr	r0, [pc, #48]	@ (8006608 <__multadd+0x88>)
 80065d6:	f002 fa1d 	bl	8008a14 <__assert_func>
 80065da:	6922      	ldr	r2, [r4, #16]
 80065dc:	f104 010c 	add.w	r1, r4, #12
 80065e0:	3202      	adds	r2, #2
 80065e2:	0092      	lsls	r2, r2, #2
 80065e4:	300c      	adds	r0, #12
 80065e6:	f7fe fffa 	bl	80055de <memcpy>
 80065ea:	4621      	mov	r1, r4
 80065ec:	4638      	mov	r0, r7
 80065ee:	f7ff ffa5 	bl	800653c <_Bfree>
 80065f2:	4644      	mov	r4, r8
 80065f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065f8:	3501      	adds	r5, #1
 80065fa:	615e      	str	r6, [r3, #20]
 80065fc:	6125      	str	r5, [r4, #16]
 80065fe:	4620      	mov	r0, r4
 8006600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006604:	08009511 	.word	0x08009511
 8006608:	08009522 	.word	0x08009522

0800660c <__s2b>:
 800660c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006610:	4615      	mov	r5, r2
 8006612:	2209      	movs	r2, #9
 8006614:	461f      	mov	r7, r3
 8006616:	3308      	adds	r3, #8
 8006618:	460c      	mov	r4, r1
 800661a:	fb93 f3f2 	sdiv	r3, r3, r2
 800661e:	4606      	mov	r6, r0
 8006620:	2201      	movs	r2, #1
 8006622:	2100      	movs	r1, #0
 8006624:	429a      	cmp	r2, r3
 8006626:	db09      	blt.n	800663c <__s2b+0x30>
 8006628:	4630      	mov	r0, r6
 800662a:	f7ff ff47 	bl	80064bc <_Balloc>
 800662e:	b940      	cbnz	r0, 8006642 <__s2b+0x36>
 8006630:	4602      	mov	r2, r0
 8006632:	21d3      	movs	r1, #211	@ 0xd3
 8006634:	4b18      	ldr	r3, [pc, #96]	@ (8006698 <__s2b+0x8c>)
 8006636:	4819      	ldr	r0, [pc, #100]	@ (800669c <__s2b+0x90>)
 8006638:	f002 f9ec 	bl	8008a14 <__assert_func>
 800663c:	0052      	lsls	r2, r2, #1
 800663e:	3101      	adds	r1, #1
 8006640:	e7f0      	b.n	8006624 <__s2b+0x18>
 8006642:	9b08      	ldr	r3, [sp, #32]
 8006644:	2d09      	cmp	r5, #9
 8006646:	6143      	str	r3, [r0, #20]
 8006648:	f04f 0301 	mov.w	r3, #1
 800664c:	6103      	str	r3, [r0, #16]
 800664e:	dd16      	ble.n	800667e <__s2b+0x72>
 8006650:	f104 0909 	add.w	r9, r4, #9
 8006654:	46c8      	mov	r8, r9
 8006656:	442c      	add	r4, r5
 8006658:	f818 3b01 	ldrb.w	r3, [r8], #1
 800665c:	4601      	mov	r1, r0
 800665e:	220a      	movs	r2, #10
 8006660:	4630      	mov	r0, r6
 8006662:	3b30      	subs	r3, #48	@ 0x30
 8006664:	f7ff ff8c 	bl	8006580 <__multadd>
 8006668:	45a0      	cmp	r8, r4
 800666a:	d1f5      	bne.n	8006658 <__s2b+0x4c>
 800666c:	f1a5 0408 	sub.w	r4, r5, #8
 8006670:	444c      	add	r4, r9
 8006672:	1b2d      	subs	r5, r5, r4
 8006674:	1963      	adds	r3, r4, r5
 8006676:	42bb      	cmp	r3, r7
 8006678:	db04      	blt.n	8006684 <__s2b+0x78>
 800667a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800667e:	2509      	movs	r5, #9
 8006680:	340a      	adds	r4, #10
 8006682:	e7f6      	b.n	8006672 <__s2b+0x66>
 8006684:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006688:	4601      	mov	r1, r0
 800668a:	220a      	movs	r2, #10
 800668c:	4630      	mov	r0, r6
 800668e:	3b30      	subs	r3, #48	@ 0x30
 8006690:	f7ff ff76 	bl	8006580 <__multadd>
 8006694:	e7ee      	b.n	8006674 <__s2b+0x68>
 8006696:	bf00      	nop
 8006698:	08009511 	.word	0x08009511
 800669c:	08009522 	.word	0x08009522

080066a0 <__hi0bits>:
 80066a0:	4603      	mov	r3, r0
 80066a2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066a6:	bf3a      	itte	cc
 80066a8:	0403      	lslcc	r3, r0, #16
 80066aa:	2010      	movcc	r0, #16
 80066ac:	2000      	movcs	r0, #0
 80066ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066b2:	bf3c      	itt	cc
 80066b4:	021b      	lslcc	r3, r3, #8
 80066b6:	3008      	addcc	r0, #8
 80066b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066bc:	bf3c      	itt	cc
 80066be:	011b      	lslcc	r3, r3, #4
 80066c0:	3004      	addcc	r0, #4
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c6:	bf3c      	itt	cc
 80066c8:	009b      	lslcc	r3, r3, #2
 80066ca:	3002      	addcc	r0, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	db05      	blt.n	80066dc <__hi0bits+0x3c>
 80066d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066d4:	f100 0001 	add.w	r0, r0, #1
 80066d8:	bf08      	it	eq
 80066da:	2020      	moveq	r0, #32
 80066dc:	4770      	bx	lr

080066de <__lo0bits>:
 80066de:	6803      	ldr	r3, [r0, #0]
 80066e0:	4602      	mov	r2, r0
 80066e2:	f013 0007 	ands.w	r0, r3, #7
 80066e6:	d00b      	beq.n	8006700 <__lo0bits+0x22>
 80066e8:	07d9      	lsls	r1, r3, #31
 80066ea:	d421      	bmi.n	8006730 <__lo0bits+0x52>
 80066ec:	0798      	lsls	r0, r3, #30
 80066ee:	bf49      	itett	mi
 80066f0:	085b      	lsrmi	r3, r3, #1
 80066f2:	089b      	lsrpl	r3, r3, #2
 80066f4:	2001      	movmi	r0, #1
 80066f6:	6013      	strmi	r3, [r2, #0]
 80066f8:	bf5c      	itt	pl
 80066fa:	2002      	movpl	r0, #2
 80066fc:	6013      	strpl	r3, [r2, #0]
 80066fe:	4770      	bx	lr
 8006700:	b299      	uxth	r1, r3
 8006702:	b909      	cbnz	r1, 8006708 <__lo0bits+0x2a>
 8006704:	2010      	movs	r0, #16
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	b2d9      	uxtb	r1, r3
 800670a:	b909      	cbnz	r1, 8006710 <__lo0bits+0x32>
 800670c:	3008      	adds	r0, #8
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	0719      	lsls	r1, r3, #28
 8006712:	bf04      	itt	eq
 8006714:	091b      	lsreq	r3, r3, #4
 8006716:	3004      	addeq	r0, #4
 8006718:	0799      	lsls	r1, r3, #30
 800671a:	bf04      	itt	eq
 800671c:	089b      	lsreq	r3, r3, #2
 800671e:	3002      	addeq	r0, #2
 8006720:	07d9      	lsls	r1, r3, #31
 8006722:	d403      	bmi.n	800672c <__lo0bits+0x4e>
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	f100 0001 	add.w	r0, r0, #1
 800672a:	d003      	beq.n	8006734 <__lo0bits+0x56>
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	4770      	bx	lr
 8006730:	2000      	movs	r0, #0
 8006732:	4770      	bx	lr
 8006734:	2020      	movs	r0, #32
 8006736:	4770      	bx	lr

08006738 <__i2b>:
 8006738:	b510      	push	{r4, lr}
 800673a:	460c      	mov	r4, r1
 800673c:	2101      	movs	r1, #1
 800673e:	f7ff febd 	bl	80064bc <_Balloc>
 8006742:	4602      	mov	r2, r0
 8006744:	b928      	cbnz	r0, 8006752 <__i2b+0x1a>
 8006746:	f240 1145 	movw	r1, #325	@ 0x145
 800674a:	4b04      	ldr	r3, [pc, #16]	@ (800675c <__i2b+0x24>)
 800674c:	4804      	ldr	r0, [pc, #16]	@ (8006760 <__i2b+0x28>)
 800674e:	f002 f961 	bl	8008a14 <__assert_func>
 8006752:	2301      	movs	r3, #1
 8006754:	6144      	str	r4, [r0, #20]
 8006756:	6103      	str	r3, [r0, #16]
 8006758:	bd10      	pop	{r4, pc}
 800675a:	bf00      	nop
 800675c:	08009511 	.word	0x08009511
 8006760:	08009522 	.word	0x08009522

08006764 <__multiply>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	4617      	mov	r7, r2
 800676a:	690a      	ldr	r2, [r1, #16]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4689      	mov	r9, r1
 8006770:	429a      	cmp	r2, r3
 8006772:	bfa2      	ittt	ge
 8006774:	463b      	movge	r3, r7
 8006776:	460f      	movge	r7, r1
 8006778:	4699      	movge	r9, r3
 800677a:	693d      	ldr	r5, [r7, #16]
 800677c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	eb05 060a 	add.w	r6, r5, sl
 8006788:	42b3      	cmp	r3, r6
 800678a:	b085      	sub	sp, #20
 800678c:	bfb8      	it	lt
 800678e:	3101      	addlt	r1, #1
 8006790:	f7ff fe94 	bl	80064bc <_Balloc>
 8006794:	b930      	cbnz	r0, 80067a4 <__multiply+0x40>
 8006796:	4602      	mov	r2, r0
 8006798:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800679c:	4b40      	ldr	r3, [pc, #256]	@ (80068a0 <__multiply+0x13c>)
 800679e:	4841      	ldr	r0, [pc, #260]	@ (80068a4 <__multiply+0x140>)
 80067a0:	f002 f938 	bl	8008a14 <__assert_func>
 80067a4:	f100 0414 	add.w	r4, r0, #20
 80067a8:	4623      	mov	r3, r4
 80067aa:	2200      	movs	r2, #0
 80067ac:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80067b0:	4573      	cmp	r3, lr
 80067b2:	d320      	bcc.n	80067f6 <__multiply+0x92>
 80067b4:	f107 0814 	add.w	r8, r7, #20
 80067b8:	f109 0114 	add.w	r1, r9, #20
 80067bc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80067c0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80067c4:	9302      	str	r3, [sp, #8]
 80067c6:	1beb      	subs	r3, r5, r7
 80067c8:	3b15      	subs	r3, #21
 80067ca:	f023 0303 	bic.w	r3, r3, #3
 80067ce:	3304      	adds	r3, #4
 80067d0:	3715      	adds	r7, #21
 80067d2:	42bd      	cmp	r5, r7
 80067d4:	bf38      	it	cc
 80067d6:	2304      	movcc	r3, #4
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	9b02      	ldr	r3, [sp, #8]
 80067dc:	9103      	str	r1, [sp, #12]
 80067de:	428b      	cmp	r3, r1
 80067e0:	d80c      	bhi.n	80067fc <__multiply+0x98>
 80067e2:	2e00      	cmp	r6, #0
 80067e4:	dd03      	ble.n	80067ee <__multiply+0x8a>
 80067e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d055      	beq.n	800689a <__multiply+0x136>
 80067ee:	6106      	str	r6, [r0, #16]
 80067f0:	b005      	add	sp, #20
 80067f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f6:	f843 2b04 	str.w	r2, [r3], #4
 80067fa:	e7d9      	b.n	80067b0 <__multiply+0x4c>
 80067fc:	f8b1 a000 	ldrh.w	sl, [r1]
 8006800:	f1ba 0f00 	cmp.w	sl, #0
 8006804:	d01f      	beq.n	8006846 <__multiply+0xe2>
 8006806:	46c4      	mov	ip, r8
 8006808:	46a1      	mov	r9, r4
 800680a:	2700      	movs	r7, #0
 800680c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006810:	f8d9 3000 	ldr.w	r3, [r9]
 8006814:	fa1f fb82 	uxth.w	fp, r2
 8006818:	b29b      	uxth	r3, r3
 800681a:	fb0a 330b 	mla	r3, sl, fp, r3
 800681e:	443b      	add	r3, r7
 8006820:	f8d9 7000 	ldr.w	r7, [r9]
 8006824:	0c12      	lsrs	r2, r2, #16
 8006826:	0c3f      	lsrs	r7, r7, #16
 8006828:	fb0a 7202 	mla	r2, sl, r2, r7
 800682c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006830:	b29b      	uxth	r3, r3
 8006832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006836:	4565      	cmp	r5, ip
 8006838:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800683c:	f849 3b04 	str.w	r3, [r9], #4
 8006840:	d8e4      	bhi.n	800680c <__multiply+0xa8>
 8006842:	9b01      	ldr	r3, [sp, #4]
 8006844:	50e7      	str	r7, [r4, r3]
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	3104      	adds	r1, #4
 800684a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	d020      	beq.n	8006896 <__multiply+0x132>
 8006854:	4647      	mov	r7, r8
 8006856:	46a4      	mov	ip, r4
 8006858:	f04f 0a00 	mov.w	sl, #0
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	f8b7 b000 	ldrh.w	fp, [r7]
 8006862:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006866:	b29b      	uxth	r3, r3
 8006868:	fb09 220b 	mla	r2, r9, fp, r2
 800686c:	4452      	add	r2, sl
 800686e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006872:	f84c 3b04 	str.w	r3, [ip], #4
 8006876:	f857 3b04 	ldr.w	r3, [r7], #4
 800687a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800687e:	f8bc 3000 	ldrh.w	r3, [ip]
 8006882:	42bd      	cmp	r5, r7
 8006884:	fb09 330a 	mla	r3, r9, sl, r3
 8006888:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800688c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006890:	d8e5      	bhi.n	800685e <__multiply+0xfa>
 8006892:	9a01      	ldr	r2, [sp, #4]
 8006894:	50a3      	str	r3, [r4, r2]
 8006896:	3404      	adds	r4, #4
 8006898:	e79f      	b.n	80067da <__multiply+0x76>
 800689a:	3e01      	subs	r6, #1
 800689c:	e7a1      	b.n	80067e2 <__multiply+0x7e>
 800689e:	bf00      	nop
 80068a0:	08009511 	.word	0x08009511
 80068a4:	08009522 	.word	0x08009522

080068a8 <__pow5mult>:
 80068a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	4615      	mov	r5, r2
 80068ae:	f012 0203 	ands.w	r2, r2, #3
 80068b2:	4607      	mov	r7, r0
 80068b4:	460e      	mov	r6, r1
 80068b6:	d007      	beq.n	80068c8 <__pow5mult+0x20>
 80068b8:	4c25      	ldr	r4, [pc, #148]	@ (8006950 <__pow5mult+0xa8>)
 80068ba:	3a01      	subs	r2, #1
 80068bc:	2300      	movs	r3, #0
 80068be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068c2:	f7ff fe5d 	bl	8006580 <__multadd>
 80068c6:	4606      	mov	r6, r0
 80068c8:	10ad      	asrs	r5, r5, #2
 80068ca:	d03d      	beq.n	8006948 <__pow5mult+0xa0>
 80068cc:	69fc      	ldr	r4, [r7, #28]
 80068ce:	b97c      	cbnz	r4, 80068f0 <__pow5mult+0x48>
 80068d0:	2010      	movs	r0, #16
 80068d2:	f7ff fd3d 	bl	8006350 <malloc>
 80068d6:	4602      	mov	r2, r0
 80068d8:	61f8      	str	r0, [r7, #28]
 80068da:	b928      	cbnz	r0, 80068e8 <__pow5mult+0x40>
 80068dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006954 <__pow5mult+0xac>)
 80068e2:	481d      	ldr	r0, [pc, #116]	@ (8006958 <__pow5mult+0xb0>)
 80068e4:	f002 f896 	bl	8008a14 <__assert_func>
 80068e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068ec:	6004      	str	r4, [r0, #0]
 80068ee:	60c4      	str	r4, [r0, #12]
 80068f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068f8:	b94c      	cbnz	r4, 800690e <__pow5mult+0x66>
 80068fa:	f240 2171 	movw	r1, #625	@ 0x271
 80068fe:	4638      	mov	r0, r7
 8006900:	f7ff ff1a 	bl	8006738 <__i2b>
 8006904:	2300      	movs	r3, #0
 8006906:	4604      	mov	r4, r0
 8006908:	f8c8 0008 	str.w	r0, [r8, #8]
 800690c:	6003      	str	r3, [r0, #0]
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	07eb      	lsls	r3, r5, #31
 8006914:	d50a      	bpl.n	800692c <__pow5mult+0x84>
 8006916:	4631      	mov	r1, r6
 8006918:	4622      	mov	r2, r4
 800691a:	4638      	mov	r0, r7
 800691c:	f7ff ff22 	bl	8006764 <__multiply>
 8006920:	4680      	mov	r8, r0
 8006922:	4631      	mov	r1, r6
 8006924:	4638      	mov	r0, r7
 8006926:	f7ff fe09 	bl	800653c <_Bfree>
 800692a:	4646      	mov	r6, r8
 800692c:	106d      	asrs	r5, r5, #1
 800692e:	d00b      	beq.n	8006948 <__pow5mult+0xa0>
 8006930:	6820      	ldr	r0, [r4, #0]
 8006932:	b938      	cbnz	r0, 8006944 <__pow5mult+0x9c>
 8006934:	4622      	mov	r2, r4
 8006936:	4621      	mov	r1, r4
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff ff13 	bl	8006764 <__multiply>
 800693e:	6020      	str	r0, [r4, #0]
 8006940:	f8c0 9000 	str.w	r9, [r0]
 8006944:	4604      	mov	r4, r0
 8006946:	e7e4      	b.n	8006912 <__pow5mult+0x6a>
 8006948:	4630      	mov	r0, r6
 800694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694e:	bf00      	nop
 8006950:	08009650 	.word	0x08009650
 8006954:	080094a2 	.word	0x080094a2
 8006958:	08009522 	.word	0x08009522

0800695c <__lshift>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	460c      	mov	r4, r1
 8006962:	4607      	mov	r7, r0
 8006964:	4691      	mov	r9, r2
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6849      	ldr	r1, [r1, #4]
 800696a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006974:	f108 0601 	add.w	r6, r8, #1
 8006978:	42b3      	cmp	r3, r6
 800697a:	db0b      	blt.n	8006994 <__lshift+0x38>
 800697c:	4638      	mov	r0, r7
 800697e:	f7ff fd9d 	bl	80064bc <_Balloc>
 8006982:	4605      	mov	r5, r0
 8006984:	b948      	cbnz	r0, 800699a <__lshift+0x3e>
 8006986:	4602      	mov	r2, r0
 8006988:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800698c:	4b27      	ldr	r3, [pc, #156]	@ (8006a2c <__lshift+0xd0>)
 800698e:	4828      	ldr	r0, [pc, #160]	@ (8006a30 <__lshift+0xd4>)
 8006990:	f002 f840 	bl	8008a14 <__assert_func>
 8006994:	3101      	adds	r1, #1
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	e7ee      	b.n	8006978 <__lshift+0x1c>
 800699a:	2300      	movs	r3, #0
 800699c:	f100 0114 	add.w	r1, r0, #20
 80069a0:	f100 0210 	add.w	r2, r0, #16
 80069a4:	4618      	mov	r0, r3
 80069a6:	4553      	cmp	r3, sl
 80069a8:	db33      	blt.n	8006a12 <__lshift+0xb6>
 80069aa:	6920      	ldr	r0, [r4, #16]
 80069ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069b0:	f104 0314 	add.w	r3, r4, #20
 80069b4:	f019 091f 	ands.w	r9, r9, #31
 80069b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069c0:	d02b      	beq.n	8006a1a <__lshift+0xbe>
 80069c2:	468a      	mov	sl, r1
 80069c4:	2200      	movs	r2, #0
 80069c6:	f1c9 0e20 	rsb	lr, r9, #32
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	fa00 f009 	lsl.w	r0, r0, r9
 80069d0:	4310      	orrs	r0, r2
 80069d2:	f84a 0b04 	str.w	r0, [sl], #4
 80069d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069da:	459c      	cmp	ip, r3
 80069dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80069e0:	d8f3      	bhi.n	80069ca <__lshift+0x6e>
 80069e2:	ebac 0304 	sub.w	r3, ip, r4
 80069e6:	3b15      	subs	r3, #21
 80069e8:	f023 0303 	bic.w	r3, r3, #3
 80069ec:	3304      	adds	r3, #4
 80069ee:	f104 0015 	add.w	r0, r4, #21
 80069f2:	4560      	cmp	r0, ip
 80069f4:	bf88      	it	hi
 80069f6:	2304      	movhi	r3, #4
 80069f8:	50ca      	str	r2, [r1, r3]
 80069fa:	b10a      	cbz	r2, 8006a00 <__lshift+0xa4>
 80069fc:	f108 0602 	add.w	r6, r8, #2
 8006a00:	3e01      	subs	r6, #1
 8006a02:	4638      	mov	r0, r7
 8006a04:	4621      	mov	r1, r4
 8006a06:	612e      	str	r6, [r5, #16]
 8006a08:	f7ff fd98 	bl	800653c <_Bfree>
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a12:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a16:	3301      	adds	r3, #1
 8006a18:	e7c5      	b.n	80069a6 <__lshift+0x4a>
 8006a1a:	3904      	subs	r1, #4
 8006a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a20:	459c      	cmp	ip, r3
 8006a22:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a26:	d8f9      	bhi.n	8006a1c <__lshift+0xc0>
 8006a28:	e7ea      	b.n	8006a00 <__lshift+0xa4>
 8006a2a:	bf00      	nop
 8006a2c:	08009511 	.word	0x08009511
 8006a30:	08009522 	.word	0x08009522

08006a34 <__mcmp>:
 8006a34:	4603      	mov	r3, r0
 8006a36:	690a      	ldr	r2, [r1, #16]
 8006a38:	6900      	ldr	r0, [r0, #16]
 8006a3a:	b530      	push	{r4, r5, lr}
 8006a3c:	1a80      	subs	r0, r0, r2
 8006a3e:	d10e      	bne.n	8006a5e <__mcmp+0x2a>
 8006a40:	3314      	adds	r3, #20
 8006a42:	3114      	adds	r1, #20
 8006a44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a54:	4295      	cmp	r5, r2
 8006a56:	d003      	beq.n	8006a60 <__mcmp+0x2c>
 8006a58:	d205      	bcs.n	8006a66 <__mcmp+0x32>
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5e:	bd30      	pop	{r4, r5, pc}
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d3f3      	bcc.n	8006a4c <__mcmp+0x18>
 8006a64:	e7fb      	b.n	8006a5e <__mcmp+0x2a>
 8006a66:	2001      	movs	r0, #1
 8006a68:	e7f9      	b.n	8006a5e <__mcmp+0x2a>
	...

08006a6c <__mdiff>:
 8006a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	4689      	mov	r9, r1
 8006a72:	4606      	mov	r6, r0
 8006a74:	4611      	mov	r1, r2
 8006a76:	4648      	mov	r0, r9
 8006a78:	4614      	mov	r4, r2
 8006a7a:	f7ff ffdb 	bl	8006a34 <__mcmp>
 8006a7e:	1e05      	subs	r5, r0, #0
 8006a80:	d112      	bne.n	8006aa8 <__mdiff+0x3c>
 8006a82:	4629      	mov	r1, r5
 8006a84:	4630      	mov	r0, r6
 8006a86:	f7ff fd19 	bl	80064bc <_Balloc>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	b928      	cbnz	r0, 8006a9a <__mdiff+0x2e>
 8006a8e:	f240 2137 	movw	r1, #567	@ 0x237
 8006a92:	4b3e      	ldr	r3, [pc, #248]	@ (8006b8c <__mdiff+0x120>)
 8006a94:	483e      	ldr	r0, [pc, #248]	@ (8006b90 <__mdiff+0x124>)
 8006a96:	f001 ffbd 	bl	8008a14 <__assert_func>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	b003      	add	sp, #12
 8006aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa8:	bfbc      	itt	lt
 8006aaa:	464b      	movlt	r3, r9
 8006aac:	46a1      	movlt	r9, r4
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ab4:	bfba      	itte	lt
 8006ab6:	461c      	movlt	r4, r3
 8006ab8:	2501      	movlt	r5, #1
 8006aba:	2500      	movge	r5, #0
 8006abc:	f7ff fcfe 	bl	80064bc <_Balloc>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	b918      	cbnz	r0, 8006acc <__mdiff+0x60>
 8006ac4:	f240 2145 	movw	r1, #581	@ 0x245
 8006ac8:	4b30      	ldr	r3, [pc, #192]	@ (8006b8c <__mdiff+0x120>)
 8006aca:	e7e3      	b.n	8006a94 <__mdiff+0x28>
 8006acc:	f100 0b14 	add.w	fp, r0, #20
 8006ad0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ad4:	f109 0310 	add.w	r3, r9, #16
 8006ad8:	60c5      	str	r5, [r0, #12]
 8006ada:	f04f 0c00 	mov.w	ip, #0
 8006ade:	f109 0514 	add.w	r5, r9, #20
 8006ae2:	46d9      	mov	r9, fp
 8006ae4:	6926      	ldr	r6, [r4, #16]
 8006ae6:	f104 0e14 	add.w	lr, r4, #20
 8006aea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006aee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006afa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006afe:	b281      	uxth	r1, r0
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	fa1f f38a 	uxth.w	r3, sl
 8006b06:	1a5b      	subs	r3, r3, r1
 8006b08:	0c00      	lsrs	r0, r0, #16
 8006b0a:	4463      	add	r3, ip
 8006b0c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b10:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b1a:	4576      	cmp	r6, lr
 8006b1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b20:	f849 3b04 	str.w	r3, [r9], #4
 8006b24:	d8e6      	bhi.n	8006af4 <__mdiff+0x88>
 8006b26:	1b33      	subs	r3, r6, r4
 8006b28:	3b15      	subs	r3, #21
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	3415      	adds	r4, #21
 8006b30:	3304      	adds	r3, #4
 8006b32:	42a6      	cmp	r6, r4
 8006b34:	bf38      	it	cc
 8006b36:	2304      	movcc	r3, #4
 8006b38:	441d      	add	r5, r3
 8006b3a:	445b      	add	r3, fp
 8006b3c:	461e      	mov	r6, r3
 8006b3e:	462c      	mov	r4, r5
 8006b40:	4544      	cmp	r4, r8
 8006b42:	d30e      	bcc.n	8006b62 <__mdiff+0xf6>
 8006b44:	f108 0103 	add.w	r1, r8, #3
 8006b48:	1b49      	subs	r1, r1, r5
 8006b4a:	f021 0103 	bic.w	r1, r1, #3
 8006b4e:	3d03      	subs	r5, #3
 8006b50:	45a8      	cmp	r8, r5
 8006b52:	bf38      	it	cc
 8006b54:	2100      	movcc	r1, #0
 8006b56:	440b      	add	r3, r1
 8006b58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b5c:	b199      	cbz	r1, 8006b86 <__mdiff+0x11a>
 8006b5e:	6117      	str	r7, [r2, #16]
 8006b60:	e79e      	b.n	8006aa0 <__mdiff+0x34>
 8006b62:	46e6      	mov	lr, ip
 8006b64:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b68:	fa1f fc81 	uxth.w	ip, r1
 8006b6c:	44f4      	add	ip, lr
 8006b6e:	0c08      	lsrs	r0, r1, #16
 8006b70:	4471      	add	r1, lr
 8006b72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b76:	b289      	uxth	r1, r1
 8006b78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b80:	f846 1b04 	str.w	r1, [r6], #4
 8006b84:	e7dc      	b.n	8006b40 <__mdiff+0xd4>
 8006b86:	3f01      	subs	r7, #1
 8006b88:	e7e6      	b.n	8006b58 <__mdiff+0xec>
 8006b8a:	bf00      	nop
 8006b8c:	08009511 	.word	0x08009511
 8006b90:	08009522 	.word	0x08009522

08006b94 <__ulp>:
 8006b94:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd0 <__ulp+0x3c>)
 8006b96:	400b      	ands	r3, r1
 8006b98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dc08      	bgt.n	8006bb2 <__ulp+0x1e>
 8006ba0:	425b      	negs	r3, r3
 8006ba2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006ba6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006baa:	da04      	bge.n	8006bb6 <__ulp+0x22>
 8006bac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006bb0:	4113      	asrs	r3, r2
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	e008      	b.n	8006bc8 <__ulp+0x34>
 8006bb6:	f1a2 0314 	sub.w	r3, r2, #20
 8006bba:	2b1e      	cmp	r3, #30
 8006bbc:	bfd6      	itet	le
 8006bbe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006bc2:	2201      	movgt	r2, #1
 8006bc4:	40da      	lsrle	r2, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	7ff00000 	.word	0x7ff00000

08006bd4 <__b2d>:
 8006bd4:	6902      	ldr	r2, [r0, #16]
 8006bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd8:	f100 0614 	add.w	r6, r0, #20
 8006bdc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006be0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006be4:	4f1e      	ldr	r7, [pc, #120]	@ (8006c60 <__b2d+0x8c>)
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff fd5a 	bl	80066a0 <__hi0bits>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f1c0 0020 	rsb	r0, r0, #32
 8006bf2:	2b0a      	cmp	r3, #10
 8006bf4:	f1a2 0504 	sub.w	r5, r2, #4
 8006bf8:	6008      	str	r0, [r1, #0]
 8006bfa:	dc12      	bgt.n	8006c22 <__b2d+0x4e>
 8006bfc:	42ae      	cmp	r6, r5
 8006bfe:	bf2c      	ite	cs
 8006c00:	2200      	movcs	r2, #0
 8006c02:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006c06:	f1c3 0c0b 	rsb	ip, r3, #11
 8006c0a:	3315      	adds	r3, #21
 8006c0c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006c10:	fa04 f303 	lsl.w	r3, r4, r3
 8006c14:	fa22 f20c 	lsr.w	r2, r2, ip
 8006c18:	ea4e 0107 	orr.w	r1, lr, r7
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c22:	42ae      	cmp	r6, r5
 8006c24:	bf36      	itet	cc
 8006c26:	f1a2 0508 	subcc.w	r5, r2, #8
 8006c2a:	2200      	movcs	r2, #0
 8006c2c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006c30:	3b0b      	subs	r3, #11
 8006c32:	d012      	beq.n	8006c5a <__b2d+0x86>
 8006c34:	f1c3 0720 	rsb	r7, r3, #32
 8006c38:	fa22 f107 	lsr.w	r1, r2, r7
 8006c3c:	409c      	lsls	r4, r3
 8006c3e:	430c      	orrs	r4, r1
 8006c40:	42b5      	cmp	r5, r6
 8006c42:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006c46:	bf94      	ite	ls
 8006c48:	2400      	movls	r4, #0
 8006c4a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	40fc      	lsrs	r4, r7
 8006c52:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006c56:	4322      	orrs	r2, r4
 8006c58:	e7e1      	b.n	8006c1e <__b2d+0x4a>
 8006c5a:	ea44 0107 	orr.w	r1, r4, r7
 8006c5e:	e7de      	b.n	8006c1e <__b2d+0x4a>
 8006c60:	3ff00000 	.word	0x3ff00000

08006c64 <__d2b>:
 8006c64:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4690      	mov	r8, r2
 8006c6c:	4699      	mov	r9, r3
 8006c6e:	9e08      	ldr	r6, [sp, #32]
 8006c70:	f7ff fc24 	bl	80064bc <_Balloc>
 8006c74:	4604      	mov	r4, r0
 8006c76:	b930      	cbnz	r0, 8006c86 <__d2b+0x22>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c7e:	4b23      	ldr	r3, [pc, #140]	@ (8006d0c <__d2b+0xa8>)
 8006c80:	4823      	ldr	r0, [pc, #140]	@ (8006d10 <__d2b+0xac>)
 8006c82:	f001 fec7 	bl	8008a14 <__assert_func>
 8006c86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c8e:	b10d      	cbz	r5, 8006c94 <__d2b+0x30>
 8006c90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	f1b8 0300 	subs.w	r3, r8, #0
 8006c9a:	d024      	beq.n	8006ce6 <__d2b+0x82>
 8006c9c:	4668      	mov	r0, sp
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f7ff fd1d 	bl	80066de <__lo0bits>
 8006ca4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ca8:	b1d8      	cbz	r0, 8006ce2 <__d2b+0x7e>
 8006caa:	f1c0 0320 	rsb	r3, r0, #32
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	40c2      	lsrs	r2, r0
 8006cb6:	6163      	str	r3, [r4, #20]
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bf0c      	ite	eq
 8006cc0:	2201      	moveq	r2, #1
 8006cc2:	2202      	movne	r2, #2
 8006cc4:	61a3      	str	r3, [r4, #24]
 8006cc6:	6122      	str	r2, [r4, #16]
 8006cc8:	b1ad      	cbz	r5, 8006cf6 <__d2b+0x92>
 8006cca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006cce:	4405      	add	r5, r0
 8006cd0:	6035      	str	r5, [r6, #0]
 8006cd2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd8:	6018      	str	r0, [r3, #0]
 8006cda:	4620      	mov	r0, r4
 8006cdc:	b002      	add	sp, #8
 8006cde:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006ce2:	6161      	str	r1, [r4, #20]
 8006ce4:	e7e9      	b.n	8006cba <__d2b+0x56>
 8006ce6:	a801      	add	r0, sp, #4
 8006ce8:	f7ff fcf9 	bl	80066de <__lo0bits>
 8006cec:	9b01      	ldr	r3, [sp, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	6163      	str	r3, [r4, #20]
 8006cf2:	3020      	adds	r0, #32
 8006cf4:	e7e7      	b.n	8006cc6 <__d2b+0x62>
 8006cf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006cfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cfe:	6030      	str	r0, [r6, #0]
 8006d00:	6918      	ldr	r0, [r3, #16]
 8006d02:	f7ff fccd 	bl	80066a0 <__hi0bits>
 8006d06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d0a:	e7e4      	b.n	8006cd6 <__d2b+0x72>
 8006d0c:	08009511 	.word	0x08009511
 8006d10:	08009522 	.word	0x08009522

08006d14 <__ratio>:
 8006d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	e9cd 1000 	strd	r1, r0, [sp]
 8006d1e:	a902      	add	r1, sp, #8
 8006d20:	f7ff ff58 	bl	8006bd4 <__b2d>
 8006d24:	468b      	mov	fp, r1
 8006d26:	4606      	mov	r6, r0
 8006d28:	460f      	mov	r7, r1
 8006d2a:	9800      	ldr	r0, [sp, #0]
 8006d2c:	a903      	add	r1, sp, #12
 8006d2e:	f7ff ff51 	bl	8006bd4 <__b2d>
 8006d32:	460d      	mov	r5, r1
 8006d34:	9b01      	ldr	r3, [sp, #4]
 8006d36:	4689      	mov	r9, r1
 8006d38:	6919      	ldr	r1, [r3, #16]
 8006d3a:	9b00      	ldr	r3, [sp, #0]
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	4630      	mov	r0, r6
 8006d42:	1ac9      	subs	r1, r1, r3
 8006d44:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfcd      	iteet	gt
 8006d52:	463a      	movgt	r2, r7
 8006d54:	462a      	movle	r2, r5
 8006d56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d5a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006d5e:	bfd8      	it	le
 8006d60:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006d64:	464b      	mov	r3, r9
 8006d66:	4622      	mov	r2, r4
 8006d68:	4659      	mov	r1, fp
 8006d6a:	f7f9 fcdf 	bl	800072c <__aeabi_ddiv>
 8006d6e:	b005      	add	sp, #20
 8006d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d74 <__copybits>:
 8006d74:	3901      	subs	r1, #1
 8006d76:	b570      	push	{r4, r5, r6, lr}
 8006d78:	1149      	asrs	r1, r1, #5
 8006d7a:	6914      	ldr	r4, [r2, #16]
 8006d7c:	3101      	adds	r1, #1
 8006d7e:	f102 0314 	add.w	r3, r2, #20
 8006d82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d8a:	1f05      	subs	r5, r0, #4
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d30c      	bcc.n	8006daa <__copybits+0x36>
 8006d90:	1aa3      	subs	r3, r4, r2
 8006d92:	3b11      	subs	r3, #17
 8006d94:	f023 0303 	bic.w	r3, r3, #3
 8006d98:	3211      	adds	r2, #17
 8006d9a:	42a2      	cmp	r2, r4
 8006d9c:	bf88      	it	hi
 8006d9e:	2300      	movhi	r3, #0
 8006da0:	4418      	add	r0, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	4288      	cmp	r0, r1
 8006da6:	d305      	bcc.n	8006db4 <__copybits+0x40>
 8006da8:	bd70      	pop	{r4, r5, r6, pc}
 8006daa:	f853 6b04 	ldr.w	r6, [r3], #4
 8006dae:	f845 6f04 	str.w	r6, [r5, #4]!
 8006db2:	e7eb      	b.n	8006d8c <__copybits+0x18>
 8006db4:	f840 3b04 	str.w	r3, [r0], #4
 8006db8:	e7f4      	b.n	8006da4 <__copybits+0x30>

08006dba <__any_on>:
 8006dba:	f100 0214 	add.w	r2, r0, #20
 8006dbe:	6900      	ldr	r0, [r0, #16]
 8006dc0:	114b      	asrs	r3, r1, #5
 8006dc2:	4298      	cmp	r0, r3
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	db11      	blt.n	8006dec <__any_on+0x32>
 8006dc8:	dd0a      	ble.n	8006de0 <__any_on+0x26>
 8006dca:	f011 011f 	ands.w	r1, r1, #31
 8006dce:	d007      	beq.n	8006de0 <__any_on+0x26>
 8006dd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006dd4:	fa24 f001 	lsr.w	r0, r4, r1
 8006dd8:	fa00 f101 	lsl.w	r1, r0, r1
 8006ddc:	428c      	cmp	r4, r1
 8006dde:	d10b      	bne.n	8006df8 <__any_on+0x3e>
 8006de0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d803      	bhi.n	8006df0 <__any_on+0x36>
 8006de8:	2000      	movs	r0, #0
 8006dea:	bd10      	pop	{r4, pc}
 8006dec:	4603      	mov	r3, r0
 8006dee:	e7f7      	b.n	8006de0 <__any_on+0x26>
 8006df0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d0f5      	beq.n	8006de4 <__any_on+0x2a>
 8006df8:	2001      	movs	r0, #1
 8006dfa:	e7f6      	b.n	8006dea <__any_on+0x30>

08006dfc <sulp>:
 8006dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e00:	460f      	mov	r7, r1
 8006e02:	4690      	mov	r8, r2
 8006e04:	f7ff fec6 	bl	8006b94 <__ulp>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	f1b8 0f00 	cmp.w	r8, #0
 8006e10:	d011      	beq.n	8006e36 <sulp+0x3a>
 8006e12:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006e16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd0b      	ble.n	8006e36 <sulp+0x3a>
 8006e1e:	2400      	movs	r4, #0
 8006e20:	051b      	lsls	r3, r3, #20
 8006e22:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006e26:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	f7f9 fb53 	bl	80004d8 <__aeabi_dmul>
 8006e32:	4604      	mov	r4, r0
 8006e34:	460d      	mov	r5, r1
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006e40 <_strtod_l>:
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	b09f      	sub	sp, #124	@ 0x7c
 8006e46:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006e48:	2200      	movs	r2, #0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006e4e:	f04f 0a00 	mov.w	sl, #0
 8006e52:	f04f 0b00 	mov.w	fp, #0
 8006e56:	460a      	mov	r2, r1
 8006e58:	9005      	str	r0, [sp, #20]
 8006e5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e5c:	7811      	ldrb	r1, [r2, #0]
 8006e5e:	292b      	cmp	r1, #43	@ 0x2b
 8006e60:	d048      	beq.n	8006ef4 <_strtod_l+0xb4>
 8006e62:	d836      	bhi.n	8006ed2 <_strtod_l+0x92>
 8006e64:	290d      	cmp	r1, #13
 8006e66:	d830      	bhi.n	8006eca <_strtod_l+0x8a>
 8006e68:	2908      	cmp	r1, #8
 8006e6a:	d830      	bhi.n	8006ece <_strtod_l+0x8e>
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	d039      	beq.n	8006ee4 <_strtod_l+0xa4>
 8006e70:	2200      	movs	r2, #0
 8006e72:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006e76:	782a      	ldrb	r2, [r5, #0]
 8006e78:	2a30      	cmp	r2, #48	@ 0x30
 8006e7a:	f040 80b0 	bne.w	8006fde <_strtod_l+0x19e>
 8006e7e:	786a      	ldrb	r2, [r5, #1]
 8006e80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e84:	2a58      	cmp	r2, #88	@ 0x58
 8006e86:	d16c      	bne.n	8006f62 <_strtod_l+0x122>
 8006e88:	9302      	str	r3, [sp, #8]
 8006e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e8c:	4a8f      	ldr	r2, [pc, #572]	@ (80070cc <_strtod_l+0x28c>)
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	ab1a      	add	r3, sp, #104	@ 0x68
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	9805      	ldr	r0, [sp, #20]
 8006e96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006e98:	a919      	add	r1, sp, #100	@ 0x64
 8006e9a:	f001 fe55 	bl	8008b48 <__gethex>
 8006e9e:	f010 060f 	ands.w	r6, r0, #15
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	d005      	beq.n	8006eb2 <_strtod_l+0x72>
 8006ea6:	2e06      	cmp	r6, #6
 8006ea8:	d126      	bne.n	8006ef8 <_strtod_l+0xb8>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	3501      	adds	r5, #1
 8006eae:	9519      	str	r5, [sp, #100]	@ 0x64
 8006eb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006eb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f040 8582 	bne.w	80079be <_strtod_l+0xb7e>
 8006eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ebc:	b1bb      	cbz	r3, 8006eee <_strtod_l+0xae>
 8006ebe:	4650      	mov	r0, sl
 8006ec0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006ec4:	b01f      	add	sp, #124	@ 0x7c
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	2920      	cmp	r1, #32
 8006ecc:	d1d0      	bne.n	8006e70 <_strtod_l+0x30>
 8006ece:	3201      	adds	r2, #1
 8006ed0:	e7c3      	b.n	8006e5a <_strtod_l+0x1a>
 8006ed2:	292d      	cmp	r1, #45	@ 0x2d
 8006ed4:	d1cc      	bne.n	8006e70 <_strtod_l+0x30>
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	910e      	str	r1, [sp, #56]	@ 0x38
 8006eda:	1c51      	adds	r1, r2, #1
 8006edc:	9119      	str	r1, [sp, #100]	@ 0x64
 8006ede:	7852      	ldrb	r2, [r2, #1]
 8006ee0:	2a00      	cmp	r2, #0
 8006ee2:	d1c7      	bne.n	8006e74 <_strtod_l+0x34>
 8006ee4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ee6:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 8566 	bne.w	80079ba <_strtod_l+0xb7a>
 8006eee:	4650      	mov	r0, sl
 8006ef0:	4659      	mov	r1, fp
 8006ef2:	e7e7      	b.n	8006ec4 <_strtod_l+0x84>
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	e7ef      	b.n	8006ed8 <_strtod_l+0x98>
 8006ef8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006efa:	b13a      	cbz	r2, 8006f0c <_strtod_l+0xcc>
 8006efc:	2135      	movs	r1, #53	@ 0x35
 8006efe:	a81c      	add	r0, sp, #112	@ 0x70
 8006f00:	f7ff ff38 	bl	8006d74 <__copybits>
 8006f04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f06:	9805      	ldr	r0, [sp, #20]
 8006f08:	f7ff fb18 	bl	800653c <_Bfree>
 8006f0c:	3e01      	subs	r6, #1
 8006f0e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006f10:	2e04      	cmp	r6, #4
 8006f12:	d806      	bhi.n	8006f22 <_strtod_l+0xe2>
 8006f14:	e8df f006 	tbb	[pc, r6]
 8006f18:	201d0314 	.word	0x201d0314
 8006f1c:	14          	.byte	0x14
 8006f1d:	00          	.byte	0x00
 8006f1e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006f22:	05e1      	lsls	r1, r4, #23
 8006f24:	bf48      	it	mi
 8006f26:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006f2a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f2e:	0d1b      	lsrs	r3, r3, #20
 8006f30:	051b      	lsls	r3, r3, #20
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1bd      	bne.n	8006eb2 <_strtod_l+0x72>
 8006f36:	f7fe fb17 	bl	8005568 <__errno>
 8006f3a:	2322      	movs	r3, #34	@ 0x22
 8006f3c:	6003      	str	r3, [r0, #0]
 8006f3e:	e7b8      	b.n	8006eb2 <_strtod_l+0x72>
 8006f40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006f44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006f48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f4c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f50:	e7e7      	b.n	8006f22 <_strtod_l+0xe2>
 8006f52:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80070d0 <_strtod_l+0x290>
 8006f56:	e7e4      	b.n	8006f22 <_strtod_l+0xe2>
 8006f58:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006f5c:	f04f 3aff 	mov.w	sl, #4294967295
 8006f60:	e7df      	b.n	8006f22 <_strtod_l+0xe2>
 8006f62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	2b30      	cmp	r3, #48	@ 0x30
 8006f6c:	d0f9      	beq.n	8006f62 <_strtod_l+0x122>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d09f      	beq.n	8006eb2 <_strtod_l+0x72>
 8006f72:	2301      	movs	r3, #1
 8006f74:	2700      	movs	r7, #0
 8006f76:	220a      	movs	r2, #10
 8006f78:	46b9      	mov	r9, r7
 8006f7a:	9308      	str	r3, [sp, #32]
 8006f7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f7e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006f80:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f82:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006f84:	7805      	ldrb	r5, [r0, #0]
 8006f86:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006f8a:	b2d9      	uxtb	r1, r3
 8006f8c:	2909      	cmp	r1, #9
 8006f8e:	d928      	bls.n	8006fe2 <_strtod_l+0x1a2>
 8006f90:	2201      	movs	r2, #1
 8006f92:	4950      	ldr	r1, [pc, #320]	@ (80070d4 <_strtod_l+0x294>)
 8006f94:	f001 fcf4 	bl	8008980 <strncmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d032      	beq.n	8007002 <_strtod_l+0x1c2>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	462a      	mov	r2, r5
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	464d      	mov	r5, r9
 8006fa4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fa6:	2a65      	cmp	r2, #101	@ 0x65
 8006fa8:	d001      	beq.n	8006fae <_strtod_l+0x16e>
 8006faa:	2a45      	cmp	r2, #69	@ 0x45
 8006fac:	d114      	bne.n	8006fd8 <_strtod_l+0x198>
 8006fae:	b91d      	cbnz	r5, 8006fb8 <_strtod_l+0x178>
 8006fb0:	9a08      	ldr	r2, [sp, #32]
 8006fb2:	4302      	orrs	r2, r0
 8006fb4:	d096      	beq.n	8006ee4 <_strtod_l+0xa4>
 8006fb6:	2500      	movs	r5, #0
 8006fb8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006fba:	1c62      	adds	r2, r4, #1
 8006fbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fbe:	7862      	ldrb	r2, [r4, #1]
 8006fc0:	2a2b      	cmp	r2, #43	@ 0x2b
 8006fc2:	d07a      	beq.n	80070ba <_strtod_l+0x27a>
 8006fc4:	2a2d      	cmp	r2, #45	@ 0x2d
 8006fc6:	d07e      	beq.n	80070c6 <_strtod_l+0x286>
 8006fc8:	f04f 0c00 	mov.w	ip, #0
 8006fcc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006fd0:	2909      	cmp	r1, #9
 8006fd2:	f240 8085 	bls.w	80070e0 <_strtod_l+0x2a0>
 8006fd6:	9419      	str	r4, [sp, #100]	@ 0x64
 8006fd8:	f04f 0800 	mov.w	r8, #0
 8006fdc:	e0a5      	b.n	800712a <_strtod_l+0x2ea>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e7c8      	b.n	8006f74 <_strtod_l+0x134>
 8006fe2:	f1b9 0f08 	cmp.w	r9, #8
 8006fe6:	bfd8      	it	le
 8006fe8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006fea:	f100 0001 	add.w	r0, r0, #1
 8006fee:	bfd6      	itet	le
 8006ff0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ff4:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006ff8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006ffa:	f109 0901 	add.w	r9, r9, #1
 8006ffe:	9019      	str	r0, [sp, #100]	@ 0x64
 8007000:	e7bf      	b.n	8006f82 <_strtod_l+0x142>
 8007002:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	9219      	str	r2, [sp, #100]	@ 0x64
 8007008:	785a      	ldrb	r2, [r3, #1]
 800700a:	f1b9 0f00 	cmp.w	r9, #0
 800700e:	d03b      	beq.n	8007088 <_strtod_l+0x248>
 8007010:	464d      	mov	r5, r9
 8007012:	900a      	str	r0, [sp, #40]	@ 0x28
 8007014:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007018:	2b09      	cmp	r3, #9
 800701a:	d912      	bls.n	8007042 <_strtod_l+0x202>
 800701c:	2301      	movs	r3, #1
 800701e:	e7c2      	b.n	8006fa6 <_strtod_l+0x166>
 8007020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007022:	3001      	adds	r0, #1
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	9219      	str	r2, [sp, #100]	@ 0x64
 8007028:	785a      	ldrb	r2, [r3, #1]
 800702a:	2a30      	cmp	r2, #48	@ 0x30
 800702c:	d0f8      	beq.n	8007020 <_strtod_l+0x1e0>
 800702e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007032:	2b08      	cmp	r3, #8
 8007034:	f200 84c8 	bhi.w	80079c8 <_strtod_l+0xb88>
 8007038:	900a      	str	r0, [sp, #40]	@ 0x28
 800703a:	2000      	movs	r0, #0
 800703c:	4605      	mov	r5, r0
 800703e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007040:	930c      	str	r3, [sp, #48]	@ 0x30
 8007042:	3a30      	subs	r2, #48	@ 0x30
 8007044:	f100 0301 	add.w	r3, r0, #1
 8007048:	d018      	beq.n	800707c <_strtod_l+0x23c>
 800704a:	462e      	mov	r6, r5
 800704c:	f04f 0e0a 	mov.w	lr, #10
 8007050:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007052:	4419      	add	r1, r3
 8007054:	910a      	str	r1, [sp, #40]	@ 0x28
 8007056:	1c71      	adds	r1, r6, #1
 8007058:	eba1 0c05 	sub.w	ip, r1, r5
 800705c:	4563      	cmp	r3, ip
 800705e:	dc15      	bgt.n	800708c <_strtod_l+0x24c>
 8007060:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007064:	182b      	adds	r3, r5, r0
 8007066:	2b08      	cmp	r3, #8
 8007068:	f105 0501 	add.w	r5, r5, #1
 800706c:	4405      	add	r5, r0
 800706e:	dc1a      	bgt.n	80070a6 <_strtod_l+0x266>
 8007070:	230a      	movs	r3, #10
 8007072:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007074:	fb03 2301 	mla	r3, r3, r1, r2
 8007078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800707a:	2300      	movs	r3, #0
 800707c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800707e:	4618      	mov	r0, r3
 8007080:	1c51      	adds	r1, r2, #1
 8007082:	9119      	str	r1, [sp, #100]	@ 0x64
 8007084:	7852      	ldrb	r2, [r2, #1]
 8007086:	e7c5      	b.n	8007014 <_strtod_l+0x1d4>
 8007088:	4648      	mov	r0, r9
 800708a:	e7ce      	b.n	800702a <_strtod_l+0x1ea>
 800708c:	2e08      	cmp	r6, #8
 800708e:	dc05      	bgt.n	800709c <_strtod_l+0x25c>
 8007090:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007092:	fb0e f606 	mul.w	r6, lr, r6
 8007096:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007098:	460e      	mov	r6, r1
 800709a:	e7dc      	b.n	8007056 <_strtod_l+0x216>
 800709c:	2910      	cmp	r1, #16
 800709e:	bfd8      	it	le
 80070a0:	fb0e f707 	mulle.w	r7, lr, r7
 80070a4:	e7f8      	b.n	8007098 <_strtod_l+0x258>
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	bfdc      	itt	le
 80070aa:	230a      	movle	r3, #10
 80070ac:	fb03 2707 	mlale	r7, r3, r7, r2
 80070b0:	e7e3      	b.n	800707a <_strtod_l+0x23a>
 80070b2:	2300      	movs	r3, #0
 80070b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80070b6:	2301      	movs	r3, #1
 80070b8:	e77a      	b.n	8006fb0 <_strtod_l+0x170>
 80070ba:	f04f 0c00 	mov.w	ip, #0
 80070be:	1ca2      	adds	r2, r4, #2
 80070c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80070c2:	78a2      	ldrb	r2, [r4, #2]
 80070c4:	e782      	b.n	8006fcc <_strtod_l+0x18c>
 80070c6:	f04f 0c01 	mov.w	ip, #1
 80070ca:	e7f8      	b.n	80070be <_strtod_l+0x27e>
 80070cc:	08009764 	.word	0x08009764
 80070d0:	7ff00000 	.word	0x7ff00000
 80070d4:	0800957b 	.word	0x0800957b
 80070d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070da:	1c51      	adds	r1, r2, #1
 80070dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80070de:	7852      	ldrb	r2, [r2, #1]
 80070e0:	2a30      	cmp	r2, #48	@ 0x30
 80070e2:	d0f9      	beq.n	80070d8 <_strtod_l+0x298>
 80070e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80070e8:	2908      	cmp	r1, #8
 80070ea:	f63f af75 	bhi.w	8006fd8 <_strtod_l+0x198>
 80070ee:	f04f 080a 	mov.w	r8, #10
 80070f2:	3a30      	subs	r2, #48	@ 0x30
 80070f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80070fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070fc:	1c56      	adds	r6, r2, #1
 80070fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8007100:	7852      	ldrb	r2, [r2, #1]
 8007102:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007106:	f1be 0f09 	cmp.w	lr, #9
 800710a:	d939      	bls.n	8007180 <_strtod_l+0x340>
 800710c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800710e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007112:	1a76      	subs	r6, r6, r1
 8007114:	2e08      	cmp	r6, #8
 8007116:	dc03      	bgt.n	8007120 <_strtod_l+0x2e0>
 8007118:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800711a:	4588      	cmp	r8, r1
 800711c:	bfa8      	it	ge
 800711e:	4688      	movge	r8, r1
 8007120:	f1bc 0f00 	cmp.w	ip, #0
 8007124:	d001      	beq.n	800712a <_strtod_l+0x2ea>
 8007126:	f1c8 0800 	rsb	r8, r8, #0
 800712a:	2d00      	cmp	r5, #0
 800712c:	d14e      	bne.n	80071cc <_strtod_l+0x38c>
 800712e:	9908      	ldr	r1, [sp, #32]
 8007130:	4308      	orrs	r0, r1
 8007132:	f47f aebe 	bne.w	8006eb2 <_strtod_l+0x72>
 8007136:	2b00      	cmp	r3, #0
 8007138:	f47f aed4 	bne.w	8006ee4 <_strtod_l+0xa4>
 800713c:	2a69      	cmp	r2, #105	@ 0x69
 800713e:	d028      	beq.n	8007192 <_strtod_l+0x352>
 8007140:	dc25      	bgt.n	800718e <_strtod_l+0x34e>
 8007142:	2a49      	cmp	r2, #73	@ 0x49
 8007144:	d025      	beq.n	8007192 <_strtod_l+0x352>
 8007146:	2a4e      	cmp	r2, #78	@ 0x4e
 8007148:	f47f aecc 	bne.w	8006ee4 <_strtod_l+0xa4>
 800714c:	4999      	ldr	r1, [pc, #612]	@ (80073b4 <_strtod_l+0x574>)
 800714e:	a819      	add	r0, sp, #100	@ 0x64
 8007150:	f001 ff1c 	bl	8008f8c <__match>
 8007154:	2800      	cmp	r0, #0
 8007156:	f43f aec5 	beq.w	8006ee4 <_strtod_l+0xa4>
 800715a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b28      	cmp	r3, #40	@ 0x28
 8007160:	d12e      	bne.n	80071c0 <_strtod_l+0x380>
 8007162:	4995      	ldr	r1, [pc, #596]	@ (80073b8 <_strtod_l+0x578>)
 8007164:	aa1c      	add	r2, sp, #112	@ 0x70
 8007166:	a819      	add	r0, sp, #100	@ 0x64
 8007168:	f001 ff24 	bl	8008fb4 <__hexnan>
 800716c:	2805      	cmp	r0, #5
 800716e:	d127      	bne.n	80071c0 <_strtod_l+0x380>
 8007170:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007172:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007176:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800717a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800717e:	e698      	b.n	8006eb2 <_strtod_l+0x72>
 8007180:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007182:	fb08 2101 	mla	r1, r8, r1, r2
 8007186:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800718a:	9209      	str	r2, [sp, #36]	@ 0x24
 800718c:	e7b5      	b.n	80070fa <_strtod_l+0x2ba>
 800718e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007190:	e7da      	b.n	8007148 <_strtod_l+0x308>
 8007192:	498a      	ldr	r1, [pc, #552]	@ (80073bc <_strtod_l+0x57c>)
 8007194:	a819      	add	r0, sp, #100	@ 0x64
 8007196:	f001 fef9 	bl	8008f8c <__match>
 800719a:	2800      	cmp	r0, #0
 800719c:	f43f aea2 	beq.w	8006ee4 <_strtod_l+0xa4>
 80071a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071a2:	4987      	ldr	r1, [pc, #540]	@ (80073c0 <_strtod_l+0x580>)
 80071a4:	3b01      	subs	r3, #1
 80071a6:	a819      	add	r0, sp, #100	@ 0x64
 80071a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80071aa:	f001 feef 	bl	8008f8c <__match>
 80071ae:	b910      	cbnz	r0, 80071b6 <_strtod_l+0x376>
 80071b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071b2:	3301      	adds	r3, #1
 80071b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80071b6:	f04f 0a00 	mov.w	sl, #0
 80071ba:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80073c4 <_strtod_l+0x584>
 80071be:	e678      	b.n	8006eb2 <_strtod_l+0x72>
 80071c0:	4881      	ldr	r0, [pc, #516]	@ (80073c8 <_strtod_l+0x588>)
 80071c2:	f001 fc21 	bl	8008a08 <nan>
 80071c6:	4682      	mov	sl, r0
 80071c8:	468b      	mov	fp, r1
 80071ca:	e672      	b.n	8006eb2 <_strtod_l+0x72>
 80071cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ce:	f1b9 0f00 	cmp.w	r9, #0
 80071d2:	bf08      	it	eq
 80071d4:	46a9      	moveq	r9, r5
 80071d6:	eba8 0303 	sub.w	r3, r8, r3
 80071da:	2d10      	cmp	r5, #16
 80071dc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80071de:	462c      	mov	r4, r5
 80071e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071e2:	bfa8      	it	ge
 80071e4:	2410      	movge	r4, #16
 80071e6:	f7f9 f8fd 	bl	80003e4 <__aeabi_ui2d>
 80071ea:	2d09      	cmp	r5, #9
 80071ec:	4682      	mov	sl, r0
 80071ee:	468b      	mov	fp, r1
 80071f0:	dc11      	bgt.n	8007216 <_strtod_l+0x3d6>
 80071f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f43f ae5c 	beq.w	8006eb2 <_strtod_l+0x72>
 80071fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fc:	dd76      	ble.n	80072ec <_strtod_l+0x4ac>
 80071fe:	2b16      	cmp	r3, #22
 8007200:	dc5d      	bgt.n	80072be <_strtod_l+0x47e>
 8007202:	4972      	ldr	r1, [pc, #456]	@ (80073cc <_strtod_l+0x58c>)
 8007204:	4652      	mov	r2, sl
 8007206:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800720a:	465b      	mov	r3, fp
 800720c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007210:	f7f9 f962 	bl	80004d8 <__aeabi_dmul>
 8007214:	e7d7      	b.n	80071c6 <_strtod_l+0x386>
 8007216:	4b6d      	ldr	r3, [pc, #436]	@ (80073cc <_strtod_l+0x58c>)
 8007218:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800721c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007220:	f7f9 f95a 	bl	80004d8 <__aeabi_dmul>
 8007224:	4682      	mov	sl, r0
 8007226:	4638      	mov	r0, r7
 8007228:	468b      	mov	fp, r1
 800722a:	f7f9 f8db 	bl	80003e4 <__aeabi_ui2d>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4650      	mov	r0, sl
 8007234:	4659      	mov	r1, fp
 8007236:	f7f8 ff99 	bl	800016c <__adddf3>
 800723a:	2d0f      	cmp	r5, #15
 800723c:	4682      	mov	sl, r0
 800723e:	468b      	mov	fp, r1
 8007240:	ddd7      	ble.n	80071f2 <_strtod_l+0x3b2>
 8007242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007244:	1b2c      	subs	r4, r5, r4
 8007246:	441c      	add	r4, r3
 8007248:	2c00      	cmp	r4, #0
 800724a:	f340 8093 	ble.w	8007374 <_strtod_l+0x534>
 800724e:	f014 030f 	ands.w	r3, r4, #15
 8007252:	d00a      	beq.n	800726a <_strtod_l+0x42a>
 8007254:	495d      	ldr	r1, [pc, #372]	@ (80073cc <_strtod_l+0x58c>)
 8007256:	4652      	mov	r2, sl
 8007258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800725c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007260:	465b      	mov	r3, fp
 8007262:	f7f9 f939 	bl	80004d8 <__aeabi_dmul>
 8007266:	4682      	mov	sl, r0
 8007268:	468b      	mov	fp, r1
 800726a:	f034 040f 	bics.w	r4, r4, #15
 800726e:	d073      	beq.n	8007358 <_strtod_l+0x518>
 8007270:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007274:	dd49      	ble.n	800730a <_strtod_l+0x4ca>
 8007276:	2400      	movs	r4, #0
 8007278:	46a0      	mov	r8, r4
 800727a:	46a1      	mov	r9, r4
 800727c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800727e:	2322      	movs	r3, #34	@ 0x22
 8007280:	f04f 0a00 	mov.w	sl, #0
 8007284:	9a05      	ldr	r2, [sp, #20]
 8007286:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80073c4 <_strtod_l+0x584>
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800728e:	2b00      	cmp	r3, #0
 8007290:	f43f ae0f 	beq.w	8006eb2 <_strtod_l+0x72>
 8007294:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007296:	9805      	ldr	r0, [sp, #20]
 8007298:	f7ff f950 	bl	800653c <_Bfree>
 800729c:	4649      	mov	r1, r9
 800729e:	9805      	ldr	r0, [sp, #20]
 80072a0:	f7ff f94c 	bl	800653c <_Bfree>
 80072a4:	4641      	mov	r1, r8
 80072a6:	9805      	ldr	r0, [sp, #20]
 80072a8:	f7ff f948 	bl	800653c <_Bfree>
 80072ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072ae:	9805      	ldr	r0, [sp, #20]
 80072b0:	f7ff f944 	bl	800653c <_Bfree>
 80072b4:	4621      	mov	r1, r4
 80072b6:	9805      	ldr	r0, [sp, #20]
 80072b8:	f7ff f940 	bl	800653c <_Bfree>
 80072bc:	e5f9      	b.n	8006eb2 <_strtod_l+0x72>
 80072be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80072c4:	4293      	cmp	r3, r2
 80072c6:	dbbc      	blt.n	8007242 <_strtod_l+0x402>
 80072c8:	4c40      	ldr	r4, [pc, #256]	@ (80073cc <_strtod_l+0x58c>)
 80072ca:	f1c5 050f 	rsb	r5, r5, #15
 80072ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80072d2:	4652      	mov	r2, sl
 80072d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d8:	465b      	mov	r3, fp
 80072da:	f7f9 f8fd 	bl	80004d8 <__aeabi_dmul>
 80072de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e0:	1b5d      	subs	r5, r3, r5
 80072e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072ea:	e791      	b.n	8007210 <_strtod_l+0x3d0>
 80072ec:	3316      	adds	r3, #22
 80072ee:	dba8      	blt.n	8007242 <_strtod_l+0x402>
 80072f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f2:	4650      	mov	r0, sl
 80072f4:	eba3 0808 	sub.w	r8, r3, r8
 80072f8:	4b34      	ldr	r3, [pc, #208]	@ (80073cc <_strtod_l+0x58c>)
 80072fa:	4659      	mov	r1, fp
 80072fc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007300:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007304:	f7f9 fa12 	bl	800072c <__aeabi_ddiv>
 8007308:	e75d      	b.n	80071c6 <_strtod_l+0x386>
 800730a:	2300      	movs	r3, #0
 800730c:	4650      	mov	r0, sl
 800730e:	4659      	mov	r1, fp
 8007310:	461e      	mov	r6, r3
 8007312:	4f2f      	ldr	r7, [pc, #188]	@ (80073d0 <_strtod_l+0x590>)
 8007314:	1124      	asrs	r4, r4, #4
 8007316:	2c01      	cmp	r4, #1
 8007318:	dc21      	bgt.n	800735e <_strtod_l+0x51e>
 800731a:	b10b      	cbz	r3, 8007320 <_strtod_l+0x4e0>
 800731c:	4682      	mov	sl, r0
 800731e:	468b      	mov	fp, r1
 8007320:	492b      	ldr	r1, [pc, #172]	@ (80073d0 <_strtod_l+0x590>)
 8007322:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007326:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800732a:	4652      	mov	r2, sl
 800732c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007330:	465b      	mov	r3, fp
 8007332:	f7f9 f8d1 	bl	80004d8 <__aeabi_dmul>
 8007336:	4b23      	ldr	r3, [pc, #140]	@ (80073c4 <_strtod_l+0x584>)
 8007338:	460a      	mov	r2, r1
 800733a:	400b      	ands	r3, r1
 800733c:	4925      	ldr	r1, [pc, #148]	@ (80073d4 <_strtod_l+0x594>)
 800733e:	4682      	mov	sl, r0
 8007340:	428b      	cmp	r3, r1
 8007342:	d898      	bhi.n	8007276 <_strtod_l+0x436>
 8007344:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007348:	428b      	cmp	r3, r1
 800734a:	bf86      	itte	hi
 800734c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007350:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80073d8 <_strtod_l+0x598>
 8007354:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007358:	2300      	movs	r3, #0
 800735a:	9308      	str	r3, [sp, #32]
 800735c:	e076      	b.n	800744c <_strtod_l+0x60c>
 800735e:	07e2      	lsls	r2, r4, #31
 8007360:	d504      	bpl.n	800736c <_strtod_l+0x52c>
 8007362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007366:	f7f9 f8b7 	bl	80004d8 <__aeabi_dmul>
 800736a:	2301      	movs	r3, #1
 800736c:	3601      	adds	r6, #1
 800736e:	1064      	asrs	r4, r4, #1
 8007370:	3708      	adds	r7, #8
 8007372:	e7d0      	b.n	8007316 <_strtod_l+0x4d6>
 8007374:	d0f0      	beq.n	8007358 <_strtod_l+0x518>
 8007376:	4264      	negs	r4, r4
 8007378:	f014 020f 	ands.w	r2, r4, #15
 800737c:	d00a      	beq.n	8007394 <_strtod_l+0x554>
 800737e:	4b13      	ldr	r3, [pc, #76]	@ (80073cc <_strtod_l+0x58c>)
 8007380:	4650      	mov	r0, sl
 8007382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007386:	4659      	mov	r1, fp
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f9 f9ce 	bl	800072c <__aeabi_ddiv>
 8007390:	4682      	mov	sl, r0
 8007392:	468b      	mov	fp, r1
 8007394:	1124      	asrs	r4, r4, #4
 8007396:	d0df      	beq.n	8007358 <_strtod_l+0x518>
 8007398:	2c1f      	cmp	r4, #31
 800739a:	dd1f      	ble.n	80073dc <_strtod_l+0x59c>
 800739c:	2400      	movs	r4, #0
 800739e:	46a0      	mov	r8, r4
 80073a0:	46a1      	mov	r9, r4
 80073a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073a4:	2322      	movs	r3, #34	@ 0x22
 80073a6:	9a05      	ldr	r2, [sp, #20]
 80073a8:	f04f 0a00 	mov.w	sl, #0
 80073ac:	f04f 0b00 	mov.w	fp, #0
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	e76b      	b.n	800728c <_strtod_l+0x44c>
 80073b4:	0800946b 	.word	0x0800946b
 80073b8:	08009750 	.word	0x08009750
 80073bc:	08009463 	.word	0x08009463
 80073c0:	08009498 	.word	0x08009498
 80073c4:	7ff00000 	.word	0x7ff00000
 80073c8:	080095ec 	.word	0x080095ec
 80073cc:	08009688 	.word	0x08009688
 80073d0:	08009660 	.word	0x08009660
 80073d4:	7ca00000 	.word	0x7ca00000
 80073d8:	7fefffff 	.word	0x7fefffff
 80073dc:	f014 0310 	ands.w	r3, r4, #16
 80073e0:	bf18      	it	ne
 80073e2:	236a      	movne	r3, #106	@ 0x6a
 80073e4:	4650      	mov	r0, sl
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	4659      	mov	r1, fp
 80073ea:	2300      	movs	r3, #0
 80073ec:	4e77      	ldr	r6, [pc, #476]	@ (80075cc <_strtod_l+0x78c>)
 80073ee:	07e7      	lsls	r7, r4, #31
 80073f0:	d504      	bpl.n	80073fc <_strtod_l+0x5bc>
 80073f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073f6:	f7f9 f86f 	bl	80004d8 <__aeabi_dmul>
 80073fa:	2301      	movs	r3, #1
 80073fc:	1064      	asrs	r4, r4, #1
 80073fe:	f106 0608 	add.w	r6, r6, #8
 8007402:	d1f4      	bne.n	80073ee <_strtod_l+0x5ae>
 8007404:	b10b      	cbz	r3, 800740a <_strtod_l+0x5ca>
 8007406:	4682      	mov	sl, r0
 8007408:	468b      	mov	fp, r1
 800740a:	9b08      	ldr	r3, [sp, #32]
 800740c:	b1b3      	cbz	r3, 800743c <_strtod_l+0x5fc>
 800740e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007412:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007416:	2b00      	cmp	r3, #0
 8007418:	4659      	mov	r1, fp
 800741a:	dd0f      	ble.n	800743c <_strtod_l+0x5fc>
 800741c:	2b1f      	cmp	r3, #31
 800741e:	dd58      	ble.n	80074d2 <_strtod_l+0x692>
 8007420:	2b34      	cmp	r3, #52	@ 0x34
 8007422:	bfd8      	it	le
 8007424:	f04f 33ff 	movle.w	r3, #4294967295
 8007428:	f04f 0a00 	mov.w	sl, #0
 800742c:	bfcf      	iteee	gt
 800742e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007432:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007436:	4093      	lslle	r3, r2
 8007438:	ea03 0b01 	andle.w	fp, r3, r1
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	4650      	mov	r0, sl
 8007442:	4659      	mov	r1, fp
 8007444:	f7f9 fab0 	bl	80009a8 <__aeabi_dcmpeq>
 8007448:	2800      	cmp	r0, #0
 800744a:	d1a7      	bne.n	800739c <_strtod_l+0x55c>
 800744c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800744e:	464a      	mov	r2, r9
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007454:	462b      	mov	r3, r5
 8007456:	9805      	ldr	r0, [sp, #20]
 8007458:	f7ff f8d8 	bl	800660c <__s2b>
 800745c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800745e:	2800      	cmp	r0, #0
 8007460:	f43f af09 	beq.w	8007276 <_strtod_l+0x436>
 8007464:	2400      	movs	r4, #0
 8007466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746a:	2a00      	cmp	r2, #0
 800746c:	eba3 0308 	sub.w	r3, r3, r8
 8007470:	bfa8      	it	ge
 8007472:	2300      	movge	r3, #0
 8007474:	46a0      	mov	r8, r4
 8007476:	9312      	str	r3, [sp, #72]	@ 0x48
 8007478:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800747c:	9316      	str	r3, [sp, #88]	@ 0x58
 800747e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007480:	9805      	ldr	r0, [sp, #20]
 8007482:	6859      	ldr	r1, [r3, #4]
 8007484:	f7ff f81a 	bl	80064bc <_Balloc>
 8007488:	4681      	mov	r9, r0
 800748a:	2800      	cmp	r0, #0
 800748c:	f43f aef7 	beq.w	800727e <_strtod_l+0x43e>
 8007490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007492:	300c      	adds	r0, #12
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	f103 010c 	add.w	r1, r3, #12
 800749a:	3202      	adds	r2, #2
 800749c:	0092      	lsls	r2, r2, #2
 800749e:	f7fe f89e 	bl	80055de <memcpy>
 80074a2:	ab1c      	add	r3, sp, #112	@ 0x70
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4652      	mov	r2, sl
 80074ac:	465b      	mov	r3, fp
 80074ae:	9805      	ldr	r0, [sp, #20]
 80074b0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80074b4:	f7ff fbd6 	bl	8006c64 <__d2b>
 80074b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f aedf 	beq.w	800727e <_strtod_l+0x43e>
 80074c0:	2101      	movs	r1, #1
 80074c2:	9805      	ldr	r0, [sp, #20]
 80074c4:	f7ff f938 	bl	8006738 <__i2b>
 80074c8:	4680      	mov	r8, r0
 80074ca:	b948      	cbnz	r0, 80074e0 <_strtod_l+0x6a0>
 80074cc:	f04f 0800 	mov.w	r8, #0
 80074d0:	e6d5      	b.n	800727e <_strtod_l+0x43e>
 80074d2:	f04f 32ff 	mov.w	r2, #4294967295
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	ea03 0a0a 	and.w	sl, r3, sl
 80074de:	e7ad      	b.n	800743c <_strtod_l+0x5fc>
 80074e0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80074e2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80074e4:	2d00      	cmp	r5, #0
 80074e6:	bfab      	itete	ge
 80074e8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80074ea:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80074ec:	18ef      	addge	r7, r5, r3
 80074ee:	1b5e      	sublt	r6, r3, r5
 80074f0:	9b08      	ldr	r3, [sp, #32]
 80074f2:	bfa8      	it	ge
 80074f4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80074f6:	eba5 0503 	sub.w	r5, r5, r3
 80074fa:	4415      	add	r5, r2
 80074fc:	4b34      	ldr	r3, [pc, #208]	@ (80075d0 <_strtod_l+0x790>)
 80074fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8007502:	bfb8      	it	lt
 8007504:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007506:	429d      	cmp	r5, r3
 8007508:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800750c:	da50      	bge.n	80075b0 <_strtod_l+0x770>
 800750e:	1b5b      	subs	r3, r3, r5
 8007510:	2b1f      	cmp	r3, #31
 8007512:	f04f 0101 	mov.w	r1, #1
 8007516:	eba2 0203 	sub.w	r2, r2, r3
 800751a:	dc3d      	bgt.n	8007598 <_strtod_l+0x758>
 800751c:	fa01 f303 	lsl.w	r3, r1, r3
 8007520:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007522:	2300      	movs	r3, #0
 8007524:	9310      	str	r3, [sp, #64]	@ 0x40
 8007526:	18bd      	adds	r5, r7, r2
 8007528:	9b08      	ldr	r3, [sp, #32]
 800752a:	42af      	cmp	r7, r5
 800752c:	4416      	add	r6, r2
 800752e:	441e      	add	r6, r3
 8007530:	463b      	mov	r3, r7
 8007532:	bfa8      	it	ge
 8007534:	462b      	movge	r3, r5
 8007536:	42b3      	cmp	r3, r6
 8007538:	bfa8      	it	ge
 800753a:	4633      	movge	r3, r6
 800753c:	2b00      	cmp	r3, #0
 800753e:	bfc2      	ittt	gt
 8007540:	1aed      	subgt	r5, r5, r3
 8007542:	1af6      	subgt	r6, r6, r3
 8007544:	1aff      	subgt	r7, r7, r3
 8007546:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007548:	2b00      	cmp	r3, #0
 800754a:	dd16      	ble.n	800757a <_strtod_l+0x73a>
 800754c:	4641      	mov	r1, r8
 800754e:	461a      	mov	r2, r3
 8007550:	9805      	ldr	r0, [sp, #20]
 8007552:	f7ff f9a9 	bl	80068a8 <__pow5mult>
 8007556:	4680      	mov	r8, r0
 8007558:	2800      	cmp	r0, #0
 800755a:	d0b7      	beq.n	80074cc <_strtod_l+0x68c>
 800755c:	4601      	mov	r1, r0
 800755e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007560:	9805      	ldr	r0, [sp, #20]
 8007562:	f7ff f8ff 	bl	8006764 <__multiply>
 8007566:	900a      	str	r0, [sp, #40]	@ 0x28
 8007568:	2800      	cmp	r0, #0
 800756a:	f43f ae88 	beq.w	800727e <_strtod_l+0x43e>
 800756e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007570:	9805      	ldr	r0, [sp, #20]
 8007572:	f7fe ffe3 	bl	800653c <_Bfree>
 8007576:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007578:	931a      	str	r3, [sp, #104]	@ 0x68
 800757a:	2d00      	cmp	r5, #0
 800757c:	dc1d      	bgt.n	80075ba <_strtod_l+0x77a>
 800757e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	dd27      	ble.n	80075d4 <_strtod_l+0x794>
 8007584:	4649      	mov	r1, r9
 8007586:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007588:	9805      	ldr	r0, [sp, #20]
 800758a:	f7ff f98d 	bl	80068a8 <__pow5mult>
 800758e:	4681      	mov	r9, r0
 8007590:	bb00      	cbnz	r0, 80075d4 <_strtod_l+0x794>
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	e672      	b.n	800727e <_strtod_l+0x43e>
 8007598:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800759c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80075a0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80075a4:	35e2      	adds	r5, #226	@ 0xe2
 80075a6:	fa01 f305 	lsl.w	r3, r1, r5
 80075aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80075ac:	9113      	str	r1, [sp, #76]	@ 0x4c
 80075ae:	e7ba      	b.n	8007526 <_strtod_l+0x6e6>
 80075b0:	2300      	movs	r3, #0
 80075b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80075b4:	2301      	movs	r3, #1
 80075b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075b8:	e7b5      	b.n	8007526 <_strtod_l+0x6e6>
 80075ba:	462a      	mov	r2, r5
 80075bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075be:	9805      	ldr	r0, [sp, #20]
 80075c0:	f7ff f9cc 	bl	800695c <__lshift>
 80075c4:	901a      	str	r0, [sp, #104]	@ 0x68
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d1d9      	bne.n	800757e <_strtod_l+0x73e>
 80075ca:	e658      	b.n	800727e <_strtod_l+0x43e>
 80075cc:	08009778 	.word	0x08009778
 80075d0:	fffffc02 	.word	0xfffffc02
 80075d4:	2e00      	cmp	r6, #0
 80075d6:	dd07      	ble.n	80075e8 <_strtod_l+0x7a8>
 80075d8:	4649      	mov	r1, r9
 80075da:	4632      	mov	r2, r6
 80075dc:	9805      	ldr	r0, [sp, #20]
 80075de:	f7ff f9bd 	bl	800695c <__lshift>
 80075e2:	4681      	mov	r9, r0
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d0d4      	beq.n	8007592 <_strtod_l+0x752>
 80075e8:	2f00      	cmp	r7, #0
 80075ea:	dd08      	ble.n	80075fe <_strtod_l+0x7be>
 80075ec:	4641      	mov	r1, r8
 80075ee:	463a      	mov	r2, r7
 80075f0:	9805      	ldr	r0, [sp, #20]
 80075f2:	f7ff f9b3 	bl	800695c <__lshift>
 80075f6:	4680      	mov	r8, r0
 80075f8:	2800      	cmp	r0, #0
 80075fa:	f43f ae40 	beq.w	800727e <_strtod_l+0x43e>
 80075fe:	464a      	mov	r2, r9
 8007600:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007602:	9805      	ldr	r0, [sp, #20]
 8007604:	f7ff fa32 	bl	8006a6c <__mdiff>
 8007608:	4604      	mov	r4, r0
 800760a:	2800      	cmp	r0, #0
 800760c:	f43f ae37 	beq.w	800727e <_strtod_l+0x43e>
 8007610:	68c3      	ldr	r3, [r0, #12]
 8007612:	4641      	mov	r1, r8
 8007614:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007616:	2300      	movs	r3, #0
 8007618:	60c3      	str	r3, [r0, #12]
 800761a:	f7ff fa0b 	bl	8006a34 <__mcmp>
 800761e:	2800      	cmp	r0, #0
 8007620:	da3d      	bge.n	800769e <_strtod_l+0x85e>
 8007622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007624:	ea53 030a 	orrs.w	r3, r3, sl
 8007628:	d163      	bne.n	80076f2 <_strtod_l+0x8b2>
 800762a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800762e:	2b00      	cmp	r3, #0
 8007630:	d15f      	bne.n	80076f2 <_strtod_l+0x8b2>
 8007632:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007636:	0d1b      	lsrs	r3, r3, #20
 8007638:	051b      	lsls	r3, r3, #20
 800763a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800763e:	d958      	bls.n	80076f2 <_strtod_l+0x8b2>
 8007640:	6963      	ldr	r3, [r4, #20]
 8007642:	b913      	cbnz	r3, 800764a <_strtod_l+0x80a>
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	2b01      	cmp	r3, #1
 8007648:	dd53      	ble.n	80076f2 <_strtod_l+0x8b2>
 800764a:	4621      	mov	r1, r4
 800764c:	2201      	movs	r2, #1
 800764e:	9805      	ldr	r0, [sp, #20]
 8007650:	f7ff f984 	bl	800695c <__lshift>
 8007654:	4641      	mov	r1, r8
 8007656:	4604      	mov	r4, r0
 8007658:	f7ff f9ec 	bl	8006a34 <__mcmp>
 800765c:	2800      	cmp	r0, #0
 800765e:	dd48      	ble.n	80076f2 <_strtod_l+0x8b2>
 8007660:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007664:	9a08      	ldr	r2, [sp, #32]
 8007666:	0d1b      	lsrs	r3, r3, #20
 8007668:	051b      	lsls	r3, r3, #20
 800766a:	2a00      	cmp	r2, #0
 800766c:	d062      	beq.n	8007734 <_strtod_l+0x8f4>
 800766e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007672:	d85f      	bhi.n	8007734 <_strtod_l+0x8f4>
 8007674:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007678:	f67f ae94 	bls.w	80073a4 <_strtod_l+0x564>
 800767c:	4650      	mov	r0, sl
 800767e:	4659      	mov	r1, fp
 8007680:	4ba3      	ldr	r3, [pc, #652]	@ (8007910 <_strtod_l+0xad0>)
 8007682:	2200      	movs	r2, #0
 8007684:	f7f8 ff28 	bl	80004d8 <__aeabi_dmul>
 8007688:	4ba2      	ldr	r3, [pc, #648]	@ (8007914 <_strtod_l+0xad4>)
 800768a:	4682      	mov	sl, r0
 800768c:	400b      	ands	r3, r1
 800768e:	468b      	mov	fp, r1
 8007690:	2b00      	cmp	r3, #0
 8007692:	f47f adff 	bne.w	8007294 <_strtod_l+0x454>
 8007696:	2322      	movs	r3, #34	@ 0x22
 8007698:	9a05      	ldr	r2, [sp, #20]
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	e5fa      	b.n	8007294 <_strtod_l+0x454>
 800769e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80076a2:	d165      	bne.n	8007770 <_strtod_l+0x930>
 80076a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80076a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076aa:	b35a      	cbz	r2, 8007704 <_strtod_l+0x8c4>
 80076ac:	4a9a      	ldr	r2, [pc, #616]	@ (8007918 <_strtod_l+0xad8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d12b      	bne.n	800770a <_strtod_l+0x8ca>
 80076b2:	9b08      	ldr	r3, [sp, #32]
 80076b4:	4651      	mov	r1, sl
 80076b6:	b303      	cbz	r3, 80076fa <_strtod_l+0x8ba>
 80076b8:	465a      	mov	r2, fp
 80076ba:	4b96      	ldr	r3, [pc, #600]	@ (8007914 <_strtod_l+0xad4>)
 80076bc:	4013      	ands	r3, r2
 80076be:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	d81b      	bhi.n	8007700 <_strtod_l+0x8c0>
 80076c8:	0d1b      	lsrs	r3, r3, #20
 80076ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80076ce:	fa02 f303 	lsl.w	r3, r2, r3
 80076d2:	4299      	cmp	r1, r3
 80076d4:	d119      	bne.n	800770a <_strtod_l+0x8ca>
 80076d6:	4b91      	ldr	r3, [pc, #580]	@ (800791c <_strtod_l+0xadc>)
 80076d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076da:	429a      	cmp	r2, r3
 80076dc:	d102      	bne.n	80076e4 <_strtod_l+0x8a4>
 80076de:	3101      	adds	r1, #1
 80076e0:	f43f adcd 	beq.w	800727e <_strtod_l+0x43e>
 80076e4:	f04f 0a00 	mov.w	sl, #0
 80076e8:	4b8a      	ldr	r3, [pc, #552]	@ (8007914 <_strtod_l+0xad4>)
 80076ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076ec:	401a      	ands	r2, r3
 80076ee:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1c1      	bne.n	800767c <_strtod_l+0x83c>
 80076f8:	e5cc      	b.n	8007294 <_strtod_l+0x454>
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295
 80076fe:	e7e8      	b.n	80076d2 <_strtod_l+0x892>
 8007700:	4613      	mov	r3, r2
 8007702:	e7e6      	b.n	80076d2 <_strtod_l+0x892>
 8007704:	ea53 030a 	orrs.w	r3, r3, sl
 8007708:	d0aa      	beq.n	8007660 <_strtod_l+0x820>
 800770a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800770c:	b1db      	cbz	r3, 8007746 <_strtod_l+0x906>
 800770e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007710:	4213      	tst	r3, r2
 8007712:	d0ee      	beq.n	80076f2 <_strtod_l+0x8b2>
 8007714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007716:	4650      	mov	r0, sl
 8007718:	4659      	mov	r1, fp
 800771a:	9a08      	ldr	r2, [sp, #32]
 800771c:	b1bb      	cbz	r3, 800774e <_strtod_l+0x90e>
 800771e:	f7ff fb6d 	bl	8006dfc <sulp>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800772a:	f7f8 fd1f 	bl	800016c <__adddf3>
 800772e:	4682      	mov	sl, r0
 8007730:	468b      	mov	fp, r1
 8007732:	e7de      	b.n	80076f2 <_strtod_l+0x8b2>
 8007734:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007738:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800773c:	f04f 3aff 	mov.w	sl, #4294967295
 8007740:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007744:	e7d5      	b.n	80076f2 <_strtod_l+0x8b2>
 8007746:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007748:	ea13 0f0a 	tst.w	r3, sl
 800774c:	e7e1      	b.n	8007712 <_strtod_l+0x8d2>
 800774e:	f7ff fb55 	bl	8006dfc <sulp>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800775a:	f7f8 fd05 	bl	8000168 <__aeabi_dsub>
 800775e:	2200      	movs	r2, #0
 8007760:	2300      	movs	r3, #0
 8007762:	4682      	mov	sl, r0
 8007764:	468b      	mov	fp, r1
 8007766:	f7f9 f91f 	bl	80009a8 <__aeabi_dcmpeq>
 800776a:	2800      	cmp	r0, #0
 800776c:	d0c1      	beq.n	80076f2 <_strtod_l+0x8b2>
 800776e:	e619      	b.n	80073a4 <_strtod_l+0x564>
 8007770:	4641      	mov	r1, r8
 8007772:	4620      	mov	r0, r4
 8007774:	f7ff face 	bl	8006d14 <__ratio>
 8007778:	2200      	movs	r2, #0
 800777a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800777e:	4606      	mov	r6, r0
 8007780:	460f      	mov	r7, r1
 8007782:	f7f9 f925 	bl	80009d0 <__aeabi_dcmple>
 8007786:	2800      	cmp	r0, #0
 8007788:	d06d      	beq.n	8007866 <_strtod_l+0xa26>
 800778a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d178      	bne.n	8007882 <_strtod_l+0xa42>
 8007790:	f1ba 0f00 	cmp.w	sl, #0
 8007794:	d156      	bne.n	8007844 <_strtod_l+0xa04>
 8007796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800779c:	2b00      	cmp	r3, #0
 800779e:	d158      	bne.n	8007852 <_strtod_l+0xa12>
 80077a0:	2200      	movs	r2, #0
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	4b5e      	ldr	r3, [pc, #376]	@ (8007920 <_strtod_l+0xae0>)
 80077a8:	f7f9 f908 	bl	80009bc <__aeabi_dcmplt>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d157      	bne.n	8007860 <_strtod_l+0xa20>
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	2200      	movs	r2, #0
 80077b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007924 <_strtod_l+0xae4>)
 80077b8:	f7f8 fe8e 	bl	80004d8 <__aeabi_dmul>
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80077c4:	9606      	str	r6, [sp, #24]
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077cc:	4d51      	ldr	r5, [pc, #324]	@ (8007914 <_strtod_l+0xad4>)
 80077ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80077d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077d4:	401d      	ands	r5, r3
 80077d6:	4b54      	ldr	r3, [pc, #336]	@ (8007928 <_strtod_l+0xae8>)
 80077d8:	429d      	cmp	r5, r3
 80077da:	f040 80ab 	bne.w	8007934 <_strtod_l+0xaf4>
 80077de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077e0:	4650      	mov	r0, sl
 80077e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80077e6:	4659      	mov	r1, fp
 80077e8:	f7ff f9d4 	bl	8006b94 <__ulp>
 80077ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077f0:	f7f8 fe72 	bl	80004d8 <__aeabi_dmul>
 80077f4:	4652      	mov	r2, sl
 80077f6:	465b      	mov	r3, fp
 80077f8:	f7f8 fcb8 	bl	800016c <__adddf3>
 80077fc:	460b      	mov	r3, r1
 80077fe:	4945      	ldr	r1, [pc, #276]	@ (8007914 <_strtod_l+0xad4>)
 8007800:	4a4a      	ldr	r2, [pc, #296]	@ (800792c <_strtod_l+0xaec>)
 8007802:	4019      	ands	r1, r3
 8007804:	4291      	cmp	r1, r2
 8007806:	4682      	mov	sl, r0
 8007808:	d942      	bls.n	8007890 <_strtod_l+0xa50>
 800780a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800780c:	4b43      	ldr	r3, [pc, #268]	@ (800791c <_strtod_l+0xadc>)
 800780e:	429a      	cmp	r2, r3
 8007810:	d103      	bne.n	800781a <_strtod_l+0x9da>
 8007812:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007814:	3301      	adds	r3, #1
 8007816:	f43f ad32 	beq.w	800727e <_strtod_l+0x43e>
 800781a:	f04f 3aff 	mov.w	sl, #4294967295
 800781e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800791c <_strtod_l+0xadc>
 8007822:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007824:	9805      	ldr	r0, [sp, #20]
 8007826:	f7fe fe89 	bl	800653c <_Bfree>
 800782a:	4649      	mov	r1, r9
 800782c:	9805      	ldr	r0, [sp, #20]
 800782e:	f7fe fe85 	bl	800653c <_Bfree>
 8007832:	4641      	mov	r1, r8
 8007834:	9805      	ldr	r0, [sp, #20]
 8007836:	f7fe fe81 	bl	800653c <_Bfree>
 800783a:	4621      	mov	r1, r4
 800783c:	9805      	ldr	r0, [sp, #20]
 800783e:	f7fe fe7d 	bl	800653c <_Bfree>
 8007842:	e61c      	b.n	800747e <_strtod_l+0x63e>
 8007844:	f1ba 0f01 	cmp.w	sl, #1
 8007848:	d103      	bne.n	8007852 <_strtod_l+0xa12>
 800784a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800784c:	2b00      	cmp	r3, #0
 800784e:	f43f ada9 	beq.w	80073a4 <_strtod_l+0x564>
 8007852:	2200      	movs	r2, #0
 8007854:	4b36      	ldr	r3, [pc, #216]	@ (8007930 <_strtod_l+0xaf0>)
 8007856:	2600      	movs	r6, #0
 8007858:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800785c:	4f30      	ldr	r7, [pc, #192]	@ (8007920 <_strtod_l+0xae0>)
 800785e:	e7b3      	b.n	80077c8 <_strtod_l+0x988>
 8007860:	2600      	movs	r6, #0
 8007862:	4f30      	ldr	r7, [pc, #192]	@ (8007924 <_strtod_l+0xae4>)
 8007864:	e7ac      	b.n	80077c0 <_strtod_l+0x980>
 8007866:	4630      	mov	r0, r6
 8007868:	4639      	mov	r1, r7
 800786a:	4b2e      	ldr	r3, [pc, #184]	@ (8007924 <_strtod_l+0xae4>)
 800786c:	2200      	movs	r2, #0
 800786e:	f7f8 fe33 	bl	80004d8 <__aeabi_dmul>
 8007872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007874:	4606      	mov	r6, r0
 8007876:	460f      	mov	r7, r1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0a1      	beq.n	80077c0 <_strtod_l+0x980>
 800787c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007880:	e7a2      	b.n	80077c8 <_strtod_l+0x988>
 8007882:	2200      	movs	r2, #0
 8007884:	4b26      	ldr	r3, [pc, #152]	@ (8007920 <_strtod_l+0xae0>)
 8007886:	4616      	mov	r6, r2
 8007888:	461f      	mov	r7, r3
 800788a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800788e:	e79b      	b.n	80077c8 <_strtod_l+0x988>
 8007890:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007894:	9b08      	ldr	r3, [sp, #32]
 8007896:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1c1      	bne.n	8007822 <_strtod_l+0x9e2>
 800789e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078a2:	0d1b      	lsrs	r3, r3, #20
 80078a4:	051b      	lsls	r3, r3, #20
 80078a6:	429d      	cmp	r5, r3
 80078a8:	d1bb      	bne.n	8007822 <_strtod_l+0x9e2>
 80078aa:	4630      	mov	r0, r6
 80078ac:	4639      	mov	r1, r7
 80078ae:	f7f9 f9d1 	bl	8000c54 <__aeabi_d2lz>
 80078b2:	f7f8 fde3 	bl	800047c <__aeabi_l2d>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4630      	mov	r0, r6
 80078bc:	4639      	mov	r1, r7
 80078be:	f7f8 fc53 	bl	8000168 <__aeabi_dsub>
 80078c2:	460b      	mov	r3, r1
 80078c4:	4602      	mov	r2, r0
 80078c6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80078ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80078ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d0:	ea46 060a 	orr.w	r6, r6, sl
 80078d4:	431e      	orrs	r6, r3
 80078d6:	d06a      	beq.n	80079ae <_strtod_l+0xb6e>
 80078d8:	a309      	add	r3, pc, #36	@ (adr r3, 8007900 <_strtod_l+0xac0>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f9 f86d 	bl	80009bc <__aeabi_dcmplt>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	f47f acd6 	bne.w	8007294 <_strtod_l+0x454>
 80078e8:	a307      	add	r3, pc, #28	@ (adr r3, 8007908 <_strtod_l+0xac8>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078f2:	f7f9 f881 	bl	80009f8 <__aeabi_dcmpgt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d093      	beq.n	8007822 <_strtod_l+0x9e2>
 80078fa:	e4cb      	b.n	8007294 <_strtod_l+0x454>
 80078fc:	f3af 8000 	nop.w
 8007900:	94a03595 	.word	0x94a03595
 8007904:	3fdfffff 	.word	0x3fdfffff
 8007908:	35afe535 	.word	0x35afe535
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	39500000 	.word	0x39500000
 8007914:	7ff00000 	.word	0x7ff00000
 8007918:	000fffff 	.word	0x000fffff
 800791c:	7fefffff 	.word	0x7fefffff
 8007920:	3ff00000 	.word	0x3ff00000
 8007924:	3fe00000 	.word	0x3fe00000
 8007928:	7fe00000 	.word	0x7fe00000
 800792c:	7c9fffff 	.word	0x7c9fffff
 8007930:	bff00000 	.word	0xbff00000
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	b323      	cbz	r3, 8007982 <_strtod_l+0xb42>
 8007938:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800793c:	d821      	bhi.n	8007982 <_strtod_l+0xb42>
 800793e:	a328      	add	r3, pc, #160	@ (adr r3, 80079e0 <_strtod_l+0xba0>)
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	f7f9 f842 	bl	80009d0 <__aeabi_dcmple>
 800794c:	b1a0      	cbz	r0, 8007978 <_strtod_l+0xb38>
 800794e:	4639      	mov	r1, r7
 8007950:	4630      	mov	r0, r6
 8007952:	f7f9 f899 	bl	8000a88 <__aeabi_d2uiz>
 8007956:	2801      	cmp	r0, #1
 8007958:	bf38      	it	cc
 800795a:	2001      	movcc	r0, #1
 800795c:	f7f8 fd42 	bl	80003e4 <__aeabi_ui2d>
 8007960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007962:	4606      	mov	r6, r0
 8007964:	460f      	mov	r7, r1
 8007966:	b9fb      	cbnz	r3, 80079a8 <_strtod_l+0xb68>
 8007968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800796c:	9014      	str	r0, [sp, #80]	@ 0x50
 800796e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007970:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007974:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007978:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800797a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800797e:	1b5b      	subs	r3, r3, r5
 8007980:	9311      	str	r3, [sp, #68]	@ 0x44
 8007982:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007986:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800798a:	f7ff f903 	bl	8006b94 <__ulp>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4650      	mov	r0, sl
 8007994:	4659      	mov	r1, fp
 8007996:	f7f8 fd9f 	bl	80004d8 <__aeabi_dmul>
 800799a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800799e:	f7f8 fbe5 	bl	800016c <__adddf3>
 80079a2:	4682      	mov	sl, r0
 80079a4:	468b      	mov	fp, r1
 80079a6:	e775      	b.n	8007894 <_strtod_l+0xa54>
 80079a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80079ac:	e7e0      	b.n	8007970 <_strtod_l+0xb30>
 80079ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80079e8 <_strtod_l+0xba8>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f9 f802 	bl	80009bc <__aeabi_dcmplt>
 80079b8:	e79d      	b.n	80078f6 <_strtod_l+0xab6>
 80079ba:	2300      	movs	r3, #0
 80079bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80079be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079c0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	f7ff ba79 	b.w	8006eba <_strtod_l+0x7a>
 80079c8:	2a65      	cmp	r2, #101	@ 0x65
 80079ca:	f43f ab72 	beq.w	80070b2 <_strtod_l+0x272>
 80079ce:	2a45      	cmp	r2, #69	@ 0x45
 80079d0:	f43f ab6f 	beq.w	80070b2 <_strtod_l+0x272>
 80079d4:	2301      	movs	r3, #1
 80079d6:	f7ff bbaa 	b.w	800712e <_strtod_l+0x2ee>
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	ffc00000 	.word	0xffc00000
 80079e4:	41dfffff 	.word	0x41dfffff
 80079e8:	94a03595 	.word	0x94a03595
 80079ec:	3fcfffff 	.word	0x3fcfffff

080079f0 <_strtod_r>:
 80079f0:	4b01      	ldr	r3, [pc, #4]	@ (80079f8 <_strtod_r+0x8>)
 80079f2:	f7ff ba25 	b.w	8006e40 <_strtod_l>
 80079f6:	bf00      	nop
 80079f8:	20000068 	.word	0x20000068

080079fc <_strtol_l.isra.0>:
 80079fc:	2b24      	cmp	r3, #36	@ 0x24
 80079fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a02:	4686      	mov	lr, r0
 8007a04:	4690      	mov	r8, r2
 8007a06:	d801      	bhi.n	8007a0c <_strtol_l.isra.0+0x10>
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <_strtol_l.isra.0+0x1e>
 8007a0c:	f7fd fdac 	bl	8005568 <__errno>
 8007a10:	2316      	movs	r3, #22
 8007a12:	6003      	str	r3, [r0, #0]
 8007a14:	2000      	movs	r0, #0
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	4833      	ldr	r0, [pc, #204]	@ (8007aec <_strtol_l.isra.0+0xf0>)
 8007a1e:	462a      	mov	r2, r5
 8007a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a24:	5d06      	ldrb	r6, [r0, r4]
 8007a26:	f016 0608 	ands.w	r6, r6, #8
 8007a2a:	d1f8      	bne.n	8007a1e <_strtol_l.isra.0+0x22>
 8007a2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a2e:	d110      	bne.n	8007a52 <_strtol_l.isra.0+0x56>
 8007a30:	2601      	movs	r6, #1
 8007a32:	782c      	ldrb	r4, [r5, #0]
 8007a34:	1c95      	adds	r5, r2, #2
 8007a36:	f033 0210 	bics.w	r2, r3, #16
 8007a3a:	d115      	bne.n	8007a68 <_strtol_l.isra.0+0x6c>
 8007a3c:	2c30      	cmp	r4, #48	@ 0x30
 8007a3e:	d10d      	bne.n	8007a5c <_strtol_l.isra.0+0x60>
 8007a40:	782a      	ldrb	r2, [r5, #0]
 8007a42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007a46:	2a58      	cmp	r2, #88	@ 0x58
 8007a48:	d108      	bne.n	8007a5c <_strtol_l.isra.0+0x60>
 8007a4a:	786c      	ldrb	r4, [r5, #1]
 8007a4c:	3502      	adds	r5, #2
 8007a4e:	2310      	movs	r3, #16
 8007a50:	e00a      	b.n	8007a68 <_strtol_l.isra.0+0x6c>
 8007a52:	2c2b      	cmp	r4, #43	@ 0x2b
 8007a54:	bf04      	itt	eq
 8007a56:	782c      	ldrbeq	r4, [r5, #0]
 8007a58:	1c95      	addeq	r5, r2, #2
 8007a5a:	e7ec      	b.n	8007a36 <_strtol_l.isra.0+0x3a>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f6      	bne.n	8007a4e <_strtol_l.isra.0+0x52>
 8007a60:	2c30      	cmp	r4, #48	@ 0x30
 8007a62:	bf14      	ite	ne
 8007a64:	230a      	movne	r3, #10
 8007a66:	2308      	moveq	r3, #8
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007a6e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a72:	fbbc f9f3 	udiv	r9, ip, r3
 8007a76:	4610      	mov	r0, r2
 8007a78:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007a80:	2f09      	cmp	r7, #9
 8007a82:	d80f      	bhi.n	8007aa4 <_strtol_l.isra.0+0xa8>
 8007a84:	463c      	mov	r4, r7
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	dd1b      	ble.n	8007ac2 <_strtol_l.isra.0+0xc6>
 8007a8a:	1c57      	adds	r7, r2, #1
 8007a8c:	d007      	beq.n	8007a9e <_strtol_l.isra.0+0xa2>
 8007a8e:	4581      	cmp	r9, r0
 8007a90:	d314      	bcc.n	8007abc <_strtol_l.isra.0+0xc0>
 8007a92:	d101      	bne.n	8007a98 <_strtol_l.isra.0+0x9c>
 8007a94:	45a2      	cmp	sl, r4
 8007a96:	db11      	blt.n	8007abc <_strtol_l.isra.0+0xc0>
 8007a98:	2201      	movs	r2, #1
 8007a9a:	fb00 4003 	mla	r0, r0, r3, r4
 8007a9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007aa2:	e7eb      	b.n	8007a7c <_strtol_l.isra.0+0x80>
 8007aa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007aa8:	2f19      	cmp	r7, #25
 8007aaa:	d801      	bhi.n	8007ab0 <_strtol_l.isra.0+0xb4>
 8007aac:	3c37      	subs	r4, #55	@ 0x37
 8007aae:	e7ea      	b.n	8007a86 <_strtol_l.isra.0+0x8a>
 8007ab0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ab4:	2f19      	cmp	r7, #25
 8007ab6:	d804      	bhi.n	8007ac2 <_strtol_l.isra.0+0xc6>
 8007ab8:	3c57      	subs	r4, #87	@ 0x57
 8007aba:	e7e4      	b.n	8007a86 <_strtol_l.isra.0+0x8a>
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	e7ed      	b.n	8007a9e <_strtol_l.isra.0+0xa2>
 8007ac2:	1c53      	adds	r3, r2, #1
 8007ac4:	d108      	bne.n	8007ad8 <_strtol_l.isra.0+0xdc>
 8007ac6:	2322      	movs	r3, #34	@ 0x22
 8007ac8:	4660      	mov	r0, ip
 8007aca:	f8ce 3000 	str.w	r3, [lr]
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	d0a0      	beq.n	8007a16 <_strtol_l.isra.0+0x1a>
 8007ad4:	1e69      	subs	r1, r5, #1
 8007ad6:	e006      	b.n	8007ae6 <_strtol_l.isra.0+0xea>
 8007ad8:	b106      	cbz	r6, 8007adc <_strtol_l.isra.0+0xe0>
 8007ada:	4240      	negs	r0, r0
 8007adc:	f1b8 0f00 	cmp.w	r8, #0
 8007ae0:	d099      	beq.n	8007a16 <_strtol_l.isra.0+0x1a>
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d1f6      	bne.n	8007ad4 <_strtol_l.isra.0+0xd8>
 8007ae6:	f8c8 1000 	str.w	r1, [r8]
 8007aea:	e794      	b.n	8007a16 <_strtol_l.isra.0+0x1a>
 8007aec:	080097a1 	.word	0x080097a1

08007af0 <_strtol_r>:
 8007af0:	f7ff bf84 	b.w	80079fc <_strtol_l.isra.0>

08007af4 <__ssputs_r>:
 8007af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af8:	461f      	mov	r7, r3
 8007afa:	688e      	ldr	r6, [r1, #8]
 8007afc:	4682      	mov	sl, r0
 8007afe:	42be      	cmp	r6, r7
 8007b00:	460c      	mov	r4, r1
 8007b02:	4690      	mov	r8, r2
 8007b04:	680b      	ldr	r3, [r1, #0]
 8007b06:	d82d      	bhi.n	8007b64 <__ssputs_r+0x70>
 8007b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b10:	d026      	beq.n	8007b60 <__ssputs_r+0x6c>
 8007b12:	6965      	ldr	r5, [r4, #20]
 8007b14:	6909      	ldr	r1, [r1, #16]
 8007b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b1a:	eba3 0901 	sub.w	r9, r3, r1
 8007b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b22:	1c7b      	adds	r3, r7, #1
 8007b24:	444b      	add	r3, r9
 8007b26:	106d      	asrs	r5, r5, #1
 8007b28:	429d      	cmp	r5, r3
 8007b2a:	bf38      	it	cc
 8007b2c:	461d      	movcc	r5, r3
 8007b2e:	0553      	lsls	r3, r2, #21
 8007b30:	d527      	bpl.n	8007b82 <__ssputs_r+0x8e>
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7fe fc36 	bl	80063a4 <_malloc_r>
 8007b38:	4606      	mov	r6, r0
 8007b3a:	b360      	cbz	r0, 8007b96 <__ssputs_r+0xa2>
 8007b3c:	464a      	mov	r2, r9
 8007b3e:	6921      	ldr	r1, [r4, #16]
 8007b40:	f7fd fd4d 	bl	80055de <memcpy>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	6126      	str	r6, [r4, #16]
 8007b52:	444e      	add	r6, r9
 8007b54:	6026      	str	r6, [r4, #0]
 8007b56:	463e      	mov	r6, r7
 8007b58:	6165      	str	r5, [r4, #20]
 8007b5a:	eba5 0509 	sub.w	r5, r5, r9
 8007b5e:	60a5      	str	r5, [r4, #8]
 8007b60:	42be      	cmp	r6, r7
 8007b62:	d900      	bls.n	8007b66 <__ssputs_r+0x72>
 8007b64:	463e      	mov	r6, r7
 8007b66:	4632      	mov	r2, r6
 8007b68:	4641      	mov	r1, r8
 8007b6a:	6820      	ldr	r0, [r4, #0]
 8007b6c:	f000 feee 	bl	800894c <memmove>
 8007b70:	2000      	movs	r0, #0
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	1b9b      	subs	r3, r3, r6
 8007b76:	60a3      	str	r3, [r4, #8]
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	4433      	add	r3, r6
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b82:	462a      	mov	r2, r5
 8007b84:	f001 fac3 	bl	800910e <_realloc_r>
 8007b88:	4606      	mov	r6, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d1e0      	bne.n	8007b50 <__ssputs_r+0x5c>
 8007b8e:	4650      	mov	r0, sl
 8007b90:	6921      	ldr	r1, [r4, #16]
 8007b92:	f7fe fb95 	bl	80062c0 <_free_r>
 8007b96:	230c      	movs	r3, #12
 8007b98:	f8ca 3000 	str.w	r3, [sl]
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	e7e9      	b.n	8007b7e <__ssputs_r+0x8a>
	...

08007bac <_svfiprintf_r>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	4698      	mov	r8, r3
 8007bb2:	898b      	ldrh	r3, [r1, #12]
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	061b      	lsls	r3, r3, #24
 8007bb8:	460d      	mov	r5, r1
 8007bba:	4614      	mov	r4, r2
 8007bbc:	b09d      	sub	sp, #116	@ 0x74
 8007bbe:	d510      	bpl.n	8007be2 <_svfiprintf_r+0x36>
 8007bc0:	690b      	ldr	r3, [r1, #16]
 8007bc2:	b973      	cbnz	r3, 8007be2 <_svfiprintf_r+0x36>
 8007bc4:	2140      	movs	r1, #64	@ 0x40
 8007bc6:	f7fe fbed 	bl	80063a4 <_malloc_r>
 8007bca:	6028      	str	r0, [r5, #0]
 8007bcc:	6128      	str	r0, [r5, #16]
 8007bce:	b930      	cbnz	r0, 8007bde <_svfiprintf_r+0x32>
 8007bd0:	230c      	movs	r3, #12
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b01d      	add	sp, #116	@ 0x74
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	2340      	movs	r3, #64	@ 0x40
 8007be0:	616b      	str	r3, [r5, #20]
 8007be2:	2300      	movs	r3, #0
 8007be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be6:	2320      	movs	r3, #32
 8007be8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bec:	2330      	movs	r3, #48	@ 0x30
 8007bee:	f04f 0901 	mov.w	r9, #1
 8007bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bf6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007d90 <_svfiprintf_r+0x1e4>
 8007bfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bfe:	4623      	mov	r3, r4
 8007c00:	469a      	mov	sl, r3
 8007c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c06:	b10a      	cbz	r2, 8007c0c <_svfiprintf_r+0x60>
 8007c08:	2a25      	cmp	r2, #37	@ 0x25
 8007c0a:	d1f9      	bne.n	8007c00 <_svfiprintf_r+0x54>
 8007c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c10:	d00b      	beq.n	8007c2a <_svfiprintf_r+0x7e>
 8007c12:	465b      	mov	r3, fp
 8007c14:	4622      	mov	r2, r4
 8007c16:	4629      	mov	r1, r5
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7ff ff6b 	bl	8007af4 <__ssputs_r>
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f000 80a7 	beq.w	8007d72 <_svfiprintf_r+0x1c6>
 8007c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c26:	445a      	add	r2, fp
 8007c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 809f 	beq.w	8007d72 <_svfiprintf_r+0x1c6>
 8007c34:	2300      	movs	r3, #0
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c3e:	f10a 0a01 	add.w	sl, sl, #1
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	9307      	str	r3, [sp, #28]
 8007c46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c4c:	4654      	mov	r4, sl
 8007c4e:	2205      	movs	r2, #5
 8007c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c54:	484e      	ldr	r0, [pc, #312]	@ (8007d90 <_svfiprintf_r+0x1e4>)
 8007c56:	f7fd fcb4 	bl	80055c2 <memchr>
 8007c5a:	9a04      	ldr	r2, [sp, #16]
 8007c5c:	b9d8      	cbnz	r0, 8007c96 <_svfiprintf_r+0xea>
 8007c5e:	06d0      	lsls	r0, r2, #27
 8007c60:	bf44      	itt	mi
 8007c62:	2320      	movmi	r3, #32
 8007c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c68:	0711      	lsls	r1, r2, #28
 8007c6a:	bf44      	itt	mi
 8007c6c:	232b      	movmi	r3, #43	@ 0x2b
 8007c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c72:	f89a 3000 	ldrb.w	r3, [sl]
 8007c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c78:	d015      	beq.n	8007ca6 <_svfiprintf_r+0xfa>
 8007c7a:	4654      	mov	r4, sl
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	f04f 0c0a 	mov.w	ip, #10
 8007c82:	9a07      	ldr	r2, [sp, #28]
 8007c84:	4621      	mov	r1, r4
 8007c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c8a:	3b30      	subs	r3, #48	@ 0x30
 8007c8c:	2b09      	cmp	r3, #9
 8007c8e:	d94b      	bls.n	8007d28 <_svfiprintf_r+0x17c>
 8007c90:	b1b0      	cbz	r0, 8007cc0 <_svfiprintf_r+0x114>
 8007c92:	9207      	str	r2, [sp, #28]
 8007c94:	e014      	b.n	8007cc0 <_svfiprintf_r+0x114>
 8007c96:	eba0 0308 	sub.w	r3, r0, r8
 8007c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	46a2      	mov	sl, r4
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	e7d2      	b.n	8007c4c <_svfiprintf_r+0xa0>
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	1d19      	adds	r1, r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	9103      	str	r1, [sp, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfbb      	ittet	lt
 8007cb2:	425b      	neglt	r3, r3
 8007cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cb8:	9307      	strge	r3, [sp, #28]
 8007cba:	9307      	strlt	r3, [sp, #28]
 8007cbc:	bfb8      	it	lt
 8007cbe:	9204      	strlt	r2, [sp, #16]
 8007cc0:	7823      	ldrb	r3, [r4, #0]
 8007cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cc4:	d10a      	bne.n	8007cdc <_svfiprintf_r+0x130>
 8007cc6:	7863      	ldrb	r3, [r4, #1]
 8007cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cca:	d132      	bne.n	8007d32 <_svfiprintf_r+0x186>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	3402      	adds	r4, #2
 8007cd0:	1d1a      	adds	r2, r3, #4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	9203      	str	r2, [sp, #12]
 8007cd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007d94 <_svfiprintf_r+0x1e8>
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	7821      	ldrb	r1, [r4, #0]
 8007ce6:	f7fd fc6c 	bl	80055c2 <memchr>
 8007cea:	b138      	cbz	r0, 8007cfc <_svfiprintf_r+0x150>
 8007cec:	2240      	movs	r2, #64	@ 0x40
 8007cee:	9b04      	ldr	r3, [sp, #16]
 8007cf0:	eba0 000a 	sub.w	r0, r0, sl
 8007cf4:	4082      	lsls	r2, r0
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	3401      	adds	r4, #1
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d00:	2206      	movs	r2, #6
 8007d02:	4825      	ldr	r0, [pc, #148]	@ (8007d98 <_svfiprintf_r+0x1ec>)
 8007d04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d08:	f7fd fc5b 	bl	80055c2 <memchr>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d036      	beq.n	8007d7e <_svfiprintf_r+0x1d2>
 8007d10:	4b22      	ldr	r3, [pc, #136]	@ (8007d9c <_svfiprintf_r+0x1f0>)
 8007d12:	bb1b      	cbnz	r3, 8007d5c <_svfiprintf_r+0x1b0>
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	3307      	adds	r3, #7
 8007d18:	f023 0307 	bic.w	r3, r3, #7
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	9303      	str	r3, [sp, #12]
 8007d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d22:	4433      	add	r3, r6
 8007d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d26:	e76a      	b.n	8007bfe <_svfiprintf_r+0x52>
 8007d28:	460c      	mov	r4, r1
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d30:	e7a8      	b.n	8007c84 <_svfiprintf_r+0xd8>
 8007d32:	2300      	movs	r3, #0
 8007d34:	f04f 0c0a 	mov.w	ip, #10
 8007d38:	4619      	mov	r1, r3
 8007d3a:	3401      	adds	r4, #1
 8007d3c:	9305      	str	r3, [sp, #20]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d44:	3a30      	subs	r2, #48	@ 0x30
 8007d46:	2a09      	cmp	r2, #9
 8007d48:	d903      	bls.n	8007d52 <_svfiprintf_r+0x1a6>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0c6      	beq.n	8007cdc <_svfiprintf_r+0x130>
 8007d4e:	9105      	str	r1, [sp, #20]
 8007d50:	e7c4      	b.n	8007cdc <_svfiprintf_r+0x130>
 8007d52:	4604      	mov	r4, r0
 8007d54:	2301      	movs	r3, #1
 8007d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d5a:	e7f0      	b.n	8007d3e <_svfiprintf_r+0x192>
 8007d5c:	ab03      	add	r3, sp, #12
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	462a      	mov	r2, r5
 8007d62:	4638      	mov	r0, r7
 8007d64:	4b0e      	ldr	r3, [pc, #56]	@ (8007da0 <_svfiprintf_r+0x1f4>)
 8007d66:	a904      	add	r1, sp, #16
 8007d68:	f7fc fb8c 	bl	8004484 <_printf_float>
 8007d6c:	1c42      	adds	r2, r0, #1
 8007d6e:	4606      	mov	r6, r0
 8007d70:	d1d6      	bne.n	8007d20 <_svfiprintf_r+0x174>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	065b      	lsls	r3, r3, #25
 8007d76:	f53f af2d 	bmi.w	8007bd4 <_svfiprintf_r+0x28>
 8007d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d7c:	e72c      	b.n	8007bd8 <_svfiprintf_r+0x2c>
 8007d7e:	ab03      	add	r3, sp, #12
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	462a      	mov	r2, r5
 8007d84:	4638      	mov	r0, r7
 8007d86:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <_svfiprintf_r+0x1f4>)
 8007d88:	a904      	add	r1, sp, #16
 8007d8a:	f7fc fe19 	bl	80049c0 <_printf_i>
 8007d8e:	e7ed      	b.n	8007d6c <_svfiprintf_r+0x1c0>
 8007d90:	0800957d 	.word	0x0800957d
 8007d94:	08009583 	.word	0x08009583
 8007d98:	08009587 	.word	0x08009587
 8007d9c:	08004485 	.word	0x08004485
 8007da0:	08007af5 	.word	0x08007af5

08007da4 <_sungetc_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	1c4b      	adds	r3, r1, #1
 8007da8:	4614      	mov	r4, r2
 8007daa:	d103      	bne.n	8007db4 <_sungetc_r+0x10>
 8007dac:	f04f 35ff 	mov.w	r5, #4294967295
 8007db0:	4628      	mov	r0, r5
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	8993      	ldrh	r3, [r2, #12]
 8007db6:	b2cd      	uxtb	r5, r1
 8007db8:	f023 0320 	bic.w	r3, r3, #32
 8007dbc:	8193      	strh	r3, [r2, #12]
 8007dbe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dc0:	6852      	ldr	r2, [r2, #4]
 8007dc2:	b18b      	cbz	r3, 8007de8 <_sungetc_r+0x44>
 8007dc4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	dd08      	ble.n	8007ddc <_sungetc_r+0x38>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	1e5a      	subs	r2, r3, #1
 8007dce:	6022      	str	r2, [r4, #0]
 8007dd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	6063      	str	r3, [r4, #4]
 8007dda:	e7e9      	b.n	8007db0 <_sungetc_r+0xc>
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f000 fd7d 	bl	80088dc <__submore>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d0f1      	beq.n	8007dca <_sungetc_r+0x26>
 8007de6:	e7e1      	b.n	8007dac <_sungetc_r+0x8>
 8007de8:	6921      	ldr	r1, [r4, #16]
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	b151      	cbz	r1, 8007e04 <_sungetc_r+0x60>
 8007dee:	4299      	cmp	r1, r3
 8007df0:	d208      	bcs.n	8007e04 <_sungetc_r+0x60>
 8007df2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007df6:	42a9      	cmp	r1, r5
 8007df8:	d104      	bne.n	8007e04 <_sungetc_r+0x60>
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	3201      	adds	r2, #1
 8007dfe:	6023      	str	r3, [r4, #0]
 8007e00:	6062      	str	r2, [r4, #4]
 8007e02:	e7d5      	b.n	8007db0 <_sungetc_r+0xc>
 8007e04:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8007e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e0e:	2303      	movs	r3, #3
 8007e10:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007e12:	4623      	mov	r3, r4
 8007e14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e7dc      	b.n	8007dd8 <_sungetc_r+0x34>

08007e1e <__ssrefill_r>:
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	460c      	mov	r4, r1
 8007e22:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007e24:	b169      	cbz	r1, 8007e42 <__ssrefill_r+0x24>
 8007e26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	d001      	beq.n	8007e32 <__ssrefill_r+0x14>
 8007e2e:	f7fe fa47 	bl	80062c0 <_free_r>
 8007e32:	2000      	movs	r0, #0
 8007e34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e36:	6360      	str	r0, [r4, #52]	@ 0x34
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	b113      	cbz	r3, 8007e42 <__ssrefill_r+0x24>
 8007e3c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e3e:	6023      	str	r3, [r4, #0]
 8007e40:	bd10      	pop	{r4, pc}
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	6063      	str	r3, [r4, #4]
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	f043 0320 	orr.w	r3, r3, #32
 8007e54:	81a3      	strh	r3, [r4, #12]
 8007e56:	e7f3      	b.n	8007e40 <__ssrefill_r+0x22>

08007e58 <__ssvfiscanf_r>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	2100      	movs	r1, #0
 8007e60:	4606      	mov	r6, r0
 8007e62:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8007e66:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007e6a:	49ab      	ldr	r1, [pc, #684]	@ (8008118 <__ssvfiscanf_r+0x2c0>)
 8007e6c:	f10d 0804 	add.w	r8, sp, #4
 8007e70:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007e72:	49aa      	ldr	r1, [pc, #680]	@ (800811c <__ssvfiscanf_r+0x2c4>)
 8007e74:	4faa      	ldr	r7, [pc, #680]	@ (8008120 <__ssvfiscanf_r+0x2c8>)
 8007e76:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007e7a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	f892 9000 	ldrb.w	r9, [r2]
 8007e82:	f1b9 0f00 	cmp.w	r9, #0
 8007e86:	f000 8159 	beq.w	800813c <__ssvfiscanf_r+0x2e4>
 8007e8a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8007e8e:	1c55      	adds	r5, r2, #1
 8007e90:	f013 0308 	ands.w	r3, r3, #8
 8007e94:	d019      	beq.n	8007eca <__ssvfiscanf_r+0x72>
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd0f      	ble.n	8007ebc <__ssvfiscanf_r+0x64>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	5cba      	ldrb	r2, [r7, r2]
 8007ea2:	0712      	lsls	r2, r2, #28
 8007ea4:	d401      	bmi.n	8007eaa <__ssvfiscanf_r+0x52>
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	e7e9      	b.n	8007e7e <__ssvfiscanf_r+0x26>
 8007eaa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007eac:	3301      	adds	r3, #1
 8007eae:	3201      	adds	r2, #1
 8007eb0:	9245      	str	r2, [sp, #276]	@ 0x114
 8007eb2:	6862      	ldr	r2, [r4, #4]
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	3a01      	subs	r2, #1
 8007eb8:	6062      	str	r2, [r4, #4]
 8007eba:	e7ec      	b.n	8007e96 <__ssvfiscanf_r+0x3e>
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007ec2:	4798      	blx	r3
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d0e9      	beq.n	8007e9c <__ssvfiscanf_r+0x44>
 8007ec8:	e7ed      	b.n	8007ea6 <__ssvfiscanf_r+0x4e>
 8007eca:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8007ece:	f040 8086 	bne.w	8007fde <__ssvfiscanf_r+0x186>
 8007ed2:	9341      	str	r3, [sp, #260]	@ 0x104
 8007ed4:	9343      	str	r3, [sp, #268]	@ 0x10c
 8007ed6:	7853      	ldrb	r3, [r2, #1]
 8007ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eda:	bf04      	itt	eq
 8007edc:	2310      	moveq	r3, #16
 8007ede:	1c95      	addeq	r5, r2, #2
 8007ee0:	f04f 020a 	mov.w	r2, #10
 8007ee4:	bf08      	it	eq
 8007ee6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007ee8:	46aa      	mov	sl, r5
 8007eea:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007eee:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	d91e      	bls.n	8007f34 <__ssvfiscanf_r+0xdc>
 8007ef6:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8008124 <__ssvfiscanf_r+0x2cc>
 8007efa:	2203      	movs	r2, #3
 8007efc:	4658      	mov	r0, fp
 8007efe:	f7fd fb60 	bl	80055c2 <memchr>
 8007f02:	b138      	cbz	r0, 8007f14 <__ssvfiscanf_r+0xbc>
 8007f04:	2301      	movs	r3, #1
 8007f06:	4655      	mov	r5, sl
 8007f08:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007f0a:	eba0 000b 	sub.w	r0, r0, fp
 8007f0e:	4083      	lsls	r3, r0
 8007f10:	4313      	orrs	r3, r2
 8007f12:	9341      	str	r3, [sp, #260]	@ 0x104
 8007f14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f18:	2b78      	cmp	r3, #120	@ 0x78
 8007f1a:	d806      	bhi.n	8007f2a <__ssvfiscanf_r+0xd2>
 8007f1c:	2b57      	cmp	r3, #87	@ 0x57
 8007f1e:	d810      	bhi.n	8007f42 <__ssvfiscanf_r+0xea>
 8007f20:	2b25      	cmp	r3, #37	@ 0x25
 8007f22:	d05c      	beq.n	8007fde <__ssvfiscanf_r+0x186>
 8007f24:	d856      	bhi.n	8007fd4 <__ssvfiscanf_r+0x17c>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d074      	beq.n	8008014 <__ssvfiscanf_r+0x1bc>
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007f2e:	230a      	movs	r3, #10
 8007f30:	9342      	str	r3, [sp, #264]	@ 0x108
 8007f32:	e087      	b.n	8008044 <__ssvfiscanf_r+0x1ec>
 8007f34:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007f36:	4655      	mov	r5, sl
 8007f38:	fb02 1103 	mla	r1, r2, r3, r1
 8007f3c:	3930      	subs	r1, #48	@ 0x30
 8007f3e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007f40:	e7d2      	b.n	8007ee8 <__ssvfiscanf_r+0x90>
 8007f42:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007f46:	2a20      	cmp	r2, #32
 8007f48:	d8ef      	bhi.n	8007f2a <__ssvfiscanf_r+0xd2>
 8007f4a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f50 <__ssvfiscanf_r+0xf8>)
 8007f4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f50:	08008023 	.word	0x08008023
 8007f54:	08007f2b 	.word	0x08007f2b
 8007f58:	08007f2b 	.word	0x08007f2b
 8007f5c:	0800807d 	.word	0x0800807d
 8007f60:	08007f2b 	.word	0x08007f2b
 8007f64:	08007f2b 	.word	0x08007f2b
 8007f68:	08007f2b 	.word	0x08007f2b
 8007f6c:	08007f2b 	.word	0x08007f2b
 8007f70:	08007f2b 	.word	0x08007f2b
 8007f74:	08007f2b 	.word	0x08007f2b
 8007f78:	08007f2b 	.word	0x08007f2b
 8007f7c:	08008093 	.word	0x08008093
 8007f80:	08008079 	.word	0x08008079
 8007f84:	08007fdb 	.word	0x08007fdb
 8007f88:	08007fdb 	.word	0x08007fdb
 8007f8c:	08007fdb 	.word	0x08007fdb
 8007f90:	08007f2b 	.word	0x08007f2b
 8007f94:	08008035 	.word	0x08008035
 8007f98:	08007f2b 	.word	0x08007f2b
 8007f9c:	08007f2b 	.word	0x08007f2b
 8007fa0:	08007f2b 	.word	0x08007f2b
 8007fa4:	08007f2b 	.word	0x08007f2b
 8007fa8:	080080a3 	.word	0x080080a3
 8007fac:	0800803d 	.word	0x0800803d
 8007fb0:	0800801b 	.word	0x0800801b
 8007fb4:	08007f2b 	.word	0x08007f2b
 8007fb8:	08007f2b 	.word	0x08007f2b
 8007fbc:	0800809f 	.word	0x0800809f
 8007fc0:	08007f2b 	.word	0x08007f2b
 8007fc4:	08008079 	.word	0x08008079
 8007fc8:	08007f2b 	.word	0x08007f2b
 8007fcc:	08007f2b 	.word	0x08007f2b
 8007fd0:	08008023 	.word	0x08008023
 8007fd4:	3b45      	subs	r3, #69	@ 0x45
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d8a7      	bhi.n	8007f2a <__ssvfiscanf_r+0xd2>
 8007fda:	2305      	movs	r3, #5
 8007fdc:	e031      	b.n	8008042 <__ssvfiscanf_r+0x1ea>
 8007fde:	6863      	ldr	r3, [r4, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dd0d      	ble.n	8008000 <__ssvfiscanf_r+0x1a8>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	781a      	ldrb	r2, [r3, #0]
 8007fe8:	454a      	cmp	r2, r9
 8007fea:	f040 80a7 	bne.w	800813c <__ssvfiscanf_r+0x2e4>
 8007fee:	3301      	adds	r3, #1
 8007ff0:	6862      	ldr	r2, [r4, #4]
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007ff6:	3a01      	subs	r2, #1
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	6062      	str	r2, [r4, #4]
 8007ffc:	9345      	str	r3, [sp, #276]	@ 0x114
 8007ffe:	e752      	b.n	8007ea6 <__ssvfiscanf_r+0x4e>
 8008000:	4621      	mov	r1, r4
 8008002:	4630      	mov	r0, r6
 8008004:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008006:	4798      	blx	r3
 8008008:	2800      	cmp	r0, #0
 800800a:	d0eb      	beq.n	8007fe4 <__ssvfiscanf_r+0x18c>
 800800c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800800e:	2800      	cmp	r0, #0
 8008010:	f040 808c 	bne.w	800812c <__ssvfiscanf_r+0x2d4>
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	e08c      	b.n	8008134 <__ssvfiscanf_r+0x2dc>
 800801a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800801c:	f042 0220 	orr.w	r2, r2, #32
 8008020:	9241      	str	r2, [sp, #260]	@ 0x104
 8008022:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008028:	9241      	str	r2, [sp, #260]	@ 0x104
 800802a:	2210      	movs	r2, #16
 800802c:	2b6e      	cmp	r3, #110	@ 0x6e
 800802e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008030:	d902      	bls.n	8008038 <__ssvfiscanf_r+0x1e0>
 8008032:	e005      	b.n	8008040 <__ssvfiscanf_r+0x1e8>
 8008034:	2300      	movs	r3, #0
 8008036:	9342      	str	r3, [sp, #264]	@ 0x108
 8008038:	2303      	movs	r3, #3
 800803a:	e002      	b.n	8008042 <__ssvfiscanf_r+0x1ea>
 800803c:	2308      	movs	r3, #8
 800803e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008040:	2304      	movs	r3, #4
 8008042:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008044:	6863      	ldr	r3, [r4, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd39      	ble.n	80080be <__ssvfiscanf_r+0x266>
 800804a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800804c:	0659      	lsls	r1, r3, #25
 800804e:	d404      	bmi.n	800805a <__ssvfiscanf_r+0x202>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	781a      	ldrb	r2, [r3, #0]
 8008054:	5cba      	ldrb	r2, [r7, r2]
 8008056:	0712      	lsls	r2, r2, #28
 8008058:	d438      	bmi.n	80080cc <__ssvfiscanf_r+0x274>
 800805a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800805c:	2b02      	cmp	r3, #2
 800805e:	dc47      	bgt.n	80080f0 <__ssvfiscanf_r+0x298>
 8008060:	466b      	mov	r3, sp
 8008062:	4622      	mov	r2, r4
 8008064:	4630      	mov	r0, r6
 8008066:	a941      	add	r1, sp, #260	@ 0x104
 8008068:	f000 f9aa 	bl	80083c0 <_scanf_chars>
 800806c:	2801      	cmp	r0, #1
 800806e:	d065      	beq.n	800813c <__ssvfiscanf_r+0x2e4>
 8008070:	2802      	cmp	r0, #2
 8008072:	f47f af18 	bne.w	8007ea6 <__ssvfiscanf_r+0x4e>
 8008076:	e7c9      	b.n	800800c <__ssvfiscanf_r+0x1b4>
 8008078:	220a      	movs	r2, #10
 800807a:	e7d7      	b.n	800802c <__ssvfiscanf_r+0x1d4>
 800807c:	4629      	mov	r1, r5
 800807e:	4640      	mov	r0, r8
 8008080:	f000 fbf3 	bl	800886a <__sccl>
 8008084:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008086:	4605      	mov	r5, r0
 8008088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800808c:	9341      	str	r3, [sp, #260]	@ 0x104
 800808e:	2301      	movs	r3, #1
 8008090:	e7d7      	b.n	8008042 <__ssvfiscanf_r+0x1ea>
 8008092:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008098:	9341      	str	r3, [sp, #260]	@ 0x104
 800809a:	2300      	movs	r3, #0
 800809c:	e7d1      	b.n	8008042 <__ssvfiscanf_r+0x1ea>
 800809e:	2302      	movs	r3, #2
 80080a0:	e7cf      	b.n	8008042 <__ssvfiscanf_r+0x1ea>
 80080a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80080a4:	06c3      	lsls	r3, r0, #27
 80080a6:	f53f aefe 	bmi.w	8007ea6 <__ssvfiscanf_r+0x4e>
 80080aa:	9b00      	ldr	r3, [sp, #0]
 80080ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80080ae:	1d19      	adds	r1, r3, #4
 80080b0:	9100      	str	r1, [sp, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	07c0      	lsls	r0, r0, #31
 80080b6:	bf4c      	ite	mi
 80080b8:	801a      	strhmi	r2, [r3, #0]
 80080ba:	601a      	strpl	r2, [r3, #0]
 80080bc:	e6f3      	b.n	8007ea6 <__ssvfiscanf_r+0x4e>
 80080be:	4621      	mov	r1, r4
 80080c0:	4630      	mov	r0, r6
 80080c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80080c4:	4798      	blx	r3
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d0bf      	beq.n	800804a <__ssvfiscanf_r+0x1f2>
 80080ca:	e79f      	b.n	800800c <__ssvfiscanf_r+0x1b4>
 80080cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80080ce:	3201      	adds	r2, #1
 80080d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80080d2:	6862      	ldr	r2, [r4, #4]
 80080d4:	3a01      	subs	r2, #1
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	6062      	str	r2, [r4, #4]
 80080da:	dd02      	ble.n	80080e2 <__ssvfiscanf_r+0x28a>
 80080dc:	3301      	adds	r3, #1
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	e7b6      	b.n	8008050 <__ssvfiscanf_r+0x1f8>
 80080e2:	4621      	mov	r1, r4
 80080e4:	4630      	mov	r0, r6
 80080e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80080e8:	4798      	blx	r3
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d0b0      	beq.n	8008050 <__ssvfiscanf_r+0x1f8>
 80080ee:	e78d      	b.n	800800c <__ssvfiscanf_r+0x1b4>
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	dc06      	bgt.n	8008102 <__ssvfiscanf_r+0x2aa>
 80080f4:	466b      	mov	r3, sp
 80080f6:	4622      	mov	r2, r4
 80080f8:	4630      	mov	r0, r6
 80080fa:	a941      	add	r1, sp, #260	@ 0x104
 80080fc:	f000 f9ba 	bl	8008474 <_scanf_i>
 8008100:	e7b4      	b.n	800806c <__ssvfiscanf_r+0x214>
 8008102:	4b09      	ldr	r3, [pc, #36]	@ (8008128 <__ssvfiscanf_r+0x2d0>)
 8008104:	2b00      	cmp	r3, #0
 8008106:	f43f aece 	beq.w	8007ea6 <__ssvfiscanf_r+0x4e>
 800810a:	466b      	mov	r3, sp
 800810c:	4622      	mov	r2, r4
 800810e:	4630      	mov	r0, r6
 8008110:	a941      	add	r1, sp, #260	@ 0x104
 8008112:	f7fc fd73 	bl	8004bfc <_scanf_float>
 8008116:	e7a9      	b.n	800806c <__ssvfiscanf_r+0x214>
 8008118:	08007da5 	.word	0x08007da5
 800811c:	08007e1f 	.word	0x08007e1f
 8008120:	080097a1 	.word	0x080097a1
 8008124:	08009583 	.word	0x08009583
 8008128:	08004bfd 	.word	0x08004bfd
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	065b      	lsls	r3, r3, #25
 8008130:	f53f af70 	bmi.w	8008014 <__ssvfiscanf_r+0x1bc>
 8008134:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800813e:	e7f9      	b.n	8008134 <__ssvfiscanf_r+0x2dc>

08008140 <__sfputc_r>:
 8008140:	6893      	ldr	r3, [r2, #8]
 8008142:	b410      	push	{r4}
 8008144:	3b01      	subs	r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	6093      	str	r3, [r2, #8]
 800814a:	da07      	bge.n	800815c <__sfputc_r+0x1c>
 800814c:	6994      	ldr	r4, [r2, #24]
 800814e:	42a3      	cmp	r3, r4
 8008150:	db01      	blt.n	8008156 <__sfputc_r+0x16>
 8008152:	290a      	cmp	r1, #10
 8008154:	d102      	bne.n	800815c <__sfputc_r+0x1c>
 8008156:	bc10      	pop	{r4}
 8008158:	f7fd b91f 	b.w	800539a <__swbuf_r>
 800815c:	6813      	ldr	r3, [r2, #0]
 800815e:	1c58      	adds	r0, r3, #1
 8008160:	6010      	str	r0, [r2, #0]
 8008162:	7019      	strb	r1, [r3, #0]
 8008164:	4608      	mov	r0, r1
 8008166:	bc10      	pop	{r4}
 8008168:	4770      	bx	lr

0800816a <__sfputs_r>:
 800816a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816c:	4606      	mov	r6, r0
 800816e:	460f      	mov	r7, r1
 8008170:	4614      	mov	r4, r2
 8008172:	18d5      	adds	r5, r2, r3
 8008174:	42ac      	cmp	r4, r5
 8008176:	d101      	bne.n	800817c <__sfputs_r+0x12>
 8008178:	2000      	movs	r0, #0
 800817a:	e007      	b.n	800818c <__sfputs_r+0x22>
 800817c:	463a      	mov	r2, r7
 800817e:	4630      	mov	r0, r6
 8008180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008184:	f7ff ffdc 	bl	8008140 <__sfputc_r>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d1f3      	bne.n	8008174 <__sfputs_r+0xa>
 800818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008190 <_vfiprintf_r>:
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	460d      	mov	r5, r1
 8008196:	4614      	mov	r4, r2
 8008198:	4698      	mov	r8, r3
 800819a:	4606      	mov	r6, r0
 800819c:	b09d      	sub	sp, #116	@ 0x74
 800819e:	b118      	cbz	r0, 80081a8 <_vfiprintf_r+0x18>
 80081a0:	6a03      	ldr	r3, [r0, #32]
 80081a2:	b90b      	cbnz	r3, 80081a8 <_vfiprintf_r+0x18>
 80081a4:	f7fc ffc0 	bl	8005128 <__sinit>
 80081a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081aa:	07d9      	lsls	r1, r3, #31
 80081ac:	d405      	bmi.n	80081ba <_vfiprintf_r+0x2a>
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	059a      	lsls	r2, r3, #22
 80081b2:	d402      	bmi.n	80081ba <_vfiprintf_r+0x2a>
 80081b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081b6:	f7fd fa02 	bl	80055be <__retarget_lock_acquire_recursive>
 80081ba:	89ab      	ldrh	r3, [r5, #12]
 80081bc:	071b      	lsls	r3, r3, #28
 80081be:	d501      	bpl.n	80081c4 <_vfiprintf_r+0x34>
 80081c0:	692b      	ldr	r3, [r5, #16]
 80081c2:	b99b      	cbnz	r3, 80081ec <_vfiprintf_r+0x5c>
 80081c4:	4629      	mov	r1, r5
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7fd f926 	bl	8005418 <__swsetup_r>
 80081cc:	b170      	cbz	r0, 80081ec <_vfiprintf_r+0x5c>
 80081ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d0:	07dc      	lsls	r4, r3, #31
 80081d2:	d504      	bpl.n	80081de <_vfiprintf_r+0x4e>
 80081d4:	f04f 30ff 	mov.w	r0, #4294967295
 80081d8:	b01d      	add	sp, #116	@ 0x74
 80081da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081de:	89ab      	ldrh	r3, [r5, #12]
 80081e0:	0598      	lsls	r0, r3, #22
 80081e2:	d4f7      	bmi.n	80081d4 <_vfiprintf_r+0x44>
 80081e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081e6:	f7fd f9eb 	bl	80055c0 <__retarget_lock_release_recursive>
 80081ea:	e7f3      	b.n	80081d4 <_vfiprintf_r+0x44>
 80081ec:	2300      	movs	r3, #0
 80081ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80081f0:	2320      	movs	r3, #32
 80081f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081f6:	2330      	movs	r3, #48	@ 0x30
 80081f8:	f04f 0901 	mov.w	r9, #1
 80081fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008200:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80083ac <_vfiprintf_r+0x21c>
 8008204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008208:	4623      	mov	r3, r4
 800820a:	469a      	mov	sl, r3
 800820c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008210:	b10a      	cbz	r2, 8008216 <_vfiprintf_r+0x86>
 8008212:	2a25      	cmp	r2, #37	@ 0x25
 8008214:	d1f9      	bne.n	800820a <_vfiprintf_r+0x7a>
 8008216:	ebba 0b04 	subs.w	fp, sl, r4
 800821a:	d00b      	beq.n	8008234 <_vfiprintf_r+0xa4>
 800821c:	465b      	mov	r3, fp
 800821e:	4622      	mov	r2, r4
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f7ff ffa1 	bl	800816a <__sfputs_r>
 8008228:	3001      	adds	r0, #1
 800822a:	f000 80a7 	beq.w	800837c <_vfiprintf_r+0x1ec>
 800822e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008230:	445a      	add	r2, fp
 8008232:	9209      	str	r2, [sp, #36]	@ 0x24
 8008234:	f89a 3000 	ldrb.w	r3, [sl]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 809f 	beq.w	800837c <_vfiprintf_r+0x1ec>
 800823e:	2300      	movs	r3, #0
 8008240:	f04f 32ff 	mov.w	r2, #4294967295
 8008244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008248:	f10a 0a01 	add.w	sl, sl, #1
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	9307      	str	r3, [sp, #28]
 8008250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008254:	931a      	str	r3, [sp, #104]	@ 0x68
 8008256:	4654      	mov	r4, sl
 8008258:	2205      	movs	r2, #5
 800825a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800825e:	4853      	ldr	r0, [pc, #332]	@ (80083ac <_vfiprintf_r+0x21c>)
 8008260:	f7fd f9af 	bl	80055c2 <memchr>
 8008264:	9a04      	ldr	r2, [sp, #16]
 8008266:	b9d8      	cbnz	r0, 80082a0 <_vfiprintf_r+0x110>
 8008268:	06d1      	lsls	r1, r2, #27
 800826a:	bf44      	itt	mi
 800826c:	2320      	movmi	r3, #32
 800826e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008272:	0713      	lsls	r3, r2, #28
 8008274:	bf44      	itt	mi
 8008276:	232b      	movmi	r3, #43	@ 0x2b
 8008278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800827c:	f89a 3000 	ldrb.w	r3, [sl]
 8008280:	2b2a      	cmp	r3, #42	@ 0x2a
 8008282:	d015      	beq.n	80082b0 <_vfiprintf_r+0x120>
 8008284:	4654      	mov	r4, sl
 8008286:	2000      	movs	r0, #0
 8008288:	f04f 0c0a 	mov.w	ip, #10
 800828c:	9a07      	ldr	r2, [sp, #28]
 800828e:	4621      	mov	r1, r4
 8008290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008294:	3b30      	subs	r3, #48	@ 0x30
 8008296:	2b09      	cmp	r3, #9
 8008298:	d94b      	bls.n	8008332 <_vfiprintf_r+0x1a2>
 800829a:	b1b0      	cbz	r0, 80082ca <_vfiprintf_r+0x13a>
 800829c:	9207      	str	r2, [sp, #28]
 800829e:	e014      	b.n	80082ca <_vfiprintf_r+0x13a>
 80082a0:	eba0 0308 	sub.w	r3, r0, r8
 80082a4:	fa09 f303 	lsl.w	r3, r9, r3
 80082a8:	4313      	orrs	r3, r2
 80082aa:	46a2      	mov	sl, r4
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	e7d2      	b.n	8008256 <_vfiprintf_r+0xc6>
 80082b0:	9b03      	ldr	r3, [sp, #12]
 80082b2:	1d19      	adds	r1, r3, #4
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	9103      	str	r1, [sp, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bfbb      	ittet	lt
 80082bc:	425b      	neglt	r3, r3
 80082be:	f042 0202 	orrlt.w	r2, r2, #2
 80082c2:	9307      	strge	r3, [sp, #28]
 80082c4:	9307      	strlt	r3, [sp, #28]
 80082c6:	bfb8      	it	lt
 80082c8:	9204      	strlt	r2, [sp, #16]
 80082ca:	7823      	ldrb	r3, [r4, #0]
 80082cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80082ce:	d10a      	bne.n	80082e6 <_vfiprintf_r+0x156>
 80082d0:	7863      	ldrb	r3, [r4, #1]
 80082d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d4:	d132      	bne.n	800833c <_vfiprintf_r+0x1ac>
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	3402      	adds	r4, #2
 80082da:	1d1a      	adds	r2, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	9203      	str	r2, [sp, #12]
 80082e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082e4:	9305      	str	r3, [sp, #20]
 80082e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80083b0 <_vfiprintf_r+0x220>
 80082ea:	2203      	movs	r2, #3
 80082ec:	4650      	mov	r0, sl
 80082ee:	7821      	ldrb	r1, [r4, #0]
 80082f0:	f7fd f967 	bl	80055c2 <memchr>
 80082f4:	b138      	cbz	r0, 8008306 <_vfiprintf_r+0x176>
 80082f6:	2240      	movs	r2, #64	@ 0x40
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	eba0 000a 	sub.w	r0, r0, sl
 80082fe:	4082      	lsls	r2, r0
 8008300:	4313      	orrs	r3, r2
 8008302:	3401      	adds	r4, #1
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830a:	2206      	movs	r2, #6
 800830c:	4829      	ldr	r0, [pc, #164]	@ (80083b4 <_vfiprintf_r+0x224>)
 800830e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008312:	f7fd f956 	bl	80055c2 <memchr>
 8008316:	2800      	cmp	r0, #0
 8008318:	d03f      	beq.n	800839a <_vfiprintf_r+0x20a>
 800831a:	4b27      	ldr	r3, [pc, #156]	@ (80083b8 <_vfiprintf_r+0x228>)
 800831c:	bb1b      	cbnz	r3, 8008366 <_vfiprintf_r+0x1d6>
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	3307      	adds	r3, #7
 8008322:	f023 0307 	bic.w	r3, r3, #7
 8008326:	3308      	adds	r3, #8
 8008328:	9303      	str	r3, [sp, #12]
 800832a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832c:	443b      	add	r3, r7
 800832e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008330:	e76a      	b.n	8008208 <_vfiprintf_r+0x78>
 8008332:	460c      	mov	r4, r1
 8008334:	2001      	movs	r0, #1
 8008336:	fb0c 3202 	mla	r2, ip, r2, r3
 800833a:	e7a8      	b.n	800828e <_vfiprintf_r+0xfe>
 800833c:	2300      	movs	r3, #0
 800833e:	f04f 0c0a 	mov.w	ip, #10
 8008342:	4619      	mov	r1, r3
 8008344:	3401      	adds	r4, #1
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	4620      	mov	r0, r4
 800834a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800834e:	3a30      	subs	r2, #48	@ 0x30
 8008350:	2a09      	cmp	r2, #9
 8008352:	d903      	bls.n	800835c <_vfiprintf_r+0x1cc>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0c6      	beq.n	80082e6 <_vfiprintf_r+0x156>
 8008358:	9105      	str	r1, [sp, #20]
 800835a:	e7c4      	b.n	80082e6 <_vfiprintf_r+0x156>
 800835c:	4604      	mov	r4, r0
 800835e:	2301      	movs	r3, #1
 8008360:	fb0c 2101 	mla	r1, ip, r1, r2
 8008364:	e7f0      	b.n	8008348 <_vfiprintf_r+0x1b8>
 8008366:	ab03      	add	r3, sp, #12
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	462a      	mov	r2, r5
 800836c:	4630      	mov	r0, r6
 800836e:	4b13      	ldr	r3, [pc, #76]	@ (80083bc <_vfiprintf_r+0x22c>)
 8008370:	a904      	add	r1, sp, #16
 8008372:	f7fc f887 	bl	8004484 <_printf_float>
 8008376:	4607      	mov	r7, r0
 8008378:	1c78      	adds	r0, r7, #1
 800837a:	d1d6      	bne.n	800832a <_vfiprintf_r+0x19a>
 800837c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800837e:	07d9      	lsls	r1, r3, #31
 8008380:	d405      	bmi.n	800838e <_vfiprintf_r+0x1fe>
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	059a      	lsls	r2, r3, #22
 8008386:	d402      	bmi.n	800838e <_vfiprintf_r+0x1fe>
 8008388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800838a:	f7fd f919 	bl	80055c0 <__retarget_lock_release_recursive>
 800838e:	89ab      	ldrh	r3, [r5, #12]
 8008390:	065b      	lsls	r3, r3, #25
 8008392:	f53f af1f 	bmi.w	80081d4 <_vfiprintf_r+0x44>
 8008396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008398:	e71e      	b.n	80081d8 <_vfiprintf_r+0x48>
 800839a:	ab03      	add	r3, sp, #12
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	462a      	mov	r2, r5
 80083a0:	4630      	mov	r0, r6
 80083a2:	4b06      	ldr	r3, [pc, #24]	@ (80083bc <_vfiprintf_r+0x22c>)
 80083a4:	a904      	add	r1, sp, #16
 80083a6:	f7fc fb0b 	bl	80049c0 <_printf_i>
 80083aa:	e7e4      	b.n	8008376 <_vfiprintf_r+0x1e6>
 80083ac:	0800957d 	.word	0x0800957d
 80083b0:	08009583 	.word	0x08009583
 80083b4:	08009587 	.word	0x08009587
 80083b8:	08004485 	.word	0x08004485
 80083bc:	0800816b 	.word	0x0800816b

080083c0 <_scanf_chars>:
 80083c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	4615      	mov	r5, r2
 80083c6:	688a      	ldr	r2, [r1, #8]
 80083c8:	4680      	mov	r8, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	b932      	cbnz	r2, 80083dc <_scanf_chars+0x1c>
 80083ce:	698a      	ldr	r2, [r1, #24]
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	bf14      	ite	ne
 80083d4:	f04f 32ff 	movne.w	r2, #4294967295
 80083d8:	2201      	moveq	r2, #1
 80083da:	608a      	str	r2, [r1, #8]
 80083dc:	2700      	movs	r7, #0
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008470 <_scanf_chars+0xb0>
 80083e4:	06d1      	lsls	r1, r2, #27
 80083e6:	bf5f      	itttt	pl
 80083e8:	681a      	ldrpl	r2, [r3, #0]
 80083ea:	1d11      	addpl	r1, r2, #4
 80083ec:	6019      	strpl	r1, [r3, #0]
 80083ee:	6816      	ldrpl	r6, [r2, #0]
 80083f0:	69a0      	ldr	r0, [r4, #24]
 80083f2:	b188      	cbz	r0, 8008418 <_scanf_chars+0x58>
 80083f4:	2801      	cmp	r0, #1
 80083f6:	d107      	bne.n	8008408 <_scanf_chars+0x48>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	781a      	ldrb	r2, [r3, #0]
 80083fc:	6963      	ldr	r3, [r4, #20]
 80083fe:	5c9b      	ldrb	r3, [r3, r2]
 8008400:	b953      	cbnz	r3, 8008418 <_scanf_chars+0x58>
 8008402:	2f00      	cmp	r7, #0
 8008404:	d031      	beq.n	800846a <_scanf_chars+0xaa>
 8008406:	e022      	b.n	800844e <_scanf_chars+0x8e>
 8008408:	2802      	cmp	r0, #2
 800840a:	d120      	bne.n	800844e <_scanf_chars+0x8e>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008414:	071b      	lsls	r3, r3, #28
 8008416:	d41a      	bmi.n	800844e <_scanf_chars+0x8e>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	3701      	adds	r7, #1
 800841c:	06da      	lsls	r2, r3, #27
 800841e:	bf5e      	ittt	pl
 8008420:	682b      	ldrpl	r3, [r5, #0]
 8008422:	781b      	ldrbpl	r3, [r3, #0]
 8008424:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008428:	682a      	ldr	r2, [r5, #0]
 800842a:	686b      	ldr	r3, [r5, #4]
 800842c:	3201      	adds	r2, #1
 800842e:	602a      	str	r2, [r5, #0]
 8008430:	68a2      	ldr	r2, [r4, #8]
 8008432:	3b01      	subs	r3, #1
 8008434:	3a01      	subs	r2, #1
 8008436:	606b      	str	r3, [r5, #4]
 8008438:	60a2      	str	r2, [r4, #8]
 800843a:	b142      	cbz	r2, 800844e <_scanf_chars+0x8e>
 800843c:	2b00      	cmp	r3, #0
 800843e:	dcd7      	bgt.n	80083f0 <_scanf_chars+0x30>
 8008440:	4629      	mov	r1, r5
 8008442:	4640      	mov	r0, r8
 8008444:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008448:	4798      	blx	r3
 800844a:	2800      	cmp	r0, #0
 800844c:	d0d0      	beq.n	80083f0 <_scanf_chars+0x30>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	f013 0310 	ands.w	r3, r3, #16
 8008454:	d105      	bne.n	8008462 <_scanf_chars+0xa2>
 8008456:	68e2      	ldr	r2, [r4, #12]
 8008458:	3201      	adds	r2, #1
 800845a:	60e2      	str	r2, [r4, #12]
 800845c:	69a2      	ldr	r2, [r4, #24]
 800845e:	b102      	cbz	r2, 8008462 <_scanf_chars+0xa2>
 8008460:	7033      	strb	r3, [r6, #0]
 8008462:	2000      	movs	r0, #0
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	443b      	add	r3, r7
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846e:	bf00      	nop
 8008470:	080097a1 	.word	0x080097a1

08008474 <_scanf_i>:
 8008474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008478:	460c      	mov	r4, r1
 800847a:	4698      	mov	r8, r3
 800847c:	4b72      	ldr	r3, [pc, #456]	@ (8008648 <_scanf_i+0x1d4>)
 800847e:	b087      	sub	sp, #28
 8008480:	4682      	mov	sl, r0
 8008482:	4616      	mov	r6, r2
 8008484:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008488:	ab03      	add	r3, sp, #12
 800848a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800848e:	4b6f      	ldr	r3, [pc, #444]	@ (800864c <_scanf_i+0x1d8>)
 8008490:	69a1      	ldr	r1, [r4, #24]
 8008492:	4a6f      	ldr	r2, [pc, #444]	@ (8008650 <_scanf_i+0x1dc>)
 8008494:	4627      	mov	r7, r4
 8008496:	2903      	cmp	r1, #3
 8008498:	bf08      	it	eq
 800849a:	461a      	moveq	r2, r3
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	9201      	str	r2, [sp, #4]
 80084a0:	1e5a      	subs	r2, r3, #1
 80084a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084a6:	bf81      	itttt	hi
 80084a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084ac:	eb03 0905 	addhi.w	r9, r3, r5
 80084b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084b4:	60a3      	strhi	r3, [r4, #8]
 80084b6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80084ba:	bf98      	it	ls
 80084bc:	f04f 0900 	movls.w	r9, #0
 80084c0:	463d      	mov	r5, r7
 80084c2:	f04f 0b00 	mov.w	fp, #0
 80084c6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	6831      	ldr	r1, [r6, #0]
 80084ce:	ab03      	add	r3, sp, #12
 80084d0:	2202      	movs	r2, #2
 80084d2:	7809      	ldrb	r1, [r1, #0]
 80084d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80084d8:	f7fd f873 	bl	80055c2 <memchr>
 80084dc:	b328      	cbz	r0, 800852a <_scanf_i+0xb6>
 80084de:	f1bb 0f01 	cmp.w	fp, #1
 80084e2:	d159      	bne.n	8008598 <_scanf_i+0x124>
 80084e4:	6862      	ldr	r2, [r4, #4]
 80084e6:	b92a      	cbnz	r2, 80084f4 <_scanf_i+0x80>
 80084e8:	2108      	movs	r1, #8
 80084ea:	6822      	ldr	r2, [r4, #0]
 80084ec:	6061      	str	r1, [r4, #4]
 80084ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80084fa:	6022      	str	r2, [r4, #0]
 80084fc:	68a2      	ldr	r2, [r4, #8]
 80084fe:	1e51      	subs	r1, r2, #1
 8008500:	60a1      	str	r1, [r4, #8]
 8008502:	b192      	cbz	r2, 800852a <_scanf_i+0xb6>
 8008504:	6832      	ldr	r2, [r6, #0]
 8008506:	1c51      	adds	r1, r2, #1
 8008508:	6031      	str	r1, [r6, #0]
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	f805 2b01 	strb.w	r2, [r5], #1
 8008510:	6872      	ldr	r2, [r6, #4]
 8008512:	3a01      	subs	r2, #1
 8008514:	2a00      	cmp	r2, #0
 8008516:	6072      	str	r2, [r6, #4]
 8008518:	dc07      	bgt.n	800852a <_scanf_i+0xb6>
 800851a:	4631      	mov	r1, r6
 800851c:	4650      	mov	r0, sl
 800851e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008522:	4790      	blx	r2
 8008524:	2800      	cmp	r0, #0
 8008526:	f040 8085 	bne.w	8008634 <_scanf_i+0x1c0>
 800852a:	f10b 0b01 	add.w	fp, fp, #1
 800852e:	f1bb 0f03 	cmp.w	fp, #3
 8008532:	d1cb      	bne.n	80084cc <_scanf_i+0x58>
 8008534:	6863      	ldr	r3, [r4, #4]
 8008536:	b90b      	cbnz	r3, 800853c <_scanf_i+0xc8>
 8008538:	230a      	movs	r3, #10
 800853a:	6063      	str	r3, [r4, #4]
 800853c:	6863      	ldr	r3, [r4, #4]
 800853e:	4945      	ldr	r1, [pc, #276]	@ (8008654 <_scanf_i+0x1e0>)
 8008540:	6960      	ldr	r0, [r4, #20]
 8008542:	1ac9      	subs	r1, r1, r3
 8008544:	f000 f991 	bl	800886a <__sccl>
 8008548:	f04f 0b00 	mov.w	fp, #0
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d03d      	beq.n	80085d0 <_scanf_i+0x15c>
 8008554:	6831      	ldr	r1, [r6, #0]
 8008556:	6960      	ldr	r0, [r4, #20]
 8008558:	f891 c000 	ldrb.w	ip, [r1]
 800855c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008560:	2800      	cmp	r0, #0
 8008562:	d035      	beq.n	80085d0 <_scanf_i+0x15c>
 8008564:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008568:	d124      	bne.n	80085b4 <_scanf_i+0x140>
 800856a:	0510      	lsls	r0, r2, #20
 800856c:	d522      	bpl.n	80085b4 <_scanf_i+0x140>
 800856e:	f10b 0b01 	add.w	fp, fp, #1
 8008572:	f1b9 0f00 	cmp.w	r9, #0
 8008576:	d003      	beq.n	8008580 <_scanf_i+0x10c>
 8008578:	3301      	adds	r3, #1
 800857a:	f109 39ff 	add.w	r9, r9, #4294967295
 800857e:	60a3      	str	r3, [r4, #8]
 8008580:	6873      	ldr	r3, [r6, #4]
 8008582:	3b01      	subs	r3, #1
 8008584:	2b00      	cmp	r3, #0
 8008586:	6073      	str	r3, [r6, #4]
 8008588:	dd1b      	ble.n	80085c2 <_scanf_i+0x14e>
 800858a:	6833      	ldr	r3, [r6, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	6033      	str	r3, [r6, #0]
 8008590:	68a3      	ldr	r3, [r4, #8]
 8008592:	3b01      	subs	r3, #1
 8008594:	60a3      	str	r3, [r4, #8]
 8008596:	e7d9      	b.n	800854c <_scanf_i+0xd8>
 8008598:	f1bb 0f02 	cmp.w	fp, #2
 800859c:	d1ae      	bne.n	80084fc <_scanf_i+0x88>
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80085a4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80085a8:	d1c4      	bne.n	8008534 <_scanf_i+0xc0>
 80085aa:	2110      	movs	r1, #16
 80085ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085b0:	6061      	str	r1, [r4, #4]
 80085b2:	e7a2      	b.n	80084fa <_scanf_i+0x86>
 80085b4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80085b8:	6022      	str	r2, [r4, #0]
 80085ba:	780b      	ldrb	r3, [r1, #0]
 80085bc:	f805 3b01 	strb.w	r3, [r5], #1
 80085c0:	e7de      	b.n	8008580 <_scanf_i+0x10c>
 80085c2:	4631      	mov	r1, r6
 80085c4:	4650      	mov	r0, sl
 80085c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80085ca:	4798      	blx	r3
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d0df      	beq.n	8008590 <_scanf_i+0x11c>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	05d9      	lsls	r1, r3, #23
 80085d4:	d50d      	bpl.n	80085f2 <_scanf_i+0x17e>
 80085d6:	42bd      	cmp	r5, r7
 80085d8:	d909      	bls.n	80085ee <_scanf_i+0x17a>
 80085da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80085de:	4632      	mov	r2, r6
 80085e0:	4650      	mov	r0, sl
 80085e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80085ea:	4798      	blx	r3
 80085ec:	464d      	mov	r5, r9
 80085ee:	42bd      	cmp	r5, r7
 80085f0:	d028      	beq.n	8008644 <_scanf_i+0x1d0>
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	f012 0210 	ands.w	r2, r2, #16
 80085f8:	d113      	bne.n	8008622 <_scanf_i+0x1ae>
 80085fa:	702a      	strb	r2, [r5, #0]
 80085fc:	4639      	mov	r1, r7
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	4650      	mov	r0, sl
 8008602:	9e01      	ldr	r6, [sp, #4]
 8008604:	47b0      	blx	r6
 8008606:	f8d8 3000 	ldr.w	r3, [r8]
 800860a:	6821      	ldr	r1, [r4, #0]
 800860c:	1d1a      	adds	r2, r3, #4
 800860e:	f8c8 2000 	str.w	r2, [r8]
 8008612:	f011 0f20 	tst.w	r1, #32
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	d00f      	beq.n	800863a <_scanf_i+0x1c6>
 800861a:	6018      	str	r0, [r3, #0]
 800861c:	68e3      	ldr	r3, [r4, #12]
 800861e:	3301      	adds	r3, #1
 8008620:	60e3      	str	r3, [r4, #12]
 8008622:	2000      	movs	r0, #0
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	1bed      	subs	r5, r5, r7
 8008628:	445d      	add	r5, fp
 800862a:	442b      	add	r3, r5
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	b007      	add	sp, #28
 8008630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008634:	f04f 0b00 	mov.w	fp, #0
 8008638:	e7ca      	b.n	80085d0 <_scanf_i+0x15c>
 800863a:	07ca      	lsls	r2, r1, #31
 800863c:	bf4c      	ite	mi
 800863e:	8018      	strhmi	r0, [r3, #0]
 8008640:	6018      	strpl	r0, [r3, #0]
 8008642:	e7eb      	b.n	800861c <_scanf_i+0x1a8>
 8008644:	2001      	movs	r0, #1
 8008646:	e7f2      	b.n	800862e <_scanf_i+0x1ba>
 8008648:	08009428 	.word	0x08009428
 800864c:	08007af1 	.word	0x08007af1
 8008650:	08009249 	.word	0x08009249
 8008654:	0800959e 	.word	0x0800959e

08008658 <__sflush_r>:
 8008658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	0716      	lsls	r6, r2, #28
 8008660:	4605      	mov	r5, r0
 8008662:	460c      	mov	r4, r1
 8008664:	d454      	bmi.n	8008710 <__sflush_r+0xb8>
 8008666:	684b      	ldr	r3, [r1, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dc02      	bgt.n	8008672 <__sflush_r+0x1a>
 800866c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	dd48      	ble.n	8008704 <__sflush_r+0xac>
 8008672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008674:	2e00      	cmp	r6, #0
 8008676:	d045      	beq.n	8008704 <__sflush_r+0xac>
 8008678:	2300      	movs	r3, #0
 800867a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800867e:	682f      	ldr	r7, [r5, #0]
 8008680:	6a21      	ldr	r1, [r4, #32]
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	d030      	beq.n	80086e8 <__sflush_r+0x90>
 8008686:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	0759      	lsls	r1, r3, #29
 800868c:	d505      	bpl.n	800869a <__sflush_r+0x42>
 800868e:	6863      	ldr	r3, [r4, #4]
 8008690:	1ad2      	subs	r2, r2, r3
 8008692:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008694:	b10b      	cbz	r3, 800869a <__sflush_r+0x42>
 8008696:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008698:	1ad2      	subs	r2, r2, r3
 800869a:	2300      	movs	r3, #0
 800869c:	4628      	mov	r0, r5
 800869e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086a0:	6a21      	ldr	r1, [r4, #32]
 80086a2:	47b0      	blx	r6
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	d106      	bne.n	80086b8 <__sflush_r+0x60>
 80086aa:	6829      	ldr	r1, [r5, #0]
 80086ac:	291d      	cmp	r1, #29
 80086ae:	d82b      	bhi.n	8008708 <__sflush_r+0xb0>
 80086b0:	4a28      	ldr	r2, [pc, #160]	@ (8008754 <__sflush_r+0xfc>)
 80086b2:	40ca      	lsrs	r2, r1
 80086b4:	07d6      	lsls	r6, r2, #31
 80086b6:	d527      	bpl.n	8008708 <__sflush_r+0xb0>
 80086b8:	2200      	movs	r2, #0
 80086ba:	6062      	str	r2, [r4, #4]
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	04d9      	lsls	r1, r3, #19
 80086c0:	6022      	str	r2, [r4, #0]
 80086c2:	d504      	bpl.n	80086ce <__sflush_r+0x76>
 80086c4:	1c42      	adds	r2, r0, #1
 80086c6:	d101      	bne.n	80086cc <__sflush_r+0x74>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b903      	cbnz	r3, 80086ce <__sflush_r+0x76>
 80086cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80086ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086d0:	602f      	str	r7, [r5, #0]
 80086d2:	b1b9      	cbz	r1, 8008704 <__sflush_r+0xac>
 80086d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086d8:	4299      	cmp	r1, r3
 80086da:	d002      	beq.n	80086e2 <__sflush_r+0x8a>
 80086dc:	4628      	mov	r0, r5
 80086de:	f7fd fdef 	bl	80062c0 <_free_r>
 80086e2:	2300      	movs	r3, #0
 80086e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80086e6:	e00d      	b.n	8008704 <__sflush_r+0xac>
 80086e8:	2301      	movs	r3, #1
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b0      	blx	r6
 80086ee:	4602      	mov	r2, r0
 80086f0:	1c50      	adds	r0, r2, #1
 80086f2:	d1c9      	bne.n	8008688 <__sflush_r+0x30>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0c6      	beq.n	8008688 <__sflush_r+0x30>
 80086fa:	2b1d      	cmp	r3, #29
 80086fc:	d001      	beq.n	8008702 <__sflush_r+0xaa>
 80086fe:	2b16      	cmp	r3, #22
 8008700:	d11d      	bne.n	800873e <__sflush_r+0xe6>
 8008702:	602f      	str	r7, [r5, #0]
 8008704:	2000      	movs	r0, #0
 8008706:	e021      	b.n	800874c <__sflush_r+0xf4>
 8008708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870c:	b21b      	sxth	r3, r3
 800870e:	e01a      	b.n	8008746 <__sflush_r+0xee>
 8008710:	690f      	ldr	r7, [r1, #16]
 8008712:	2f00      	cmp	r7, #0
 8008714:	d0f6      	beq.n	8008704 <__sflush_r+0xac>
 8008716:	0793      	lsls	r3, r2, #30
 8008718:	bf18      	it	ne
 800871a:	2300      	movne	r3, #0
 800871c:	680e      	ldr	r6, [r1, #0]
 800871e:	bf08      	it	eq
 8008720:	694b      	ldreq	r3, [r1, #20]
 8008722:	1bf6      	subs	r6, r6, r7
 8008724:	600f      	str	r7, [r1, #0]
 8008726:	608b      	str	r3, [r1, #8]
 8008728:	2e00      	cmp	r6, #0
 800872a:	ddeb      	ble.n	8008704 <__sflush_r+0xac>
 800872c:	4633      	mov	r3, r6
 800872e:	463a      	mov	r2, r7
 8008730:	4628      	mov	r0, r5
 8008732:	6a21      	ldr	r1, [r4, #32]
 8008734:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008738:	47e0      	blx	ip
 800873a:	2800      	cmp	r0, #0
 800873c:	dc07      	bgt.n	800874e <__sflush_r+0xf6>
 800873e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008746:	f04f 30ff 	mov.w	r0, #4294967295
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800874e:	4407      	add	r7, r0
 8008750:	1a36      	subs	r6, r6, r0
 8008752:	e7e9      	b.n	8008728 <__sflush_r+0xd0>
 8008754:	20400001 	.word	0x20400001

08008758 <_fflush_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	690b      	ldr	r3, [r1, #16]
 800875c:	4605      	mov	r5, r0
 800875e:	460c      	mov	r4, r1
 8008760:	b913      	cbnz	r3, 8008768 <_fflush_r+0x10>
 8008762:	2500      	movs	r5, #0
 8008764:	4628      	mov	r0, r5
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	b118      	cbz	r0, 8008772 <_fflush_r+0x1a>
 800876a:	6a03      	ldr	r3, [r0, #32]
 800876c:	b90b      	cbnz	r3, 8008772 <_fflush_r+0x1a>
 800876e:	f7fc fcdb 	bl	8005128 <__sinit>
 8008772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0f3      	beq.n	8008762 <_fflush_r+0xa>
 800877a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800877c:	07d0      	lsls	r0, r2, #31
 800877e:	d404      	bmi.n	800878a <_fflush_r+0x32>
 8008780:	0599      	lsls	r1, r3, #22
 8008782:	d402      	bmi.n	800878a <_fflush_r+0x32>
 8008784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008786:	f7fc ff1a 	bl	80055be <__retarget_lock_acquire_recursive>
 800878a:	4628      	mov	r0, r5
 800878c:	4621      	mov	r1, r4
 800878e:	f7ff ff63 	bl	8008658 <__sflush_r>
 8008792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008794:	4605      	mov	r5, r0
 8008796:	07da      	lsls	r2, r3, #31
 8008798:	d4e4      	bmi.n	8008764 <_fflush_r+0xc>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	059b      	lsls	r3, r3, #22
 800879e:	d4e1      	bmi.n	8008764 <_fflush_r+0xc>
 80087a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087a2:	f7fc ff0d 	bl	80055c0 <__retarget_lock_release_recursive>
 80087a6:	e7dd      	b.n	8008764 <_fflush_r+0xc>

080087a8 <__swhatbuf_r>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	460c      	mov	r4, r1
 80087ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b0:	4615      	mov	r5, r2
 80087b2:	2900      	cmp	r1, #0
 80087b4:	461e      	mov	r6, r3
 80087b6:	b096      	sub	sp, #88	@ 0x58
 80087b8:	da0c      	bge.n	80087d4 <__swhatbuf_r+0x2c>
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	2100      	movs	r1, #0
 80087be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087c2:	bf14      	ite	ne
 80087c4:	2340      	movne	r3, #64	@ 0x40
 80087c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087ca:	2000      	movs	r0, #0
 80087cc:	6031      	str	r1, [r6, #0]
 80087ce:	602b      	str	r3, [r5, #0]
 80087d0:	b016      	add	sp, #88	@ 0x58
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	466a      	mov	r2, sp
 80087d6:	f000 f8e5 	bl	80089a4 <_fstat_r>
 80087da:	2800      	cmp	r0, #0
 80087dc:	dbed      	blt.n	80087ba <__swhatbuf_r+0x12>
 80087de:	9901      	ldr	r1, [sp, #4]
 80087e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087e8:	4259      	negs	r1, r3
 80087ea:	4159      	adcs	r1, r3
 80087ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087f0:	e7eb      	b.n	80087ca <__swhatbuf_r+0x22>

080087f2 <__smakebuf_r>:
 80087f2:	898b      	ldrh	r3, [r1, #12]
 80087f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087f6:	079d      	lsls	r5, r3, #30
 80087f8:	4606      	mov	r6, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	d507      	bpl.n	800880e <__smakebuf_r+0x1c>
 80087fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	2301      	movs	r3, #1
 8008808:	6163      	str	r3, [r4, #20]
 800880a:	b003      	add	sp, #12
 800880c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800880e:	466a      	mov	r2, sp
 8008810:	ab01      	add	r3, sp, #4
 8008812:	f7ff ffc9 	bl	80087a8 <__swhatbuf_r>
 8008816:	9f00      	ldr	r7, [sp, #0]
 8008818:	4605      	mov	r5, r0
 800881a:	4639      	mov	r1, r7
 800881c:	4630      	mov	r0, r6
 800881e:	f7fd fdc1 	bl	80063a4 <_malloc_r>
 8008822:	b948      	cbnz	r0, 8008838 <__smakebuf_r+0x46>
 8008824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008828:	059a      	lsls	r2, r3, #22
 800882a:	d4ee      	bmi.n	800880a <__smakebuf_r+0x18>
 800882c:	f023 0303 	bic.w	r3, r3, #3
 8008830:	f043 0302 	orr.w	r3, r3, #2
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	e7e2      	b.n	80087fe <__smakebuf_r+0xc>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800883e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	6020      	str	r0, [r4, #0]
 8008848:	b15b      	cbz	r3, 8008862 <__smakebuf_r+0x70>
 800884a:	4630      	mov	r0, r6
 800884c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008850:	f000 f8ba 	bl	80089c8 <_isatty_r>
 8008854:	b128      	cbz	r0, 8008862 <__smakebuf_r+0x70>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f023 0303 	bic.w	r3, r3, #3
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	431d      	orrs	r5, r3
 8008866:	81a5      	strh	r5, [r4, #12]
 8008868:	e7cf      	b.n	800880a <__smakebuf_r+0x18>

0800886a <__sccl>:
 800886a:	b570      	push	{r4, r5, r6, lr}
 800886c:	780b      	ldrb	r3, [r1, #0]
 800886e:	4604      	mov	r4, r0
 8008870:	2b5e      	cmp	r3, #94	@ 0x5e
 8008872:	bf0b      	itete	eq
 8008874:	784b      	ldrbeq	r3, [r1, #1]
 8008876:	1c4a      	addne	r2, r1, #1
 8008878:	1c8a      	addeq	r2, r1, #2
 800887a:	2100      	movne	r1, #0
 800887c:	bf08      	it	eq
 800887e:	2101      	moveq	r1, #1
 8008880:	3801      	subs	r0, #1
 8008882:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008886:	f800 1f01 	strb.w	r1, [r0, #1]!
 800888a:	42a8      	cmp	r0, r5
 800888c:	d1fb      	bne.n	8008886 <__sccl+0x1c>
 800888e:	b90b      	cbnz	r3, 8008894 <__sccl+0x2a>
 8008890:	1e50      	subs	r0, r2, #1
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	f081 0101 	eor.w	r1, r1, #1
 8008898:	4610      	mov	r0, r2
 800889a:	54e1      	strb	r1, [r4, r3]
 800889c:	4602      	mov	r2, r0
 800889e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80088a2:	2d2d      	cmp	r5, #45	@ 0x2d
 80088a4:	d005      	beq.n	80088b2 <__sccl+0x48>
 80088a6:	2d5d      	cmp	r5, #93	@ 0x5d
 80088a8:	d016      	beq.n	80088d8 <__sccl+0x6e>
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	d0f1      	beq.n	8008892 <__sccl+0x28>
 80088ae:	462b      	mov	r3, r5
 80088b0:	e7f2      	b.n	8008898 <__sccl+0x2e>
 80088b2:	7846      	ldrb	r6, [r0, #1]
 80088b4:	2e5d      	cmp	r6, #93	@ 0x5d
 80088b6:	d0fa      	beq.n	80088ae <__sccl+0x44>
 80088b8:	42b3      	cmp	r3, r6
 80088ba:	dcf8      	bgt.n	80088ae <__sccl+0x44>
 80088bc:	461a      	mov	r2, r3
 80088be:	3002      	adds	r0, #2
 80088c0:	3201      	adds	r2, #1
 80088c2:	4296      	cmp	r6, r2
 80088c4:	54a1      	strb	r1, [r4, r2]
 80088c6:	dcfb      	bgt.n	80088c0 <__sccl+0x56>
 80088c8:	1af2      	subs	r2, r6, r3
 80088ca:	3a01      	subs	r2, #1
 80088cc:	42b3      	cmp	r3, r6
 80088ce:	bfa8      	it	ge
 80088d0:	2200      	movge	r2, #0
 80088d2:	1c5d      	adds	r5, r3, #1
 80088d4:	18ab      	adds	r3, r5, r2
 80088d6:	e7e1      	b.n	800889c <__sccl+0x32>
 80088d8:	4610      	mov	r0, r2
 80088da:	e7da      	b.n	8008892 <__sccl+0x28>

080088dc <__submore>:
 80088dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	460c      	mov	r4, r1
 80088e2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80088e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088e8:	4299      	cmp	r1, r3
 80088ea:	d11b      	bne.n	8008924 <__submore+0x48>
 80088ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80088f0:	f7fd fd58 	bl	80063a4 <_malloc_r>
 80088f4:	b918      	cbnz	r0, 80088fe <__submore+0x22>
 80088f6:	f04f 30ff 	mov.w	r0, #4294967295
 80088fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008902:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008904:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008908:	6360      	str	r0, [r4, #52]	@ 0x34
 800890a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800890e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008912:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008916:	7043      	strb	r3, [r0, #1]
 8008918:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800891c:	7003      	strb	r3, [r0, #0]
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	2000      	movs	r0, #0
 8008922:	e7ea      	b.n	80088fa <__submore+0x1e>
 8008924:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008926:	0077      	lsls	r7, r6, #1
 8008928:	463a      	mov	r2, r7
 800892a:	f000 fbf0 	bl	800910e <_realloc_r>
 800892e:	4605      	mov	r5, r0
 8008930:	2800      	cmp	r0, #0
 8008932:	d0e0      	beq.n	80088f6 <__submore+0x1a>
 8008934:	eb00 0806 	add.w	r8, r0, r6
 8008938:	4601      	mov	r1, r0
 800893a:	4632      	mov	r2, r6
 800893c:	4640      	mov	r0, r8
 800893e:	f7fc fe4e 	bl	80055de <memcpy>
 8008942:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008946:	f8c4 8000 	str.w	r8, [r4]
 800894a:	e7e9      	b.n	8008920 <__submore+0x44>

0800894c <memmove>:
 800894c:	4288      	cmp	r0, r1
 800894e:	b510      	push	{r4, lr}
 8008950:	eb01 0402 	add.w	r4, r1, r2
 8008954:	d902      	bls.n	800895c <memmove+0x10>
 8008956:	4284      	cmp	r4, r0
 8008958:	4623      	mov	r3, r4
 800895a:	d807      	bhi.n	800896c <memmove+0x20>
 800895c:	1e43      	subs	r3, r0, #1
 800895e:	42a1      	cmp	r1, r4
 8008960:	d008      	beq.n	8008974 <memmove+0x28>
 8008962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800896a:	e7f8      	b.n	800895e <memmove+0x12>
 800896c:	4601      	mov	r1, r0
 800896e:	4402      	add	r2, r0
 8008970:	428a      	cmp	r2, r1
 8008972:	d100      	bne.n	8008976 <memmove+0x2a>
 8008974:	bd10      	pop	{r4, pc}
 8008976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800897a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800897e:	e7f7      	b.n	8008970 <memmove+0x24>

08008980 <strncmp>:
 8008980:	b510      	push	{r4, lr}
 8008982:	b16a      	cbz	r2, 80089a0 <strncmp+0x20>
 8008984:	3901      	subs	r1, #1
 8008986:	1884      	adds	r4, r0, r2
 8008988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800898c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008990:	429a      	cmp	r2, r3
 8008992:	d103      	bne.n	800899c <strncmp+0x1c>
 8008994:	42a0      	cmp	r0, r4
 8008996:	d001      	beq.n	800899c <strncmp+0x1c>
 8008998:	2a00      	cmp	r2, #0
 800899a:	d1f5      	bne.n	8008988 <strncmp+0x8>
 800899c:	1ad0      	subs	r0, r2, r3
 800899e:	bd10      	pop	{r4, pc}
 80089a0:	4610      	mov	r0, r2
 80089a2:	e7fc      	b.n	800899e <strncmp+0x1e>

080089a4 <_fstat_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	2300      	movs	r3, #0
 80089a8:	4d06      	ldr	r5, [pc, #24]	@ (80089c4 <_fstat_r+0x20>)
 80089aa:	4604      	mov	r4, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	4611      	mov	r1, r2
 80089b0:	602b      	str	r3, [r5, #0]
 80089b2:	f7f9 f897 	bl	8001ae4 <_fstat>
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d102      	bne.n	80089c0 <_fstat_r+0x1c>
 80089ba:	682b      	ldr	r3, [r5, #0]
 80089bc:	b103      	cbz	r3, 80089c0 <_fstat_r+0x1c>
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	bd38      	pop	{r3, r4, r5, pc}
 80089c2:	bf00      	nop
 80089c4:	20000444 	.word	0x20000444

080089c8 <_isatty_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	2300      	movs	r3, #0
 80089cc:	4d05      	ldr	r5, [pc, #20]	@ (80089e4 <_isatty_r+0x1c>)
 80089ce:	4604      	mov	r4, r0
 80089d0:	4608      	mov	r0, r1
 80089d2:	602b      	str	r3, [r5, #0]
 80089d4:	f7f9 f895 	bl	8001b02 <_isatty>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d102      	bne.n	80089e2 <_isatty_r+0x1a>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	b103      	cbz	r3, 80089e2 <_isatty_r+0x1a>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	20000444 	.word	0x20000444

080089e8 <_sbrk_r>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	2300      	movs	r3, #0
 80089ec:	4d05      	ldr	r5, [pc, #20]	@ (8008a04 <_sbrk_r+0x1c>)
 80089ee:	4604      	mov	r4, r0
 80089f0:	4608      	mov	r0, r1
 80089f2:	602b      	str	r3, [r5, #0]
 80089f4:	f7f9 f89c 	bl	8001b30 <_sbrk>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_sbrk_r+0x1a>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_sbrk_r+0x1a>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	20000444 	.word	0x20000444

08008a08 <nan>:
 8008a08:	2000      	movs	r0, #0
 8008a0a:	4901      	ldr	r1, [pc, #4]	@ (8008a10 <nan+0x8>)
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	7ff80000 	.word	0x7ff80000

08008a14 <__assert_func>:
 8008a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a16:	4614      	mov	r4, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4b09      	ldr	r3, [pc, #36]	@ (8008a40 <__assert_func+0x2c>)
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68d8      	ldr	r0, [r3, #12]
 8008a22:	b14c      	cbz	r4, 8008a38 <__assert_func+0x24>
 8008a24:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <__assert_func+0x30>)
 8008a26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a2a:	9100      	str	r1, [sp, #0]
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	4906      	ldr	r1, [pc, #24]	@ (8008a48 <__assert_func+0x34>)
 8008a30:	f000 fc1a 	bl	8009268 <fiprintf>
 8008a34:	f000 fc2a 	bl	800928c <abort>
 8008a38:	4b04      	ldr	r3, [pc, #16]	@ (8008a4c <__assert_func+0x38>)
 8008a3a:	461c      	mov	r4, r3
 8008a3c:	e7f3      	b.n	8008a26 <__assert_func+0x12>
 8008a3e:	bf00      	nop
 8008a40:	20000018 	.word	0x20000018
 8008a44:	080095b1 	.word	0x080095b1
 8008a48:	080095be 	.word	0x080095be
 8008a4c:	080095ec 	.word	0x080095ec

08008a50 <_calloc_r>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	fba1 5402 	umull	r5, r4, r1, r2
 8008a56:	b934      	cbnz	r4, 8008a66 <_calloc_r+0x16>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	f7fd fca3 	bl	80063a4 <_malloc_r>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	b928      	cbnz	r0, 8008a6e <_calloc_r+0x1e>
 8008a62:	4630      	mov	r0, r6
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
 8008a66:	220c      	movs	r2, #12
 8008a68:	2600      	movs	r6, #0
 8008a6a:	6002      	str	r2, [r0, #0]
 8008a6c:	e7f9      	b.n	8008a62 <_calloc_r+0x12>
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4621      	mov	r1, r4
 8008a72:	f7fc fd27 	bl	80054c4 <memset>
 8008a76:	e7f4      	b.n	8008a62 <_calloc_r+0x12>

08008a78 <rshift>:
 8008a78:	6903      	ldr	r3, [r0, #16]
 8008a7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a82:	f100 0414 	add.w	r4, r0, #20
 8008a86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a8a:	dd46      	ble.n	8008b1a <rshift+0xa2>
 8008a8c:	f011 011f 	ands.w	r1, r1, #31
 8008a90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a98:	d10c      	bne.n	8008ab4 <rshift+0x3c>
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f100 0710 	add.w	r7, r0, #16
 8008aa0:	42b1      	cmp	r1, r6
 8008aa2:	d335      	bcc.n	8008b10 <rshift+0x98>
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	1eea      	subs	r2, r5, #3
 8008aaa:	4296      	cmp	r6, r2
 8008aac:	bf38      	it	cc
 8008aae:	2300      	movcc	r3, #0
 8008ab0:	4423      	add	r3, r4
 8008ab2:	e015      	b.n	8008ae0 <rshift+0x68>
 8008ab4:	46a1      	mov	r9, r4
 8008ab6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008aba:	f1c1 0820 	rsb	r8, r1, #32
 8008abe:	40cf      	lsrs	r7, r1
 8008ac0:	f105 0e04 	add.w	lr, r5, #4
 8008ac4:	4576      	cmp	r6, lr
 8008ac6:	46f4      	mov	ip, lr
 8008ac8:	d816      	bhi.n	8008af8 <rshift+0x80>
 8008aca:	1a9a      	subs	r2, r3, r2
 8008acc:	0092      	lsls	r2, r2, #2
 8008ace:	3a04      	subs	r2, #4
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	42ae      	cmp	r6, r5
 8008ad4:	bf38      	it	cc
 8008ad6:	2200      	movcc	r2, #0
 8008ad8:	18a3      	adds	r3, r4, r2
 8008ada:	50a7      	str	r7, [r4, r2]
 8008adc:	b107      	cbz	r7, 8008ae0 <rshift+0x68>
 8008ade:	3304      	adds	r3, #4
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	eba3 0204 	sub.w	r2, r3, r4
 8008ae6:	bf08      	it	eq
 8008ae8:	2300      	moveq	r3, #0
 8008aea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008aee:	6102      	str	r2, [r0, #16]
 8008af0:	bf08      	it	eq
 8008af2:	6143      	streq	r3, [r0, #20]
 8008af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008af8:	f8dc c000 	ldr.w	ip, [ip]
 8008afc:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b00:	ea4c 0707 	orr.w	r7, ip, r7
 8008b04:	f849 7b04 	str.w	r7, [r9], #4
 8008b08:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b0c:	40cf      	lsrs	r7, r1
 8008b0e:	e7d9      	b.n	8008ac4 <rshift+0x4c>
 8008b10:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b14:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b18:	e7c2      	b.n	8008aa0 <rshift+0x28>
 8008b1a:	4623      	mov	r3, r4
 8008b1c:	e7e0      	b.n	8008ae0 <rshift+0x68>

08008b1e <__hexdig_fun>:
 8008b1e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d802      	bhi.n	8008b2c <__hexdig_fun+0xe>
 8008b26:	3820      	subs	r0, #32
 8008b28:	b2c0      	uxtb	r0, r0
 8008b2a:	4770      	bx	lr
 8008b2c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b30:	2b05      	cmp	r3, #5
 8008b32:	d801      	bhi.n	8008b38 <__hexdig_fun+0x1a>
 8008b34:	3847      	subs	r0, #71	@ 0x47
 8008b36:	e7f7      	b.n	8008b28 <__hexdig_fun+0xa>
 8008b38:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b3c:	2b05      	cmp	r3, #5
 8008b3e:	d801      	bhi.n	8008b44 <__hexdig_fun+0x26>
 8008b40:	3827      	subs	r0, #39	@ 0x27
 8008b42:	e7f1      	b.n	8008b28 <__hexdig_fun+0xa>
 8008b44:	2000      	movs	r0, #0
 8008b46:	4770      	bx	lr

08008b48 <__gethex>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	468a      	mov	sl, r1
 8008b4e:	4690      	mov	r8, r2
 8008b50:	b085      	sub	sp, #20
 8008b52:	9302      	str	r3, [sp, #8]
 8008b54:	680b      	ldr	r3, [r1, #0]
 8008b56:	9001      	str	r0, [sp, #4]
 8008b58:	1c9c      	adds	r4, r3, #2
 8008b5a:	46a1      	mov	r9, r4
 8008b5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008b60:	2830      	cmp	r0, #48	@ 0x30
 8008b62:	d0fa      	beq.n	8008b5a <__gethex+0x12>
 8008b64:	eba9 0303 	sub.w	r3, r9, r3
 8008b68:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b6c:	f7ff ffd7 	bl	8008b1e <__hexdig_fun>
 8008b70:	4605      	mov	r5, r0
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d168      	bne.n	8008c48 <__gethex+0x100>
 8008b76:	2201      	movs	r2, #1
 8008b78:	4648      	mov	r0, r9
 8008b7a:	499f      	ldr	r1, [pc, #636]	@ (8008df8 <__gethex+0x2b0>)
 8008b7c:	f7ff ff00 	bl	8008980 <strncmp>
 8008b80:	4607      	mov	r7, r0
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d167      	bne.n	8008c56 <__gethex+0x10e>
 8008b86:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008b8a:	4626      	mov	r6, r4
 8008b8c:	f7ff ffc7 	bl	8008b1e <__hexdig_fun>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d062      	beq.n	8008c5a <__gethex+0x112>
 8008b94:	4623      	mov	r3, r4
 8008b96:	7818      	ldrb	r0, [r3, #0]
 8008b98:	4699      	mov	r9, r3
 8008b9a:	2830      	cmp	r0, #48	@ 0x30
 8008b9c:	f103 0301 	add.w	r3, r3, #1
 8008ba0:	d0f9      	beq.n	8008b96 <__gethex+0x4e>
 8008ba2:	f7ff ffbc 	bl	8008b1e <__hexdig_fun>
 8008ba6:	fab0 f580 	clz	r5, r0
 8008baa:	f04f 0b01 	mov.w	fp, #1
 8008bae:	096d      	lsrs	r5, r5, #5
 8008bb0:	464a      	mov	r2, r9
 8008bb2:	4616      	mov	r6, r2
 8008bb4:	7830      	ldrb	r0, [r6, #0]
 8008bb6:	3201      	adds	r2, #1
 8008bb8:	f7ff ffb1 	bl	8008b1e <__hexdig_fun>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d1f8      	bne.n	8008bb2 <__gethex+0x6a>
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	498c      	ldr	r1, [pc, #560]	@ (8008df8 <__gethex+0x2b0>)
 8008bc6:	f7ff fedb 	bl	8008980 <strncmp>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d13f      	bne.n	8008c4e <__gethex+0x106>
 8008bce:	b944      	cbnz	r4, 8008be2 <__gethex+0x9a>
 8008bd0:	1c74      	adds	r4, r6, #1
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	4616      	mov	r6, r2
 8008bd6:	7830      	ldrb	r0, [r6, #0]
 8008bd8:	3201      	adds	r2, #1
 8008bda:	f7ff ffa0 	bl	8008b1e <__hexdig_fun>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d1f8      	bne.n	8008bd4 <__gethex+0x8c>
 8008be2:	1ba4      	subs	r4, r4, r6
 8008be4:	00a7      	lsls	r7, r4, #2
 8008be6:	7833      	ldrb	r3, [r6, #0]
 8008be8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008bec:	2b50      	cmp	r3, #80	@ 0x50
 8008bee:	d13e      	bne.n	8008c6e <__gethex+0x126>
 8008bf0:	7873      	ldrb	r3, [r6, #1]
 8008bf2:	2b2b      	cmp	r3, #43	@ 0x2b
 8008bf4:	d033      	beq.n	8008c5e <__gethex+0x116>
 8008bf6:	2b2d      	cmp	r3, #45	@ 0x2d
 8008bf8:	d034      	beq.n	8008c64 <__gethex+0x11c>
 8008bfa:	2400      	movs	r4, #0
 8008bfc:	1c71      	adds	r1, r6, #1
 8008bfe:	7808      	ldrb	r0, [r1, #0]
 8008c00:	f7ff ff8d 	bl	8008b1e <__hexdig_fun>
 8008c04:	1e43      	subs	r3, r0, #1
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b18      	cmp	r3, #24
 8008c0a:	d830      	bhi.n	8008c6e <__gethex+0x126>
 8008c0c:	f1a0 0210 	sub.w	r2, r0, #16
 8008c10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c14:	f7ff ff83 	bl	8008b1e <__hexdig_fun>
 8008c18:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c1c:	fa5f fc8c 	uxtb.w	ip, ip
 8008c20:	f1bc 0f18 	cmp.w	ip, #24
 8008c24:	f04f 030a 	mov.w	r3, #10
 8008c28:	d91e      	bls.n	8008c68 <__gethex+0x120>
 8008c2a:	b104      	cbz	r4, 8008c2e <__gethex+0xe6>
 8008c2c:	4252      	negs	r2, r2
 8008c2e:	4417      	add	r7, r2
 8008c30:	f8ca 1000 	str.w	r1, [sl]
 8008c34:	b1ed      	cbz	r5, 8008c72 <__gethex+0x12a>
 8008c36:	f1bb 0f00 	cmp.w	fp, #0
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2506      	moveq	r5, #6
 8008c3e:	2500      	movne	r5, #0
 8008c40:	4628      	mov	r0, r5
 8008c42:	b005      	add	sp, #20
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	2500      	movs	r5, #0
 8008c4a:	462c      	mov	r4, r5
 8008c4c:	e7b0      	b.n	8008bb0 <__gethex+0x68>
 8008c4e:	2c00      	cmp	r4, #0
 8008c50:	d1c7      	bne.n	8008be2 <__gethex+0x9a>
 8008c52:	4627      	mov	r7, r4
 8008c54:	e7c7      	b.n	8008be6 <__gethex+0x9e>
 8008c56:	464e      	mov	r6, r9
 8008c58:	462f      	mov	r7, r5
 8008c5a:	2501      	movs	r5, #1
 8008c5c:	e7c3      	b.n	8008be6 <__gethex+0x9e>
 8008c5e:	2400      	movs	r4, #0
 8008c60:	1cb1      	adds	r1, r6, #2
 8008c62:	e7cc      	b.n	8008bfe <__gethex+0xb6>
 8008c64:	2401      	movs	r4, #1
 8008c66:	e7fb      	b.n	8008c60 <__gethex+0x118>
 8008c68:	fb03 0002 	mla	r0, r3, r2, r0
 8008c6c:	e7ce      	b.n	8008c0c <__gethex+0xc4>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	e7de      	b.n	8008c30 <__gethex+0xe8>
 8008c72:	4629      	mov	r1, r5
 8008c74:	eba6 0309 	sub.w	r3, r6, r9
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	2b07      	cmp	r3, #7
 8008c7c:	dc0a      	bgt.n	8008c94 <__gethex+0x14c>
 8008c7e:	9801      	ldr	r0, [sp, #4]
 8008c80:	f7fd fc1c 	bl	80064bc <_Balloc>
 8008c84:	4604      	mov	r4, r0
 8008c86:	b940      	cbnz	r0, 8008c9a <__gethex+0x152>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	21e4      	movs	r1, #228	@ 0xe4
 8008c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8008dfc <__gethex+0x2b4>)
 8008c8e:	485c      	ldr	r0, [pc, #368]	@ (8008e00 <__gethex+0x2b8>)
 8008c90:	f7ff fec0 	bl	8008a14 <__assert_func>
 8008c94:	3101      	adds	r1, #1
 8008c96:	105b      	asrs	r3, r3, #1
 8008c98:	e7ef      	b.n	8008c7a <__gethex+0x132>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f100 0a14 	add.w	sl, r0, #20
 8008ca0:	4655      	mov	r5, sl
 8008ca2:	469b      	mov	fp, r3
 8008ca4:	45b1      	cmp	r9, r6
 8008ca6:	d337      	bcc.n	8008d18 <__gethex+0x1d0>
 8008ca8:	f845 bb04 	str.w	fp, [r5], #4
 8008cac:	eba5 050a 	sub.w	r5, r5, sl
 8008cb0:	10ad      	asrs	r5, r5, #2
 8008cb2:	6125      	str	r5, [r4, #16]
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f7fd fcf3 	bl	80066a0 <__hi0bits>
 8008cba:	016d      	lsls	r5, r5, #5
 8008cbc:	f8d8 6000 	ldr.w	r6, [r8]
 8008cc0:	1a2d      	subs	r5, r5, r0
 8008cc2:	42b5      	cmp	r5, r6
 8008cc4:	dd54      	ble.n	8008d70 <__gethex+0x228>
 8008cc6:	1bad      	subs	r5, r5, r6
 8008cc8:	4629      	mov	r1, r5
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f7fe f875 	bl	8006dba <__any_on>
 8008cd0:	4681      	mov	r9, r0
 8008cd2:	b178      	cbz	r0, 8008cf4 <__gethex+0x1ac>
 8008cd4:	f04f 0901 	mov.w	r9, #1
 8008cd8:	1e6b      	subs	r3, r5, #1
 8008cda:	1159      	asrs	r1, r3, #5
 8008cdc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ce0:	f003 021f 	and.w	r2, r3, #31
 8008ce4:	fa09 f202 	lsl.w	r2, r9, r2
 8008ce8:	420a      	tst	r2, r1
 8008cea:	d003      	beq.n	8008cf4 <__gethex+0x1ac>
 8008cec:	454b      	cmp	r3, r9
 8008cee:	dc36      	bgt.n	8008d5e <__gethex+0x216>
 8008cf0:	f04f 0902 	mov.w	r9, #2
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f7ff febe 	bl	8008a78 <rshift>
 8008cfc:	442f      	add	r7, r5
 8008cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d02:	42bb      	cmp	r3, r7
 8008d04:	da42      	bge.n	8008d8c <__gethex+0x244>
 8008d06:	4621      	mov	r1, r4
 8008d08:	9801      	ldr	r0, [sp, #4]
 8008d0a:	f7fd fc17 	bl	800653c <_Bfree>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d12:	25a3      	movs	r5, #163	@ 0xa3
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	e793      	b.n	8008c40 <__gethex+0xf8>
 8008d18:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d1c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d1e:	d012      	beq.n	8008d46 <__gethex+0x1fe>
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d104      	bne.n	8008d2e <__gethex+0x1e6>
 8008d24:	f845 bb04 	str.w	fp, [r5], #4
 8008d28:	f04f 0b00 	mov.w	fp, #0
 8008d2c:	465b      	mov	r3, fp
 8008d2e:	7830      	ldrb	r0, [r6, #0]
 8008d30:	9303      	str	r3, [sp, #12]
 8008d32:	f7ff fef4 	bl	8008b1e <__hexdig_fun>
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	f000 000f 	and.w	r0, r0, #15
 8008d3c:	4098      	lsls	r0, r3
 8008d3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d42:	3304      	adds	r3, #4
 8008d44:	e7ae      	b.n	8008ca4 <__gethex+0x15c>
 8008d46:	45b1      	cmp	r9, r6
 8008d48:	d8ea      	bhi.n	8008d20 <__gethex+0x1d8>
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	492a      	ldr	r1, [pc, #168]	@ (8008df8 <__gethex+0x2b0>)
 8008d50:	9303      	str	r3, [sp, #12]
 8008d52:	f7ff fe15 	bl	8008980 <strncmp>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d1e1      	bne.n	8008d20 <__gethex+0x1d8>
 8008d5c:	e7a2      	b.n	8008ca4 <__gethex+0x15c>
 8008d5e:	4620      	mov	r0, r4
 8008d60:	1ea9      	subs	r1, r5, #2
 8008d62:	f7fe f82a 	bl	8006dba <__any_on>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d0c2      	beq.n	8008cf0 <__gethex+0x1a8>
 8008d6a:	f04f 0903 	mov.w	r9, #3
 8008d6e:	e7c1      	b.n	8008cf4 <__gethex+0x1ac>
 8008d70:	da09      	bge.n	8008d86 <__gethex+0x23e>
 8008d72:	1b75      	subs	r5, r6, r5
 8008d74:	4621      	mov	r1, r4
 8008d76:	462a      	mov	r2, r5
 8008d78:	9801      	ldr	r0, [sp, #4]
 8008d7a:	f7fd fdef 	bl	800695c <__lshift>
 8008d7e:	4604      	mov	r4, r0
 8008d80:	1b7f      	subs	r7, r7, r5
 8008d82:	f100 0a14 	add.w	sl, r0, #20
 8008d86:	f04f 0900 	mov.w	r9, #0
 8008d8a:	e7b8      	b.n	8008cfe <__gethex+0x1b6>
 8008d8c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d90:	42bd      	cmp	r5, r7
 8008d92:	dd6f      	ble.n	8008e74 <__gethex+0x32c>
 8008d94:	1bed      	subs	r5, r5, r7
 8008d96:	42ae      	cmp	r6, r5
 8008d98:	dc34      	bgt.n	8008e04 <__gethex+0x2bc>
 8008d9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d022      	beq.n	8008de8 <__gethex+0x2a0>
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d024      	beq.n	8008df0 <__gethex+0x2a8>
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d115      	bne.n	8008dd6 <__gethex+0x28e>
 8008daa:	42ae      	cmp	r6, r5
 8008dac:	d113      	bne.n	8008dd6 <__gethex+0x28e>
 8008dae:	2e01      	cmp	r6, #1
 8008db0:	d10b      	bne.n	8008dca <__gethex+0x282>
 8008db2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008db6:	9a02      	ldr	r2, [sp, #8]
 8008db8:	2562      	movs	r5, #98	@ 0x62
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	f8ca 3000 	str.w	r3, [sl]
 8008dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dc6:	601c      	str	r4, [r3, #0]
 8008dc8:	e73a      	b.n	8008c40 <__gethex+0xf8>
 8008dca:	4620      	mov	r0, r4
 8008dcc:	1e71      	subs	r1, r6, #1
 8008dce:	f7fd fff4 	bl	8006dba <__any_on>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d1ed      	bne.n	8008db2 <__gethex+0x26a>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	9801      	ldr	r0, [sp, #4]
 8008dda:	f7fd fbaf 	bl	800653c <_Bfree>
 8008dde:	2300      	movs	r3, #0
 8008de0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008de2:	2550      	movs	r5, #80	@ 0x50
 8008de4:	6013      	str	r3, [r2, #0]
 8008de6:	e72b      	b.n	8008c40 <__gethex+0xf8>
 8008de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1f3      	bne.n	8008dd6 <__gethex+0x28e>
 8008dee:	e7e0      	b.n	8008db2 <__gethex+0x26a>
 8008df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1dd      	bne.n	8008db2 <__gethex+0x26a>
 8008df6:	e7ee      	b.n	8008dd6 <__gethex+0x28e>
 8008df8:	0800957b 	.word	0x0800957b
 8008dfc:	08009511 	.word	0x08009511
 8008e00:	080095ed 	.word	0x080095ed
 8008e04:	1e6f      	subs	r7, r5, #1
 8008e06:	f1b9 0f00 	cmp.w	r9, #0
 8008e0a:	d130      	bne.n	8008e6e <__gethex+0x326>
 8008e0c:	b127      	cbz	r7, 8008e18 <__gethex+0x2d0>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7fd ffd2 	bl	8006dba <__any_on>
 8008e16:	4681      	mov	r9, r0
 8008e18:	2301      	movs	r3, #1
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	1b76      	subs	r6, r6, r5
 8008e1e:	2502      	movs	r5, #2
 8008e20:	117a      	asrs	r2, r7, #5
 8008e22:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e26:	f007 071f 	and.w	r7, r7, #31
 8008e2a:	40bb      	lsls	r3, r7
 8008e2c:	4213      	tst	r3, r2
 8008e2e:	4620      	mov	r0, r4
 8008e30:	bf18      	it	ne
 8008e32:	f049 0902 	orrne.w	r9, r9, #2
 8008e36:	f7ff fe1f 	bl	8008a78 <rshift>
 8008e3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e3e:	f1b9 0f00 	cmp.w	r9, #0
 8008e42:	d047      	beq.n	8008ed4 <__gethex+0x38c>
 8008e44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d015      	beq.n	8008e78 <__gethex+0x330>
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d017      	beq.n	8008e80 <__gethex+0x338>
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d109      	bne.n	8008e68 <__gethex+0x320>
 8008e54:	f019 0f02 	tst.w	r9, #2
 8008e58:	d006      	beq.n	8008e68 <__gethex+0x320>
 8008e5a:	f8da 3000 	ldr.w	r3, [sl]
 8008e5e:	ea49 0903 	orr.w	r9, r9, r3
 8008e62:	f019 0f01 	tst.w	r9, #1
 8008e66:	d10e      	bne.n	8008e86 <__gethex+0x33e>
 8008e68:	f045 0510 	orr.w	r5, r5, #16
 8008e6c:	e032      	b.n	8008ed4 <__gethex+0x38c>
 8008e6e:	f04f 0901 	mov.w	r9, #1
 8008e72:	e7d1      	b.n	8008e18 <__gethex+0x2d0>
 8008e74:	2501      	movs	r5, #1
 8008e76:	e7e2      	b.n	8008e3e <__gethex+0x2f6>
 8008e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e7a:	f1c3 0301 	rsb	r3, r3, #1
 8008e7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0f0      	beq.n	8008e68 <__gethex+0x320>
 8008e86:	f04f 0c00 	mov.w	ip, #0
 8008e8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e8e:	f104 0314 	add.w	r3, r4, #20
 8008e92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ea4:	d01b      	beq.n	8008ede <__gethex+0x396>
 8008ea6:	3201      	adds	r2, #1
 8008ea8:	6002      	str	r2, [r0, #0]
 8008eaa:	2d02      	cmp	r5, #2
 8008eac:	f104 0314 	add.w	r3, r4, #20
 8008eb0:	d13c      	bne.n	8008f2c <__gethex+0x3e4>
 8008eb2:	f8d8 2000 	ldr.w	r2, [r8]
 8008eb6:	3a01      	subs	r2, #1
 8008eb8:	42b2      	cmp	r2, r6
 8008eba:	d109      	bne.n	8008ed0 <__gethex+0x388>
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	1171      	asrs	r1, r6, #5
 8008ec0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ec4:	f006 061f 	and.w	r6, r6, #31
 8008ec8:	fa02 f606 	lsl.w	r6, r2, r6
 8008ecc:	421e      	tst	r6, r3
 8008ece:	d13a      	bne.n	8008f46 <__gethex+0x3fe>
 8008ed0:	f045 0520 	orr.w	r5, r5, #32
 8008ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed6:	601c      	str	r4, [r3, #0]
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	601f      	str	r7, [r3, #0]
 8008edc:	e6b0      	b.n	8008c40 <__gethex+0xf8>
 8008ede:	4299      	cmp	r1, r3
 8008ee0:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ee4:	d8d9      	bhi.n	8008e9a <__gethex+0x352>
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	459b      	cmp	fp, r3
 8008eea:	db17      	blt.n	8008f1c <__gethex+0x3d4>
 8008eec:	6861      	ldr	r1, [r4, #4]
 8008eee:	9801      	ldr	r0, [sp, #4]
 8008ef0:	3101      	adds	r1, #1
 8008ef2:	f7fd fae3 	bl	80064bc <_Balloc>
 8008ef6:	4681      	mov	r9, r0
 8008ef8:	b918      	cbnz	r0, 8008f02 <__gethex+0x3ba>
 8008efa:	4602      	mov	r2, r0
 8008efc:	2184      	movs	r1, #132	@ 0x84
 8008efe:	4b19      	ldr	r3, [pc, #100]	@ (8008f64 <__gethex+0x41c>)
 8008f00:	e6c5      	b.n	8008c8e <__gethex+0x146>
 8008f02:	6922      	ldr	r2, [r4, #16]
 8008f04:	f104 010c 	add.w	r1, r4, #12
 8008f08:	3202      	adds	r2, #2
 8008f0a:	0092      	lsls	r2, r2, #2
 8008f0c:	300c      	adds	r0, #12
 8008f0e:	f7fc fb66 	bl	80055de <memcpy>
 8008f12:	4621      	mov	r1, r4
 8008f14:	9801      	ldr	r0, [sp, #4]
 8008f16:	f7fd fb11 	bl	800653c <_Bfree>
 8008f1a:	464c      	mov	r4, r9
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	6122      	str	r2, [r4, #16]
 8008f22:	2201      	movs	r2, #1
 8008f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f28:	615a      	str	r2, [r3, #20]
 8008f2a:	e7be      	b.n	8008eaa <__gethex+0x362>
 8008f2c:	6922      	ldr	r2, [r4, #16]
 8008f2e:	455a      	cmp	r2, fp
 8008f30:	dd0b      	ble.n	8008f4a <__gethex+0x402>
 8008f32:	2101      	movs	r1, #1
 8008f34:	4620      	mov	r0, r4
 8008f36:	f7ff fd9f 	bl	8008a78 <rshift>
 8008f3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f3e:	3701      	adds	r7, #1
 8008f40:	42bb      	cmp	r3, r7
 8008f42:	f6ff aee0 	blt.w	8008d06 <__gethex+0x1be>
 8008f46:	2501      	movs	r5, #1
 8008f48:	e7c2      	b.n	8008ed0 <__gethex+0x388>
 8008f4a:	f016 061f 	ands.w	r6, r6, #31
 8008f4e:	d0fa      	beq.n	8008f46 <__gethex+0x3fe>
 8008f50:	4453      	add	r3, sl
 8008f52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f56:	f7fd fba3 	bl	80066a0 <__hi0bits>
 8008f5a:	f1c6 0620 	rsb	r6, r6, #32
 8008f5e:	42b0      	cmp	r0, r6
 8008f60:	dbe7      	blt.n	8008f32 <__gethex+0x3ea>
 8008f62:	e7f0      	b.n	8008f46 <__gethex+0x3fe>
 8008f64:	08009511 	.word	0x08009511

08008f68 <L_shift>:
 8008f68:	f1c2 0208 	rsb	r2, r2, #8
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	b570      	push	{r4, r5, r6, lr}
 8008f70:	f1c2 0620 	rsb	r6, r2, #32
 8008f74:	6843      	ldr	r3, [r0, #4]
 8008f76:	6804      	ldr	r4, [r0, #0]
 8008f78:	fa03 f506 	lsl.w	r5, r3, r6
 8008f7c:	432c      	orrs	r4, r5
 8008f7e:	40d3      	lsrs	r3, r2
 8008f80:	6004      	str	r4, [r0, #0]
 8008f82:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f86:	4288      	cmp	r0, r1
 8008f88:	d3f4      	bcc.n	8008f74 <L_shift+0xc>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}

08008f8c <__match>:
 8008f8c:	b530      	push	{r4, r5, lr}
 8008f8e:	6803      	ldr	r3, [r0, #0]
 8008f90:	3301      	adds	r3, #1
 8008f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f96:	b914      	cbnz	r4, 8008f9e <__match+0x12>
 8008f98:	6003      	str	r3, [r0, #0]
 8008f9a:	2001      	movs	r0, #1
 8008f9c:	bd30      	pop	{r4, r5, pc}
 8008f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008fa6:	2d19      	cmp	r5, #25
 8008fa8:	bf98      	it	ls
 8008faa:	3220      	addls	r2, #32
 8008fac:	42a2      	cmp	r2, r4
 8008fae:	d0f0      	beq.n	8008f92 <__match+0x6>
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e7f3      	b.n	8008f9c <__match+0x10>

08008fb4 <__hexnan>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	2500      	movs	r5, #0
 8008fba:	680b      	ldr	r3, [r1, #0]
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	115e      	asrs	r6, r3, #5
 8008fc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fc4:	f013 031f 	ands.w	r3, r3, #31
 8008fc8:	bf18      	it	ne
 8008fca:	3604      	addne	r6, #4
 8008fcc:	1f37      	subs	r7, r6, #4
 8008fce:	4690      	mov	r8, r2
 8008fd0:	46b9      	mov	r9, r7
 8008fd2:	463c      	mov	r4, r7
 8008fd4:	46ab      	mov	fp, r5
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	6801      	ldr	r1, [r0, #0]
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fe0:	9502      	str	r5, [sp, #8]
 8008fe2:	784a      	ldrb	r2, [r1, #1]
 8008fe4:	1c4b      	adds	r3, r1, #1
 8008fe6:	9303      	str	r3, [sp, #12]
 8008fe8:	b342      	cbz	r2, 800903c <__hexnan+0x88>
 8008fea:	4610      	mov	r0, r2
 8008fec:	9105      	str	r1, [sp, #20]
 8008fee:	9204      	str	r2, [sp, #16]
 8008ff0:	f7ff fd95 	bl	8008b1e <__hexdig_fun>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d151      	bne.n	800909c <__hexnan+0xe8>
 8008ff8:	9a04      	ldr	r2, [sp, #16]
 8008ffa:	9905      	ldr	r1, [sp, #20]
 8008ffc:	2a20      	cmp	r2, #32
 8008ffe:	d818      	bhi.n	8009032 <__hexnan+0x7e>
 8009000:	9b02      	ldr	r3, [sp, #8]
 8009002:	459b      	cmp	fp, r3
 8009004:	dd13      	ble.n	800902e <__hexnan+0x7a>
 8009006:	454c      	cmp	r4, r9
 8009008:	d206      	bcs.n	8009018 <__hexnan+0x64>
 800900a:	2d07      	cmp	r5, #7
 800900c:	dc04      	bgt.n	8009018 <__hexnan+0x64>
 800900e:	462a      	mov	r2, r5
 8009010:	4649      	mov	r1, r9
 8009012:	4620      	mov	r0, r4
 8009014:	f7ff ffa8 	bl	8008f68 <L_shift>
 8009018:	4544      	cmp	r4, r8
 800901a:	d952      	bls.n	80090c2 <__hexnan+0x10e>
 800901c:	2300      	movs	r3, #0
 800901e:	f1a4 0904 	sub.w	r9, r4, #4
 8009022:	f844 3c04 	str.w	r3, [r4, #-4]
 8009026:	461d      	mov	r5, r3
 8009028:	464c      	mov	r4, r9
 800902a:	f8cd b008 	str.w	fp, [sp, #8]
 800902e:	9903      	ldr	r1, [sp, #12]
 8009030:	e7d7      	b.n	8008fe2 <__hexnan+0x2e>
 8009032:	2a29      	cmp	r2, #41	@ 0x29
 8009034:	d157      	bne.n	80090e6 <__hexnan+0x132>
 8009036:	3102      	adds	r1, #2
 8009038:	f8ca 1000 	str.w	r1, [sl]
 800903c:	f1bb 0f00 	cmp.w	fp, #0
 8009040:	d051      	beq.n	80090e6 <__hexnan+0x132>
 8009042:	454c      	cmp	r4, r9
 8009044:	d206      	bcs.n	8009054 <__hexnan+0xa0>
 8009046:	2d07      	cmp	r5, #7
 8009048:	dc04      	bgt.n	8009054 <__hexnan+0xa0>
 800904a:	462a      	mov	r2, r5
 800904c:	4649      	mov	r1, r9
 800904e:	4620      	mov	r0, r4
 8009050:	f7ff ff8a 	bl	8008f68 <L_shift>
 8009054:	4544      	cmp	r4, r8
 8009056:	d936      	bls.n	80090c6 <__hexnan+0x112>
 8009058:	4623      	mov	r3, r4
 800905a:	f1a8 0204 	sub.w	r2, r8, #4
 800905e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009062:	429f      	cmp	r7, r3
 8009064:	f842 1f04 	str.w	r1, [r2, #4]!
 8009068:	d2f9      	bcs.n	800905e <__hexnan+0xaa>
 800906a:	1b3b      	subs	r3, r7, r4
 800906c:	f023 0303 	bic.w	r3, r3, #3
 8009070:	3304      	adds	r3, #4
 8009072:	3401      	adds	r4, #1
 8009074:	3e03      	subs	r6, #3
 8009076:	42b4      	cmp	r4, r6
 8009078:	bf88      	it	hi
 800907a:	2304      	movhi	r3, #4
 800907c:	2200      	movs	r2, #0
 800907e:	4443      	add	r3, r8
 8009080:	f843 2b04 	str.w	r2, [r3], #4
 8009084:	429f      	cmp	r7, r3
 8009086:	d2fb      	bcs.n	8009080 <__hexnan+0xcc>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	b91b      	cbnz	r3, 8009094 <__hexnan+0xe0>
 800908c:	4547      	cmp	r7, r8
 800908e:	d128      	bne.n	80090e2 <__hexnan+0x12e>
 8009090:	2301      	movs	r3, #1
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	2005      	movs	r0, #5
 8009096:	b007      	add	sp, #28
 8009098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909c:	3501      	adds	r5, #1
 800909e:	2d08      	cmp	r5, #8
 80090a0:	f10b 0b01 	add.w	fp, fp, #1
 80090a4:	dd06      	ble.n	80090b4 <__hexnan+0x100>
 80090a6:	4544      	cmp	r4, r8
 80090a8:	d9c1      	bls.n	800902e <__hexnan+0x7a>
 80090aa:	2300      	movs	r3, #0
 80090ac:	2501      	movs	r5, #1
 80090ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80090b2:	3c04      	subs	r4, #4
 80090b4:	6822      	ldr	r2, [r4, #0]
 80090b6:	f000 000f 	and.w	r0, r0, #15
 80090ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090be:	6020      	str	r0, [r4, #0]
 80090c0:	e7b5      	b.n	800902e <__hexnan+0x7a>
 80090c2:	2508      	movs	r5, #8
 80090c4:	e7b3      	b.n	800902e <__hexnan+0x7a>
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0dd      	beq.n	8009088 <__hexnan+0xd4>
 80090cc:	f04f 32ff 	mov.w	r2, #4294967295
 80090d0:	f1c3 0320 	rsb	r3, r3, #32
 80090d4:	40da      	lsrs	r2, r3
 80090d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80090da:	4013      	ands	r3, r2
 80090dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80090e0:	e7d2      	b.n	8009088 <__hexnan+0xd4>
 80090e2:	3f04      	subs	r7, #4
 80090e4:	e7d0      	b.n	8009088 <__hexnan+0xd4>
 80090e6:	2004      	movs	r0, #4
 80090e8:	e7d5      	b.n	8009096 <__hexnan+0xe2>

080090ea <__ascii_mbtowc>:
 80090ea:	b082      	sub	sp, #8
 80090ec:	b901      	cbnz	r1, 80090f0 <__ascii_mbtowc+0x6>
 80090ee:	a901      	add	r1, sp, #4
 80090f0:	b142      	cbz	r2, 8009104 <__ascii_mbtowc+0x1a>
 80090f2:	b14b      	cbz	r3, 8009108 <__ascii_mbtowc+0x1e>
 80090f4:	7813      	ldrb	r3, [r2, #0]
 80090f6:	600b      	str	r3, [r1, #0]
 80090f8:	7812      	ldrb	r2, [r2, #0]
 80090fa:	1e10      	subs	r0, r2, #0
 80090fc:	bf18      	it	ne
 80090fe:	2001      	movne	r0, #1
 8009100:	b002      	add	sp, #8
 8009102:	4770      	bx	lr
 8009104:	4610      	mov	r0, r2
 8009106:	e7fb      	b.n	8009100 <__ascii_mbtowc+0x16>
 8009108:	f06f 0001 	mvn.w	r0, #1
 800910c:	e7f8      	b.n	8009100 <__ascii_mbtowc+0x16>

0800910e <_realloc_r>:
 800910e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009112:	4607      	mov	r7, r0
 8009114:	4614      	mov	r4, r2
 8009116:	460d      	mov	r5, r1
 8009118:	b921      	cbnz	r1, 8009124 <_realloc_r+0x16>
 800911a:	4611      	mov	r1, r2
 800911c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	f7fd b940 	b.w	80063a4 <_malloc_r>
 8009124:	b92a      	cbnz	r2, 8009132 <_realloc_r+0x24>
 8009126:	f7fd f8cb 	bl	80062c0 <_free_r>
 800912a:	4625      	mov	r5, r4
 800912c:	4628      	mov	r0, r5
 800912e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009132:	f000 f8b2 	bl	800929a <_malloc_usable_size_r>
 8009136:	4284      	cmp	r4, r0
 8009138:	4606      	mov	r6, r0
 800913a:	d802      	bhi.n	8009142 <_realloc_r+0x34>
 800913c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009140:	d8f4      	bhi.n	800912c <_realloc_r+0x1e>
 8009142:	4621      	mov	r1, r4
 8009144:	4638      	mov	r0, r7
 8009146:	f7fd f92d 	bl	80063a4 <_malloc_r>
 800914a:	4680      	mov	r8, r0
 800914c:	b908      	cbnz	r0, 8009152 <_realloc_r+0x44>
 800914e:	4645      	mov	r5, r8
 8009150:	e7ec      	b.n	800912c <_realloc_r+0x1e>
 8009152:	42b4      	cmp	r4, r6
 8009154:	4622      	mov	r2, r4
 8009156:	4629      	mov	r1, r5
 8009158:	bf28      	it	cs
 800915a:	4632      	movcs	r2, r6
 800915c:	f7fc fa3f 	bl	80055de <memcpy>
 8009160:	4629      	mov	r1, r5
 8009162:	4638      	mov	r0, r7
 8009164:	f7fd f8ac 	bl	80062c0 <_free_r>
 8009168:	e7f1      	b.n	800914e <_realloc_r+0x40>
	...

0800916c <_strtoul_l.isra.0>:
 800916c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009170:	4686      	mov	lr, r0
 8009172:	460d      	mov	r5, r1
 8009174:	4e33      	ldr	r6, [pc, #204]	@ (8009244 <_strtoul_l.isra.0+0xd8>)
 8009176:	4628      	mov	r0, r5
 8009178:	f815 4b01 	ldrb.w	r4, [r5], #1
 800917c:	5d37      	ldrb	r7, [r6, r4]
 800917e:	f017 0708 	ands.w	r7, r7, #8
 8009182:	d1f8      	bne.n	8009176 <_strtoul_l.isra.0+0xa>
 8009184:	2c2d      	cmp	r4, #45	@ 0x2d
 8009186:	d110      	bne.n	80091aa <_strtoul_l.isra.0+0x3e>
 8009188:	2701      	movs	r7, #1
 800918a:	782c      	ldrb	r4, [r5, #0]
 800918c:	1c85      	adds	r5, r0, #2
 800918e:	f033 0010 	bics.w	r0, r3, #16
 8009192:	d115      	bne.n	80091c0 <_strtoul_l.isra.0+0x54>
 8009194:	2c30      	cmp	r4, #48	@ 0x30
 8009196:	d10d      	bne.n	80091b4 <_strtoul_l.isra.0+0x48>
 8009198:	7828      	ldrb	r0, [r5, #0]
 800919a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800919e:	2858      	cmp	r0, #88	@ 0x58
 80091a0:	d108      	bne.n	80091b4 <_strtoul_l.isra.0+0x48>
 80091a2:	786c      	ldrb	r4, [r5, #1]
 80091a4:	3502      	adds	r5, #2
 80091a6:	2310      	movs	r3, #16
 80091a8:	e00a      	b.n	80091c0 <_strtoul_l.isra.0+0x54>
 80091aa:	2c2b      	cmp	r4, #43	@ 0x2b
 80091ac:	bf04      	itt	eq
 80091ae:	782c      	ldrbeq	r4, [r5, #0]
 80091b0:	1c85      	addeq	r5, r0, #2
 80091b2:	e7ec      	b.n	800918e <_strtoul_l.isra.0+0x22>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1f6      	bne.n	80091a6 <_strtoul_l.isra.0+0x3a>
 80091b8:	2c30      	cmp	r4, #48	@ 0x30
 80091ba:	bf14      	ite	ne
 80091bc:	230a      	movne	r3, #10
 80091be:	2308      	moveq	r3, #8
 80091c0:	f04f 38ff 	mov.w	r8, #4294967295
 80091c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80091c8:	2600      	movs	r6, #0
 80091ca:	fb03 f908 	mul.w	r9, r3, r8
 80091ce:	4630      	mov	r0, r6
 80091d0:	ea6f 0909 	mvn.w	r9, r9
 80091d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80091d8:	f1bc 0f09 	cmp.w	ip, #9
 80091dc:	d810      	bhi.n	8009200 <_strtoul_l.isra.0+0x94>
 80091de:	4664      	mov	r4, ip
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	dd1e      	ble.n	8009222 <_strtoul_l.isra.0+0xb6>
 80091e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80091e8:	d007      	beq.n	80091fa <_strtoul_l.isra.0+0x8e>
 80091ea:	4580      	cmp	r8, r0
 80091ec:	d316      	bcc.n	800921c <_strtoul_l.isra.0+0xb0>
 80091ee:	d101      	bne.n	80091f4 <_strtoul_l.isra.0+0x88>
 80091f0:	45a1      	cmp	r9, r4
 80091f2:	db13      	blt.n	800921c <_strtoul_l.isra.0+0xb0>
 80091f4:	2601      	movs	r6, #1
 80091f6:	fb00 4003 	mla	r0, r0, r3, r4
 80091fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091fe:	e7e9      	b.n	80091d4 <_strtoul_l.isra.0+0x68>
 8009200:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009204:	f1bc 0f19 	cmp.w	ip, #25
 8009208:	d801      	bhi.n	800920e <_strtoul_l.isra.0+0xa2>
 800920a:	3c37      	subs	r4, #55	@ 0x37
 800920c:	e7e8      	b.n	80091e0 <_strtoul_l.isra.0+0x74>
 800920e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009212:	f1bc 0f19 	cmp.w	ip, #25
 8009216:	d804      	bhi.n	8009222 <_strtoul_l.isra.0+0xb6>
 8009218:	3c57      	subs	r4, #87	@ 0x57
 800921a:	e7e1      	b.n	80091e0 <_strtoul_l.isra.0+0x74>
 800921c:	f04f 36ff 	mov.w	r6, #4294967295
 8009220:	e7eb      	b.n	80091fa <_strtoul_l.isra.0+0x8e>
 8009222:	1c73      	adds	r3, r6, #1
 8009224:	d106      	bne.n	8009234 <_strtoul_l.isra.0+0xc8>
 8009226:	2322      	movs	r3, #34	@ 0x22
 8009228:	4630      	mov	r0, r6
 800922a:	f8ce 3000 	str.w	r3, [lr]
 800922e:	b932      	cbnz	r2, 800923e <_strtoul_l.isra.0+0xd2>
 8009230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009234:	b107      	cbz	r7, 8009238 <_strtoul_l.isra.0+0xcc>
 8009236:	4240      	negs	r0, r0
 8009238:	2a00      	cmp	r2, #0
 800923a:	d0f9      	beq.n	8009230 <_strtoul_l.isra.0+0xc4>
 800923c:	b106      	cbz	r6, 8009240 <_strtoul_l.isra.0+0xd4>
 800923e:	1e69      	subs	r1, r5, #1
 8009240:	6011      	str	r1, [r2, #0]
 8009242:	e7f5      	b.n	8009230 <_strtoul_l.isra.0+0xc4>
 8009244:	080097a1 	.word	0x080097a1

08009248 <_strtoul_r>:
 8009248:	f7ff bf90 	b.w	800916c <_strtoul_l.isra.0>

0800924c <__ascii_wctomb>:
 800924c:	4603      	mov	r3, r0
 800924e:	4608      	mov	r0, r1
 8009250:	b141      	cbz	r1, 8009264 <__ascii_wctomb+0x18>
 8009252:	2aff      	cmp	r2, #255	@ 0xff
 8009254:	d904      	bls.n	8009260 <__ascii_wctomb+0x14>
 8009256:	228a      	movs	r2, #138	@ 0x8a
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	4770      	bx	lr
 8009260:	2001      	movs	r0, #1
 8009262:	700a      	strb	r2, [r1, #0]
 8009264:	4770      	bx	lr
	...

08009268 <fiprintf>:
 8009268:	b40e      	push	{r1, r2, r3}
 800926a:	b503      	push	{r0, r1, lr}
 800926c:	4601      	mov	r1, r0
 800926e:	ab03      	add	r3, sp, #12
 8009270:	4805      	ldr	r0, [pc, #20]	@ (8009288 <fiprintf+0x20>)
 8009272:	f853 2b04 	ldr.w	r2, [r3], #4
 8009276:	6800      	ldr	r0, [r0, #0]
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	f7fe ff89 	bl	8008190 <_vfiprintf_r>
 800927e:	b002      	add	sp, #8
 8009280:	f85d eb04 	ldr.w	lr, [sp], #4
 8009284:	b003      	add	sp, #12
 8009286:	4770      	bx	lr
 8009288:	20000018 	.word	0x20000018

0800928c <abort>:
 800928c:	2006      	movs	r0, #6
 800928e:	b508      	push	{r3, lr}
 8009290:	f000 f834 	bl	80092fc <raise>
 8009294:	2001      	movs	r0, #1
 8009296:	f7f8 fbf2 	bl	8001a7e <_exit>

0800929a <_malloc_usable_size_r>:
 800929a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800929e:	1f18      	subs	r0, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	bfbc      	itt	lt
 80092a4:	580b      	ldrlt	r3, [r1, r0]
 80092a6:	18c0      	addlt	r0, r0, r3
 80092a8:	4770      	bx	lr

080092aa <_raise_r>:
 80092aa:	291f      	cmp	r1, #31
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4605      	mov	r5, r0
 80092b0:	460c      	mov	r4, r1
 80092b2:	d904      	bls.n	80092be <_raise_r+0x14>
 80092b4:	2316      	movs	r3, #22
 80092b6:	6003      	str	r3, [r0, #0]
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092c0:	b112      	cbz	r2, 80092c8 <_raise_r+0x1e>
 80092c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092c6:	b94b      	cbnz	r3, 80092dc <_raise_r+0x32>
 80092c8:	4628      	mov	r0, r5
 80092ca:	f000 f831 	bl	8009330 <_getpid_r>
 80092ce:	4622      	mov	r2, r4
 80092d0:	4601      	mov	r1, r0
 80092d2:	4628      	mov	r0, r5
 80092d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092d8:	f000 b818 	b.w	800930c <_kill_r>
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d00a      	beq.n	80092f6 <_raise_r+0x4c>
 80092e0:	1c59      	adds	r1, r3, #1
 80092e2:	d103      	bne.n	80092ec <_raise_r+0x42>
 80092e4:	2316      	movs	r3, #22
 80092e6:	6003      	str	r3, [r0, #0]
 80092e8:	2001      	movs	r0, #1
 80092ea:	e7e7      	b.n	80092bc <_raise_r+0x12>
 80092ec:	2100      	movs	r1, #0
 80092ee:	4620      	mov	r0, r4
 80092f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092f4:	4798      	blx	r3
 80092f6:	2000      	movs	r0, #0
 80092f8:	e7e0      	b.n	80092bc <_raise_r+0x12>
	...

080092fc <raise>:
 80092fc:	4b02      	ldr	r3, [pc, #8]	@ (8009308 <raise+0xc>)
 80092fe:	4601      	mov	r1, r0
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	f7ff bfd2 	b.w	80092aa <_raise_r>
 8009306:	bf00      	nop
 8009308:	20000018 	.word	0x20000018

0800930c <_kill_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	2300      	movs	r3, #0
 8009310:	4d06      	ldr	r5, [pc, #24]	@ (800932c <_kill_r+0x20>)
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	f7f8 fba0 	bl	8001a5e <_kill>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d102      	bne.n	8009328 <_kill_r+0x1c>
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	b103      	cbz	r3, 8009328 <_kill_r+0x1c>
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	bf00      	nop
 800932c:	20000444 	.word	0x20000444

08009330 <_getpid_r>:
 8009330:	f7f8 bb8e 	b.w	8001a50 <_getpid>

08009334 <_init>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr

08009340 <_fini>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr
