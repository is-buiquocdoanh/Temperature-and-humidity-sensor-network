
Node_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009890  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  080099a0  080099a0  0000a9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f18  08009f18  0000b1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f18  08009f18  0000af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f20  08009f20  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f20  08009f20  0000af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f24  08009f24  0000af24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009f28  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001e8  0800a110  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  0800a110  0000b5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001267e  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293a  00000000  00000000  0001d88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  000201d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea9  00000000  00000000  00021470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019822  00000000  00000000  00022319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015889  00000000  00000000  0003bb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c93  00000000  00000000  000513c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000648c  00000000  00000000  000e209c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e8528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009988 	.word	0x08009988

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009988 	.word	0x08009988

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_frsub>:
 8000ca4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ca8:	e002      	b.n	8000cb0 <__addsf3>
 8000caa:	bf00      	nop

08000cac <__aeabi_fsub>:
 8000cac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cb0 <__addsf3>:
 8000cb0:	0042      	lsls	r2, r0, #1
 8000cb2:	bf1f      	itttt	ne
 8000cb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cb8:	ea92 0f03 	teqne	r2, r3
 8000cbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc4:	d06a      	beq.n	8000d9c <__addsf3+0xec>
 8000cc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cce:	bfc1      	itttt	gt
 8000cd0:	18d2      	addgt	r2, r2, r3
 8000cd2:	4041      	eorgt	r1, r0
 8000cd4:	4048      	eorgt	r0, r1
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	bfb8      	it	lt
 8000cda:	425b      	neglt	r3, r3
 8000cdc:	2b19      	cmp	r3, #25
 8000cde:	bf88      	it	hi
 8000ce0:	4770      	bxhi	lr
 8000ce2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4240      	negne	r0, r0
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cfe:	bf18      	it	ne
 8000d00:	4249      	negne	r1, r1
 8000d02:	ea92 0f03 	teq	r2, r3
 8000d06:	d03f      	beq.n	8000d88 <__addsf3+0xd8>
 8000d08:	f1a2 0201 	sub.w	r2, r2, #1
 8000d0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d10:	eb10 000c 	adds.w	r0, r0, ip
 8000d14:	f1c3 0320 	rsb	r3, r3, #32
 8000d18:	fa01 f103 	lsl.w	r1, r1, r3
 8000d1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__addsf3+0x78>
 8000d22:	4249      	negs	r1, r1
 8000d24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d2c:	d313      	bcc.n	8000d56 <__addsf3+0xa6>
 8000d2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d32:	d306      	bcc.n	8000d42 <__addsf3+0x92>
 8000d34:	0840      	lsrs	r0, r0, #1
 8000d36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3a:	f102 0201 	add.w	r2, r2, #1
 8000d3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000d40:	d251      	bcs.n	8000de6 <__addsf3+0x136>
 8000d42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4a:	bf08      	it	eq
 8000d4c:	f020 0001 	biceq.w	r0, r0, #1
 8000d50:	ea40 0003 	orr.w	r0, r0, r3
 8000d54:	4770      	bx	lr
 8000d56:	0049      	lsls	r1, r1, #1
 8000d58:	eb40 0000 	adc.w	r0, r0, r0
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	bf28      	it	cs
 8000d60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d64:	d2ed      	bcs.n	8000d42 <__addsf3+0x92>
 8000d66:	fab0 fc80 	clz	ip, r0
 8000d6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d76:	bfaa      	itet	ge
 8000d78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d7c:	4252      	neglt	r2, r2
 8000d7e:	4318      	orrge	r0, r3
 8000d80:	bfbc      	itt	lt
 8000d82:	40d0      	lsrlt	r0, r2
 8000d84:	4318      	orrlt	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	f092 0f00 	teq	r2, #0
 8000d8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d90:	bf06      	itte	eq
 8000d92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d96:	3201      	addeq	r2, #1
 8000d98:	3b01      	subne	r3, #1
 8000d9a:	e7b5      	b.n	8000d08 <__addsf3+0x58>
 8000d9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da4:	bf18      	it	ne
 8000da6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000daa:	d021      	beq.n	8000df0 <__addsf3+0x140>
 8000dac:	ea92 0f03 	teq	r2, r3
 8000db0:	d004      	beq.n	8000dbc <__addsf3+0x10c>
 8000db2:	f092 0f00 	teq	r2, #0
 8000db6:	bf08      	it	eq
 8000db8:	4608      	moveq	r0, r1
 8000dba:	4770      	bx	lr
 8000dbc:	ea90 0f01 	teq	r0, r1
 8000dc0:	bf1c      	itt	ne
 8000dc2:	2000      	movne	r0, #0
 8000dc4:	4770      	bxne	lr
 8000dc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dca:	d104      	bne.n	8000dd6 <__addsf3+0x126>
 8000dcc:	0040      	lsls	r0, r0, #1
 8000dce:	bf28      	it	cs
 8000dd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dda:	bf3c      	itt	cc
 8000ddc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000de0:	4770      	bxcc	lr
 8000de2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000de6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dee:	4770      	bx	lr
 8000df0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df4:	bf16      	itet	ne
 8000df6:	4608      	movne	r0, r1
 8000df8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dfc:	4601      	movne	r1, r0
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	bf06      	itte	eq
 8000e02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e06:	ea90 0f01 	teqeq	r0, r1
 8000e0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_ui2f>:
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e004      	b.n	8000e20 <__aeabi_i2f+0x8>
 8000e16:	bf00      	nop

08000e18 <__aeabi_i2f>:
 8000e18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e1c:	bf48      	it	mi
 8000e1e:	4240      	negmi	r0, r0
 8000e20:	ea5f 0c00 	movs.w	ip, r0
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	e01c      	b.n	8000e6e <__aeabi_l2f+0x2a>

08000e34 <__aeabi_ul2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e00a      	b.n	8000e58 <__aeabi_l2f+0x14>
 8000e42:	bf00      	nop

08000e44 <__aeabi_l2f>:
 8000e44:	ea50 0201 	orrs.w	r2, r0, r1
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e50:	d502      	bpl.n	8000e58 <__aeabi_l2f+0x14>
 8000e52:	4240      	negs	r0, r0
 8000e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e58:	ea5f 0c01 	movs.w	ip, r1
 8000e5c:	bf02      	ittt	eq
 8000e5e:	4684      	moveq	ip, r0
 8000e60:	4601      	moveq	r1, r0
 8000e62:	2000      	moveq	r0, #0
 8000e64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e68:	bf08      	it	eq
 8000e6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e72:	fabc f28c 	clz	r2, ip
 8000e76:	3a08      	subs	r2, #8
 8000e78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e7c:	db10      	blt.n	8000ea0 <__aeabi_l2f+0x5c>
 8000e7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e82:	4463      	add	r3, ip
 8000e84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e88:	f1c2 0220 	rsb	r2, r2, #32
 8000e8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e90:	fa20 f202 	lsr.w	r2, r0, r2
 8000e94:	eb43 0002 	adc.w	r0, r3, r2
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f102 0220 	add.w	r2, r2, #32
 8000ea4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea8:	f1c2 0220 	rsb	r2, r2, #32
 8000eac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb4:	eb43 0002 	adc.w	r0, r3, r2
 8000eb8:	bf08      	it	eq
 8000eba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ebe:	4770      	bx	lr

08000ec0 <__gesf2>:
 8000ec0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ec4:	e006      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__lesf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	e002      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ece:	bf00      	nop

08000ed0 <__cmpsf2>:
 8000ed0:	f04f 0c01 	mov.w	ip, #1
 8000ed4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee4:	bf18      	it	ne
 8000ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eea:	d011      	beq.n	8000f10 <__cmpsf2+0x40>
 8000eec:	b001      	add	sp, #4
 8000eee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ef2:	bf18      	it	ne
 8000ef4:	ea90 0f01 	teqne	r0, r1
 8000ef8:	bf58      	it	pl
 8000efa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000efe:	bf88      	it	hi
 8000f00:	17c8      	asrhi	r0, r1, #31
 8000f02:	bf38      	it	cc
 8000f04:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f08:	bf18      	it	ne
 8000f0a:	f040 0001 	orrne.w	r0, r0, #1
 8000f0e:	4770      	bx	lr
 8000f10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f14:	d102      	bne.n	8000f1c <__cmpsf2+0x4c>
 8000f16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f1a:	d105      	bne.n	8000f28 <__cmpsf2+0x58>
 8000f1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f20:	d1e4      	bne.n	8000eec <__cmpsf2+0x1c>
 8000f22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f26:	d0e1      	beq.n	8000eec <__cmpsf2+0x1c>
 8000f28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__aeabi_cfrcmple>:
 8000f30:	4684      	mov	ip, r0
 8000f32:	4608      	mov	r0, r1
 8000f34:	4661      	mov	r1, ip
 8000f36:	e7ff      	b.n	8000f38 <__aeabi_cfcmpeq>

08000f38 <__aeabi_cfcmpeq>:
 8000f38:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f3a:	f7ff ffc9 	bl	8000ed0 <__cmpsf2>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	bf48      	it	mi
 8000f42:	f110 0f00 	cmnmi.w	r0, #0
 8000f46:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f48 <__aeabi_fcmpeq>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff fff4 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f50:	bf0c      	ite	eq
 8000f52:	2001      	moveq	r0, #1
 8000f54:	2000      	movne	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmplt>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffea 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f64:	bf34      	ite	cc
 8000f66:	2001      	movcc	r0, #1
 8000f68:	2000      	movcs	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmple>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffe0 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpge>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffd2 	bl	8000f30 <__aeabi_cfrcmple>
 8000f8c:	bf94      	ite	ls
 8000f8e:	2001      	movls	r0, #1
 8000f90:	2000      	movhi	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_fcmpgt>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff ffc8 	bl	8000f30 <__aeabi_cfrcmple>
 8000fa0:	bf34      	ite	cc
 8000fa2:	2001      	movcc	r0, #1
 8000fa4:	2000      	movcs	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <__aeabi_f2iz>:
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fb4:	d30f      	bcc.n	8000fd6 <__aeabi_f2iz+0x2a>
 8000fb6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fbe:	d90d      	bls.n	8000fdc <__aeabi_f2iz+0x30>
 8000fc0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fc8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fcc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd0:	bf18      	it	ne
 8000fd2:	4240      	negne	r0, r0
 8000fd4:	4770      	bx	lr
 8000fd6:	f04f 0000 	mov.w	r0, #0
 8000fda:	4770      	bx	lr
 8000fdc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fe0:	d101      	bne.n	8000fe6 <__aeabi_f2iz+0x3a>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	d105      	bne.n	8000ff2 <__aeabi_f2iz+0x46>
 8000fe6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fea:	bf08      	it	eq
 8000fec:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <__aeabi_d2lz>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4604      	mov	r4, r0
 8001000:	460d      	mov	r5, r1
 8001002:	f7ff fd8f 	bl	8000b24 <__aeabi_dcmplt>
 8001006:	b928      	cbnz	r0, 8001014 <__aeabi_d2lz+0x1c>
 8001008:	4620      	mov	r0, r4
 800100a:	4629      	mov	r1, r5
 800100c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001010:	f000 b80a 	b.w	8001028 <__aeabi_d2ulz>
 8001014:	4620      	mov	r0, r4
 8001016:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800101a:	f000 f805 	bl	8001028 <__aeabi_d2ulz>
 800101e:	4240      	negs	r0, r0
 8001020:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001024:	bd38      	pop	{r3, r4, r5, pc}
 8001026:	bf00      	nop

08001028 <__aeabi_d2ulz>:
 8001028:	b5d0      	push	{r4, r6, r7, lr}
 800102a:	2200      	movs	r2, #0
 800102c:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <__aeabi_d2ulz+0x34>)
 800102e:	4606      	mov	r6, r0
 8001030:	460f      	mov	r7, r1
 8001032:	f7ff fb05 	bl	8000640 <__aeabi_dmul>
 8001036:	f7ff fdc5 	bl	8000bc4 <__aeabi_d2uiz>
 800103a:	4604      	mov	r4, r0
 800103c:	f7ff fa86 	bl	800054c <__aeabi_ui2d>
 8001040:	2200      	movs	r2, #0
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <__aeabi_d2ulz+0x38>)
 8001044:	f7ff fafc 	bl	8000640 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4630      	mov	r0, r6
 800104e:	4639      	mov	r1, r7
 8001050:	f7ff f93e 	bl	80002d0 <__aeabi_dsub>
 8001054:	f7ff fdb6 	bl	8000bc4 <__aeabi_d2uiz>
 8001058:	4621      	mov	r1, r4
 800105a:	bdd0      	pop	{r4, r6, r7, pc}
 800105c:	3df00000 	.word	0x3df00000
 8001060:	41f00000 	.word	0x41f00000

08001064 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001064:	b4b0      	push	{r4, r5, r7}
 8001066:	b08f      	sub	sp, #60	@ 0x3c
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 800106c:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001072:	2307      	movs	r3, #7
 8001074:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001078:	2307      	movs	r3, #7
 800107a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800107e:	2301      	movs	r3, #1
 8001080:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8001084:	23ff      	movs	r3, #255	@ 0xff
 8001086:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800108a:	2364      	movs	r3, #100	@ 0x64
 800108c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8001090:	2308      	movs	r3, #8
 8001092:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	461d      	mov	r5, r3
 8001098:	f107 040c 	add.w	r4, r7, #12
 800109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	373c      	adds	r7, #60	@ 0x3c
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bcb0      	pop	{r4, r5, r7}
 80010b4:	4770      	bx	lr

080010b6 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f9ff 	bl	80014c6 <LoRa_read>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73bb      	strb	r3, [r7, #14]
	data = read;
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	f023 0307 	bic.w	r3, r3, #7
 80010dc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
 80010e4:	e03e      	b.n	8001164 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10c      	bne.n	8001106 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80010ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010f0:	f023 0307 	bic.w	r3, r3, #7
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	61da      	str	r2, [r3, #28]
 8001104:	e02e      	b.n	8001164 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d10c      	bne.n	8001126 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800110c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001110:	f023 0307 	bic.w	r3, r3, #7
 8001114:	b25b      	sxtb	r3, r3
 8001116:	f043 0303 	orr.w	r3, r3, #3
 800111a:	b25b      	sxtb	r3, r3
 800111c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	61da      	str	r2, [r3, #28]
 8001124:	e01e      	b.n	8001164 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b05      	cmp	r3, #5
 800112a:	d10c      	bne.n	8001146 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800112c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001130:	f023 0307 	bic.w	r3, r3, #7
 8001134:	b25b      	sxtb	r3, r3
 8001136:	f043 0305 	orr.w	r3, r3, #5
 800113a:	b25b      	sxtb	r3, r3
 800113c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2205      	movs	r2, #5
 8001142:	61da      	str	r2, [r3, #28]
 8001144:	e00e      	b.n	8001164 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b06      	cmp	r3, #6
 800114a:	d10b      	bne.n	8001164 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800114c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001150:	f023 0307 	bic.w	r3, r3, #7
 8001154:	b25b      	sxtb	r3, r3
 8001156:	f043 0306 	orr.w	r3, r3, #6
 800115a:	b25b      	sxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2206      	movs	r2, #6
 8001162:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	461a      	mov	r2, r3
 8001168:	2101      	movs	r1, #1
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f9c5 	bl	80014fa <LoRa_write>
	//HAL_Delay(10);
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	889b      	ldrh	r3, [r3, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f002 f834 	bl	8003200 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6998      	ldr	r0, [r3, #24]
 800119c:	88fa      	ldrh	r2, [r7, #6]
 800119e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	f003 fd0c 	bl	8004bc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011a8:	bf00      	nop
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 f90c 	bl	80053cc <HAL_SPI_GetState>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d1f7      	bne.n	80011aa <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6998      	ldr	r0, [r3, #24]
 80011be:	8b3a      	ldrh	r2, [r7, #24]
 80011c0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	f003 fe3f 	bl	8004e48 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011ca:	bf00      	nop
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 f8fb 	bl	80053cc <HAL_SPI_GetState>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d1f7      	bne.n	80011cc <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	889b      	ldrh	r3, [r3, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	f002 f80a 	bl	8003200 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	f001 fff6 	bl	8003200 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6998      	ldr	r0, [r3, #24]
 8001218:	88fa      	ldrh	r2, [r7, #6]
 800121a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	f003 fcce 	bl	8004bc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001224:	bf00      	nop
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4618      	mov	r0, r3
 800122c:	f004 f8ce 	bl	80053cc <HAL_SPI_GetState>
 8001230:	4603      	mov	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	d1f7      	bne.n	8001226 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6998      	ldr	r0, [r3, #24]
 800123a:	8b3a      	ldrh	r2, [r7, #24]
 800123c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	f003 fcbd 	bl	8004bc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001246:	bf00      	nop
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 f8bd 	bl	80053cc <HAL_SPI_GetState>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d1f7      	bne.n	8001248 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	889b      	ldrh	r3, [r3, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	4619      	mov	r1, r3
 8001264:	f001 ffcc 	bl	8003200 <HAL_GPIO_WritePin>
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 800127c:	2126      	movs	r1, #38	@ 0x26
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f921 	bl	80014c6 <LoRa_read>
 8001284:	4603      	mov	r3, r0
 8001286:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800128e:	7bbb      	ldrb	r3, [r7, #14]
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e003      	b.n	80012a0 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	f023 0308 	bic.w	r3, r3, #8
 800129e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2126      	movs	r1, #38	@ 0x26
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f927 	bl	80014fa <LoRa_write>
	HAL_Delay(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f001 fc3f 	bl	8002b30 <HAL_Delay>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b096      	sub	sp, #88	@ 0x58
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80012c4:	4a17      	ldr	r2, [pc, #92]	@ (8001324 <LoRa_setAutoLDO+0x68>)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4611      	mov	r1, r2
 80012cc:	2250      	movs	r2, #80	@ 0x50
 80012ce:	4618      	mov	r0, r3
 80012d0:	f006 fb6b 	bl	80079aa <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012da:	461a      	mov	r2, r3
 80012dc:	2301      	movs	r3, #1
 80012de:	4093      	lsls	r3, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f943 	bl	800056c <__aeabi_i2d>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	3358      	adds	r3, #88	@ 0x58
 80012f0:	443b      	add	r3, r7
 80012f2:	3b50      	subs	r3, #80	@ 0x50
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff facc 	bl	8000894 <__aeabi_ddiv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fc36 	bl	8000b74 <__aeabi_d2iz>
 8001308:	4603      	mov	r3, r0
 800130a:	2b10      	cmp	r3, #16
 800130c:	bfcc      	ite	gt
 800130e:	2301      	movgt	r3, #1
 8001310:	2300      	movle	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4619      	mov	r1, r3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffaa 	bl	8001270 <LoRa_setLowDaraRateOptimization>
}
 800131c:	bf00      	nop
 800131e:	3758      	adds	r7, #88	@ 0x58
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	080099a0 	.word	0x080099a0

08001328 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	04db      	lsls	r3, r3, #19
 8001336:	115b      	asrs	r3, r3, #5
 8001338:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	0c1b      	lsrs	r3, r3, #16
 800133e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	461a      	mov	r2, r3
 8001344:	2106      	movs	r1, #6
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f8d7 	bl	80014fa <LoRa_write>
	HAL_Delay(5);
 800134c:	2005      	movs	r0, #5
 800134e:	f001 fbef 	bl	8002b30 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	461a      	mov	r2, r3
 800135c:	2107      	movs	r1, #7
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f8cb 	bl	80014fa <LoRa_write>
	HAL_Delay(5);
 8001364:	2005      	movs	r0, #5
 8001366:	f001 fbe3 	bl	8002b30 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800136e:	7afb      	ldrb	r3, [r7, #11]
 8001370:	461a      	mov	r2, r3
 8001372:	2108      	movs	r1, #8
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f8c0 	bl	80014fa <LoRa_write>
	HAL_Delay(5);
 800137a:	2005      	movs	r0, #5
 800137c:	f001 fbd8 	bl	8002b30 <HAL_Delay>
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	dd01      	ble.n	800139c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001398:	230c      	movs	r3, #12
 800139a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b06      	cmp	r3, #6
 80013a0:	dc01      	bgt.n	80013a6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80013a2:	2307      	movs	r3, #7
 80013a4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013a6:	211e      	movs	r1, #30
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f88c 	bl	80014c6 <LoRa_read>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80013b2:	200a      	movs	r0, #10
 80013b4:	f001 fbbc 	bl	8002b30 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	461a      	mov	r2, r3
 80013d0:	211e      	movs	r1, #30
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f891 	bl	80014fa <LoRa_write>
	HAL_Delay(10);
 80013d8:	200a      	movs	r0, #10
 80013da:	f001 fba9 	bl	8002b30 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff6c 	bl	80012bc <LoRa_setAutoLDO>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	461a      	mov	r2, r3
 80013fc:	2109      	movs	r1, #9
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f87b 	bl	80014fa <LoRa_write>
	HAL_Delay(10);
 8001404:	200a      	movs	r0, #10
 8001406:	f001 fb93 	bl	8002b30 <HAL_Delay>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	2b2c      	cmp	r3, #44	@ 0x2c
 8001428:	d801      	bhi.n	800142e <LoRa_setOCP+0x1a>
		current = 45;
 800142a:	232d      	movs	r3, #45	@ 0x2d
 800142c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	2bf0      	cmp	r3, #240	@ 0xf0
 8001432:	d901      	bls.n	8001438 <LoRa_setOCP+0x24>
		current = 240;
 8001434:	23f0      	movs	r3, #240	@ 0xf0
 8001436:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	2b78      	cmp	r3, #120	@ 0x78
 800143c:	d809      	bhi.n	8001452 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	3b2d      	subs	r3, #45	@ 0x2d
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <LoRa_setOCP+0x78>)
 8001444:	fb82 1203 	smull	r1, r2, r2, r3
 8001448:	1052      	asrs	r2, r2, #1
 800144a:	17db      	asrs	r3, r3, #31
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e00b      	b.n	800146a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	2bf0      	cmp	r3, #240	@ 0xf0
 8001456:	d808      	bhi.n	800146a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	331e      	adds	r3, #30
 800145c:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <LoRa_setOCP+0x78>)
 800145e:	fb82 1203 	smull	r1, r2, r2, r3
 8001462:	1092      	asrs	r2, r2, #2
 8001464:	17db      	asrs	r3, r3, #31
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3320      	adds	r3, #32
 800146e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	461a      	mov	r2, r3
 8001474:	210b      	movs	r1, #11
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f83f 	bl	80014fa <LoRa_write>
	HAL_Delay(10);
 800147c:	200a      	movs	r0, #10
 800147e:	f001 fb57 	bl	8002b30 <HAL_Delay>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	66666667 	.word	0x66666667

08001490 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001498:	211e      	movs	r1, #30
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f813 	bl	80014c6 <LoRa_read>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	f043 0307 	orr.w	r3, r3, #7
 80014aa:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	461a      	mov	r2, r3
 80014b0:	211e      	movs	r1, #30
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f821 	bl	80014fa <LoRa_write>
	HAL_Delay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f001 fb39 	bl	8002b30 <HAL_Delay>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af02      	add	r7, sp, #8
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	460b      	mov	r3, r1
 80014d0:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80014dc:	f107 030f 	add.w	r3, r7, #15
 80014e0:	f107 010e 	add.w	r1, r7, #14
 80014e4:	2201      	movs	r2, #1
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	2201      	movs	r2, #1
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fe44 	bl	8001178 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af02      	add	r7, sp, #8
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	70fb      	strb	r3, [r7, #3]
 8001506:	4613      	mov	r3, r2
 8001508:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001510:	b2db      	uxtb	r3, r3
 8001512:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001514:	78bb      	ldrb	r3, [r7, #2]
 8001516:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001518:	f107 030f 	add.w	r3, r7, #15
 800151c:	f107 010e 	add.w	r1, r7, #14
 8001520:	2201      	movs	r2, #1
 8001522:	9200      	str	r2, [sp, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fe64 	bl	80011f4 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	461a      	mov	r2, r3
 8001540:	460b      	mov	r3, r1
 8001542:	72fb      	strb	r3, [r7, #11]
 8001544:	4613      	mov	r3, r2
 8001546:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800154e:	b2db      	uxtb	r3, r3
 8001550:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	889b      	ldrh	r3, [r3, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f001 fe4f 	bl	8003200 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6998      	ldr	r0, [r3, #24]
 8001566:	f107 0117 	add.w	r1, r7, #23
 800156a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800156e:	2201      	movs	r2, #1
 8001570:	f003 fb26 	bl	8004bc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001574:	bf00      	nop
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4618      	mov	r0, r3
 800157c:	f003 ff26 	bl	80053cc <HAL_SPI_GetState>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d1f7      	bne.n	8001576 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6998      	ldr	r0, [r3, #24]
 800158a:	7abb      	ldrb	r3, [r7, #10]
 800158c:	b29a      	uxth	r2, r3
 800158e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f003 fb14 	bl	8004bc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001598:	bf00      	nop
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 ff14 	bl	80053cc <HAL_SPI_GetState>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d1f7      	bne.n	800159a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	889b      	ldrh	r3, [r3, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4619      	mov	r1, r3
 80015b6:	f001 fe23 	bl	8003200 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]

	return 1;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	4611      	mov	r1, r2
 80015e2:	461a      	mov	r2, r3
 80015e4:	460b      	mov	r3, r1
 80015e6:	71fb      	strb	r3, [r7, #7]
 80015e8:	4613      	mov	r3, r2
 80015ea:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015f2:	2101      	movs	r1, #1
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff fd5e 	bl	80010b6 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80015fa:	210e      	movs	r1, #14
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff ff62 	bl	80014c6 <LoRa_read>
 8001602:	4603      	mov	r3, r0
 8001604:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001606:	7cfb      	ldrb	r3, [r7, #19]
 8001608:	461a      	mov	r2, r3
 800160a:	210d      	movs	r1, #13
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ff74 	bl	80014fa <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	461a      	mov	r2, r3
 8001616:	2122      	movs	r1, #34	@ 0x22
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff ff6e 	bl	80014fa <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	2100      	movs	r1, #0
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff ff85 	bl	8001534 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800162a:	2103      	movs	r1, #3
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fd42 	bl	80010b6 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001632:	2112      	movs	r1, #18
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff ff46 	bl	80014c6 <LoRa_read>
 800163a:	4603      	mov	r3, r0
 800163c:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00a      	beq.n	800165e <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001648:	22ff      	movs	r2, #255	@ 0xff
 800164a:	2112      	movs	r1, #18
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f7ff ff54 	bl	80014fa <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fd2e 	bl	80010b6 <LoRa_gotoMode>
			return 1;
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	3b01      	subs	r3, #1
 8001662:	80bb      	strh	r3, [r7, #4]
 8001664:	88bb      	ldrh	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800166a:	6979      	ldr	r1, [r7, #20]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fd22 	bl	80010b6 <LoRa_gotoMode>
				return 0;
 8001672:	2300      	movs	r3, #0
 8001674:	e003      	b.n	800167e <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f001 fa5a 	bl	8002b30 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800167c:	e7d9      	b.n	8001632 <LoRa_transmit+0x5c>
	}
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff97 	bl	80015c2 <LoRa_isvalid>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8096 	beq.w	80017c8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd09 	bl	80010b6 <LoRa_gotoMode>
			HAL_Delay(10);
 80016a4:	200a      	movs	r0, #10
 80016a6:	f001 fa43 	bl	8002b30 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80016aa:	2101      	movs	r1, #1
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff0a 	bl	80014c6 <LoRa_read>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016b6:	200a      	movs	r0, #10
 80016b8:	f001 fa3a 	bl	8002b30 <HAL_Delay>
			data = read | 0x80;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016c2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
 80016c6:	461a      	mov	r2, r3
 80016c8:	2101      	movs	r1, #1
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff15 	bl	80014fa <LoRa_write>
			HAL_Delay(100);
 80016d0:	2064      	movs	r0, #100	@ 0x64
 80016d2:	f001 fa2d 	bl	8002b30 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4619      	mov	r1, r3
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fe23 	bl	8001328 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016e8:	4619      	mov	r1, r3
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fe7e 	bl	80013ec <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe8b 	bl	8001414 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80016fe:	2223      	movs	r2, #35	@ 0x23
 8001700:	210c      	movs	r1, #12
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fef9 	bl	80014fa <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fec1 	bl	8001490 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fe36 	bl	8001388 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800171c:	22ff      	movs	r2, #255	@ 0xff
 800171e:	211f      	movs	r1, #31
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff feea 	bl	80014fa <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	b2da      	uxtb	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4413      	add	r3, r2
 8001740:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	461a      	mov	r2, r3
 8001746:	211d      	movs	r1, #29
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fed6 	bl	80014fa <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fdb4 	bl	80012bc <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	b29b      	uxth	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	2120      	movs	r1, #32
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fec9 	bl	80014fa <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	2121      	movs	r1, #33	@ 0x21
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fec1 	bl	80014fa <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001778:	2140      	movs	r1, #64	@ 0x40
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fea3 	bl	80014c6 <LoRa_read>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800178a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	461a      	mov	r2, r3
 8001790:	2140      	movs	r1, #64	@ 0x40
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff feb1 	bl	80014fa <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001798:	2101      	movs	r1, #1
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fc8b 	bl	80010b6 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80017a6:	200a      	movs	r0, #10
 80017a8:	f001 f9c2 	bl	8002b30 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80017ac:	2142      	movs	r1, #66	@ 0x42
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fe89 	bl	80014c6 <LoRa_read>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b12      	cmp	r3, #18
 80017bc:	d101      	bne.n	80017c2 <LoRa_init+0x13c>
				return LORA_OK;
 80017be:	23c8      	movs	r3, #200	@ 0xc8
 80017c0:	e004      	b.n	80017cc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80017c2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80017c6:	e001      	b.n	80017cc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80017c8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <AHT10_Init>:
#include "stm32f1xx_hal.h"

extern UART_HandleTypeDef huart1;


void AHT10_Init(AHT10_HandleTypeDef *dev) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af02      	add	r7, sp, #8
 80017da:	6078      	str	r0, [r7, #4]
    uint8_t cmd[3] = {0xE1, 0x08, 0x00};
 80017dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001818 <AHT10_Init+0x44>)
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	4611      	mov	r1, r2
 80017e6:	8019      	strh	r1, [r3, #0]
 80017e8:	3302      	adds	r3, #2
 80017ea:	0c12      	lsrs	r2, r2, #16
 80017ec:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	791b      	ldrb	r3, [r3, #4]
 80017f6:	4619      	mov	r1, r3
 80017f8:	f107 020c 	add.w	r2, r7, #12
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2303      	movs	r3, #3
 8001804:	f001 fe58 	bl	80034b8 <HAL_I2C_Master_Transmit>
    HAL_Delay(20);
 8001808:	2014      	movs	r0, #20
 800180a:	f001 f991 	bl	8002b30 <HAL_Delay>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	080099f0 	.word	0x080099f0

0800181c <AHT10_ReadRaw>:

uint8_t AHT10_ReadRaw(AHT10_HandleTypeDef *dev, uint32_t *humidity_raw, uint32_t *temperature_raw) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	uint8_t cmd[3] = {0xAC, 0x33, 0x00}; // chuẩn AHT10 command
 8001828:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <AHT10_ReadRaw+0xa4>)
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	4611      	mov	r1, r2
 8001832:	8019      	strh	r1, [r3, #0]
 8001834:	3302      	adds	r3, #2
 8001836:	0c12      	lsrs	r2, r2, #16
 8001838:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	791b      	ldrb	r3, [r3, #4]
 8001842:	4619      	mov	r1, r3
 8001844:	f107 0214 	add.w	r2, r7, #20
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2303      	movs	r3, #3
 8001850:	f001 fe32 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001854:	2050      	movs	r0, #80	@ 0x50
 8001856:	f001 f96b 	bl	8002b30 <HAL_Delay>

	if (HAL_I2C_Master_Receive(dev->hi2c, dev->address, data, 6, HAL_MAX_DELAY) != HAL_OK)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	4619      	mov	r1, r3
 8001864:	f107 0218 	add.w	r2, r7, #24
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2306      	movs	r3, #6
 8001870:	f001 ff20 	bl	80036b4 <HAL_I2C_Master_Receive>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <AHT10_ReadRaw+0x62>
	    return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	e01c      	b.n	80018b8 <AHT10_ReadRaw+0x9c>
//	char buf[64];
//	sprintf(buf, "Raw bytes: %02X %02X %02X %02X %02X %02X\r\n",
//	        data[0], data[1], data[2], data[3], data[4], data[5]);
//	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);

	if (data[0] & 0x80)
 800187e:	7e3b      	ldrb	r3, [r7, #24]
 8001880:	b25b      	sxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	da01      	bge.n	800188a <AHT10_ReadRaw+0x6e>
	    return 0;  // still busy, không đọc được
 8001886:	2300      	movs	r3, #0
 8001888:	e016      	b.n	80018b8 <AHT10_ReadRaw+0x9c>

	*humidity_raw = ((uint32_t)(data[1]) << 12) | ((uint32_t)(data[2]) << 4) | (data[3] >> 4);
 800188a:	7e7b      	ldrb	r3, [r7, #25]
 800188c:	031a      	lsls	r2, r3, #12
 800188e:	7ebb      	ldrb	r3, [r7, #26]
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4313      	orrs	r3, r2
 8001894:	7efa      	ldrb	r2, [r7, #27]
 8001896:	0912      	lsrs	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	431a      	orrs	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	601a      	str	r2, [r3, #0]
	*temperature_raw = (((uint32_t)(data[3] & 0x0F)) << 16) | ((uint32_t)(data[4]) << 8) | (data[5]);
 80018a0:	7efb      	ldrb	r3, [r7, #27]
 80018a2:	041b      	lsls	r3, r3, #16
 80018a4:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80018a8:	7f3b      	ldrb	r3, [r7, #28]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4313      	orrs	r3, r2
 80018ae:	7f7a      	ldrb	r2, [r7, #29]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	601a      	str	r2, [r3, #0]
	return 1;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	080099f4 	.word	0x080099f4

080018c4 <AHT10_ReadTemperature>:


float AHT10_ReadTemperature(uint32_t temp_raw) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    return ((float)temp_raw / 1048576.0) * 200.0 - 50.0;
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fa9f 	bl	8000e10 <__aeabi_ui2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe5b 	bl	8000590 <__aeabi_f2d>
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <AHT10_ReadTemperature+0x5c>)
 80018e0:	f7fe ffd8 	bl	8000894 <__aeabi_ddiv>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <AHT10_ReadTemperature+0x60>)
 80018f2:	f7fe fea5 	bl	8000640 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <AHT10_ReadTemperature+0x64>)
 8001904:	f7fe fce4 	bl	80002d0 <__aeabi_dsub>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f978 	bl	8000c04 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	41300000 	.word	0x41300000
 8001924:	40690000 	.word	0x40690000
 8001928:	40490000 	.word	0x40490000

0800192c <AHT10_ReadHumidity>:

float AHT10_ReadHumidity(uint32_t hum_raw) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    return ((float)hum_raw / 1048576.0) * 100.0;
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fa6b 	bl	8000e10 <__aeabi_ui2f>
 800193a:	4603      	mov	r3, r0
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe27 	bl	8000590 <__aeabi_f2d>
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <AHT10_ReadHumidity+0x48>)
 8001948:	f7fe ffa4 	bl	8000894 <__aeabi_ddiv>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <AHT10_ReadHumidity+0x4c>)
 800195a:	f7fe fe71 	bl	8000640 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f94d 	bl	8000c04 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	41300000 	.word	0x41300000
 8001978:	40590000 	.word	0x40590000

0800197c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af02      	add	r7, sp, #8
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f023 030f 	bic.w	r3, r3, #15
 800198e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	f043 030c 	orr.w	r3, r3, #12
 800199c:	b2db      	uxtb	r3, r3
 800199e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	f043 030c 	orr.w	r3, r3, #12
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	791b      	ldrb	r3, [r3, #4]
 80019c6:	4619      	mov	r1, r3
 80019c8:	f107 0208 	add.w	r2, r7, #8
 80019cc:	2364      	movs	r3, #100	@ 0x64
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2304      	movs	r3, #4
 80019d2:	f001 fd71 	bl	80034b8 <HAL_I2C_Master_Transmit>
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af02      	add	r7, sp, #8
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f023 030f 	bic.w	r3, r3, #15
 80019f0:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	f043 030d 	orr.w	r3, r3, #13
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f043 0309 	orr.w	r3, r3, #9
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	f043 030d 	orr.w	r3, r3, #13
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	f043 0309 	orr.w	r3, r3, #9
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f107 0208 	add.w	r2, r7, #8
 8001a2e:	2364      	movs	r3, #100	@ 0x64
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2304      	movs	r3, #4
 8001a34:	f001 fd40 	bl	80034b8 <HAL_I2C_Master_Transmit>
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001a48:	2180      	movs	r1, #128	@ 0x80
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff96 	bl	800197c <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e006      	b.n	8001a64 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001a56:	2120      	movs	r1, #32
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffc0 	bl	80019de <lcd_send_data>
    for (int i = 0; i < 80; i++)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b4f      	cmp	r3, #79	@ 0x4f
 8001a68:	ddf5      	ble.n	8001a56 <lcd_clear+0x16>
    }
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d824      	bhi.n	8001ad0 <lcd_gotoxy+0x5c>
 8001a86:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <lcd_gotoxy+0x18>)
 8001a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001aa7 	.word	0x08001aa7
 8001a94:	08001ab1 	.word	0x08001ab1
 8001a98:	08001abb 	.word	0x08001abb
    {
        case 0: address = 0x80 + col; break;  // First row
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	3b80      	subs	r3, #128	@ 0x80
 8001aa2:	75fb      	strb	r3, [r7, #23]
 8001aa4:	e00e      	b.n	8001ac4 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3b40      	subs	r3, #64	@ 0x40
 8001aac:	75fb      	strb	r3, [r7, #23]
 8001aae:	e009      	b.n	8001ac4 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3b6c      	subs	r3, #108	@ 0x6c
 8001ab6:	75fb      	strb	r3, [r7, #23]
 8001ab8:	e004      	b.n	8001ac4 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3b2c      	subs	r3, #44	@ 0x2c
 8001ac0:	75fb      	strb	r3, [r7, #23]
 8001ac2:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff ff57 	bl	800197c <lcd_send_cmd>
 8001ace:	e000      	b.n	8001ad2 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8001ad0:	bf00      	nop
}
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8001ae0:	2032      	movs	r0, #50	@ 0x32
 8001ae2:	f001 f825 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001ae6:	2130      	movs	r1, #48	@ 0x30
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff47 	bl	800197c <lcd_send_cmd>
    HAL_Delay(5);
 8001aee:	2005      	movs	r0, #5
 8001af0:	f001 f81e 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001af4:	2130      	movs	r1, #48	@ 0x30
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff40 	bl	800197c <lcd_send_cmd>
    HAL_Delay(1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f001 f817 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001b02:	2130      	movs	r1, #48	@ 0x30
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff39 	bl	800197c <lcd_send_cmd>
    HAL_Delay(10);
 8001b0a:	200a      	movs	r0, #10
 8001b0c:	f001 f810 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8001b10:	2120      	movs	r1, #32
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff32 	bl	800197c <lcd_send_cmd>
    HAL_Delay(10);
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f001 f809 	bl	8002b30 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8001b1e:	2128      	movs	r1, #40	@ 0x28
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff2b 	bl	800197c <lcd_send_cmd>
    HAL_Delay(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f001 f802 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff24 	bl	800197c <lcd_send_cmd>
    HAL_Delay(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f000 fffb 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff1d 	bl	800197c <lcd_send_cmd>
    HAL_Delay(2);
 8001b42:	2002      	movs	r0, #2
 8001b44:	f000 fff4 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001b48:	2106      	movs	r1, #6
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff16 	bl	800197c <lcd_send_cmd>
    HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f000 ffed 	bl	8002b30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001b56:	210c      	movs	r1, #12
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff0f 	bl	800197c <lcd_send_cmd>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8001b70:	e007      	b.n	8001b82 <lcd_puts+0x1c>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	603a      	str	r2, [r7, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff2e 	bl	80019de <lcd_send_data>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f3      	bne.n	8001b72 <lcd_puts+0xc>
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <parse_uart_command>:
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

// Phân tích lệnh từ UART
void parse_uart_command(char *cmd) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    if (strncmp(cmd, "SET:", 4) == 0) {
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	494a      	ldr	r1, [pc, #296]	@ (8001cc8 <parse_uart_command+0x134>)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f005 fe20 	bl	80077e6 <strncmp>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 8088 	bne.w	8001cbe <parse_uart_command+0x12a>
        char *token = strtok(cmd + 4, ":");
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	4946      	ldr	r1, [pc, #280]	@ (8001ccc <parse_uart_command+0x138>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 fe29 	bl	800780c <strtok>
 8001bba:	60f8      	str	r0, [r7, #12]
        while (token != NULL) {
 8001bbc:	e075      	b.n	8001caa <parse_uart_command+0x116>
            if (strncmp(token, "TMAX=", 5) == 0) temp_max = atof(token + 5);
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	4943      	ldr	r1, [pc, #268]	@ (8001cd0 <parse_uart_command+0x13c>)
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f005 fe0f 	bl	80077e6 <strncmp>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10e      	bne.n	8001bec <parse_uart_command+0x58>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3305      	adds	r3, #5
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 fe48 	bl	8006868 <atof>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff f810 	bl	8000c04 <__aeabi_d2f>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd4 <parse_uart_command+0x140>)
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e059      	b.n	8001ca0 <parse_uart_command+0x10c>
            else if (strncmp(token, "TMIN=", 5) == 0) temp_min = atof(token + 5);
 8001bec:	2205      	movs	r2, #5
 8001bee:	493a      	ldr	r1, [pc, #232]	@ (8001cd8 <parse_uart_command+0x144>)
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f005 fdf8 	bl	80077e6 <strncmp>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10e      	bne.n	8001c1a <parse_uart_command+0x86>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3305      	adds	r3, #5
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 fe31 	bl	8006868 <atof>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe fff9 	bl	8000c04 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a31      	ldr	r2, [pc, #196]	@ (8001cdc <parse_uart_command+0x148>)
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e042      	b.n	8001ca0 <parse_uart_command+0x10c>
            else if (strncmp(token, "HMAX=", 5) == 0) humi_max = atof(token + 5);
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	4930      	ldr	r1, [pc, #192]	@ (8001ce0 <parse_uart_command+0x14c>)
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f005 fde1 	bl	80077e6 <strncmp>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10e      	bne.n	8001c48 <parse_uart_command+0xb4>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3305      	adds	r3, #5
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 fe1a 	bl	8006868 <atof>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ffe2 	bl	8000c04 <__aeabi_d2f>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <parse_uart_command+0x150>)
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e02b      	b.n	8001ca0 <parse_uart_command+0x10c>
            else if (strncmp(token, "HMIN=", 5) == 0) humi_min = atof(token + 5);
 8001c48:	2205      	movs	r2, #5
 8001c4a:	4927      	ldr	r1, [pc, #156]	@ (8001ce8 <parse_uart_command+0x154>)
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f005 fdca 	bl	80077e6 <strncmp>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10e      	bne.n	8001c76 <parse_uart_command+0xe2>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3305      	adds	r3, #5
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 fe03 	bl	8006868 <atof>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffcb 	bl	8000c04 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a1e      	ldr	r2, [pc, #120]	@ (8001cec <parse_uart_command+0x158>)
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e014      	b.n	8001ca0 <parse_uart_command+0x10c>
            else if (strncmp(token, "INTERVAL=", 9) == 0) interval_ms = atoi(token + 9) * 1000;
 8001c76:	2209      	movs	r2, #9
 8001c78:	491d      	ldr	r1, [pc, #116]	@ (8001cf0 <parse_uart_command+0x15c>)
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f005 fdb3 	bl	80077e6 <strncmp>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <parse_uart_command+0x10c>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3309      	adds	r3, #9
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fdef 	bl	800686e <atoi>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <parse_uart_command+0x160>)
 8001c9e:	601a      	str	r2, [r3, #0]
            token = strtok(NULL, ":");
 8001ca0:	490a      	ldr	r1, [pc, #40]	@ (8001ccc <parse_uart_command+0x138>)
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f005 fdb2 	bl	800780c <strtok>
 8001ca8:	60f8      	str	r0, [r7, #12]
        while (token != NULL) {
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d186      	bne.n	8001bbe <parse_uart_command+0x2a>
        }
        HAL_UART_Transmit(&huart1, (uint8_t*)"Config Updated\r\n", 16, HAL_MAX_DELAY);
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	4910      	ldr	r1, [pc, #64]	@ (8001cf8 <parse_uart_command+0x164>)
 8001cb8:	4810      	ldr	r0, [pc, #64]	@ (8001cfc <parse_uart_command+0x168>)
 8001cba:	f003 ffbb 	bl	8005c34 <HAL_UART_Transmit>
    }
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	080099f8 	.word	0x080099f8
 8001ccc:	08009a00 	.word	0x08009a00
 8001cd0:	08009a04 	.word	0x08009a04
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	08009a0c 	.word	0x08009a0c
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	08009a14 	.word	0x08009a14
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	08009a1c 	.word	0x08009a1c
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	08009a24 	.word	0x08009a24
 8001cf4:	20000010 	.word	0x20000010
 8001cf8:	08009a30 	.word	0x08009a30
 8001cfc:	2000034c 	.word	0x2000034c

08001d00 <HAL_UART_RxCpltCallback>:

/* Ngắt USART1 xử lý ngay trong main.c */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a26      	ldr	r2, [pc, #152]	@ (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d146      	bne.n	8001da0 <HAL_UART_RxCpltCallback+0xa0>
        char ch = uart_rx_buf[0];
 8001d12:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <HAL_UART_RxCpltCallback+0xac>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	73fb      	strb	r3, [r7, #15]

        if (ch == '\n' || ch == '\r') {
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b0a      	cmp	r3, #10
 8001d1c:	d002      	beq.n	8001d24 <HAL_UART_RxCpltCallback+0x24>
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	2b0d      	cmp	r3, #13
 8001d22:	d12a      	bne.n	8001d7a <HAL_UART_RxCpltCallback+0x7a>
            uart_line[uart_index] = '\0';  // kết thúc chuỗi
 8001d24:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <HAL_UART_RxCpltCallback+0xb0>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	5499      	strb	r1, [r3, r2]

            HAL_UART_Transmit(&huart1, (uint8_t*)"Received: ", 10, HAL_MAX_DELAY);
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	220a      	movs	r2, #10
 8001d36:	4920      	ldr	r1, [pc, #128]	@ (8001db8 <HAL_UART_RxCpltCallback+0xb8>)
 8001d38:	4820      	ldr	r0, [pc, #128]	@ (8001dbc <HAL_UART_RxCpltCallback+0xbc>)
 8001d3a:	f003 ff7b 	bl	8005c34 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_line, strlen(uart_line), HAL_MAX_DELAY);
 8001d3e:	481d      	ldr	r0, [pc, #116]	@ (8001db4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d40:	f7fe fa06 	bl	8000150 <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	4919      	ldr	r1, [pc, #100]	@ (8001db4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d4e:	481b      	ldr	r0, [pc, #108]	@ (8001dbc <HAL_UART_RxCpltCallback+0xbc>)
 8001d50:	f003 ff70 	bl	8005c34 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	2202      	movs	r2, #2
 8001d5a:	4919      	ldr	r1, [pc, #100]	@ (8001dc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001d5c:	4817      	ldr	r0, [pc, #92]	@ (8001dbc <HAL_UART_RxCpltCallback+0xbc>)
 8001d5e:	f003 ff69 	bl	8005c34 <HAL_UART_Transmit>

            parse_uart_command(uart_line);  // xử lý lệnh
 8001d62:	4814      	ldr	r0, [pc, #80]	@ (8001db4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d64:	f7ff ff16 	bl	8001b94 <parse_uart_command>
            uart_index = 0;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_UART_RxCpltCallback+0xb0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
            memset(uart_line, 0, sizeof(uart_line));
 8001d6e:	2240      	movs	r2, #64	@ 0x40
 8001d70:	2100      	movs	r1, #0
 8001d72:	4810      	ldr	r0, [pc, #64]	@ (8001db4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d74:	f005 fd2f 	bl	80077d6 <memset>
 8001d78:	e00d      	b.n	8001d96 <HAL_UART_RxCpltCallback+0x96>
        } else {
            if (uart_index < sizeof(uart_line) - 1) {
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HAL_UART_RxCpltCallback+0xb0>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d80:	d809      	bhi.n	8001d96 <HAL_UART_RxCpltCallback+0x96>
                uart_line[uart_index++] = ch;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_UART_RxCpltCallback+0xb0>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	b2d1      	uxtb	r1, r2
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_UART_RxCpltCallback+0xb0>)
 8001d8c:	7011      	strb	r1, [r2, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	5453      	strb	r3, [r2, r1]
            }
        }

        // nhận tiếp 1 byte
        HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8001d96:	2201      	movs	r2, #1
 8001d98:	4904      	ldr	r1, [pc, #16]	@ (8001dac <HAL_UART_RxCpltCallback+0xac>)
 8001d9a:	4808      	ldr	r0, [pc, #32]	@ (8001dbc <HAL_UART_RxCpltCallback+0xbc>)
 8001d9c:	f003 ffd5 	bl	8005d4a <HAL_UART_Receive_IT>
    }
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40013800 	.word	0x40013800
 8001dac:	20000400 	.word	0x20000400
 8001db0:	20000480 	.word	0x20000480
 8001db4:	20000440 	.word	0x20000440
 8001db8:	08009a44 	.word	0x08009a44
 8001dbc:	2000034c 	.word	0x2000034c
 8001dc0:	08009a50 	.word	0x08009a50

08001dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b09a      	sub	sp, #104	@ 0x68
 8001dc8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dca:	f000 fe4f 	bl	8002a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dce:	f000 f9f9 	bl	80021c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd2:	f000 fb47 	bl	8002464 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001dd6:	f000 fa3b 	bl	8002250 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001dda:	f000 fa67 	bl	80022ac <MX_I2C2_Init>
  MX_SPI1_Init();
 8001dde:	f000 fa93 	bl	8002308 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001de2:	f000 fb15 	bl	8002410 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001de6:	f000 fac5 	bl	8002374 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Bật Timer với ngắt
  HAL_TIM_Base_Start_IT(&htim2);
 8001dea:	489c      	ldr	r0, [pc, #624]	@ (800205c <main+0x298>)
 8001dec:	f003 fc56 	bl	800569c <HAL_TIM_Base_Start_IT>

  //Bật receive uart
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);  // khởi động nhận từng byte
 8001df0:	2201      	movs	r2, #1
 8001df2:	499b      	ldr	r1, [pc, #620]	@ (8002060 <main+0x29c>)
 8001df4:	489b      	ldr	r0, [pc, #620]	@ (8002064 <main+0x2a0>)
 8001df6:	f003 ffa8 	bl	8005d4a <HAL_UART_Receive_IT>

  //Init LCD
  lcd.hi2c = &hi2c1;
 8001dfa:	4b9b      	ldr	r3, [pc, #620]	@ (8002068 <main+0x2a4>)
 8001dfc:	4a9b      	ldr	r2, [pc, #620]	@ (800206c <main+0x2a8>)
 8001dfe:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E;
 8001e00:	4b99      	ldr	r3, [pc, #612]	@ (8002068 <main+0x2a4>)
 8001e02:	224e      	movs	r2, #78	@ 0x4e
 8001e04:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 8001e06:	4898      	ldr	r0, [pc, #608]	@ (8002068 <main+0x2a4>)
 8001e08:	f7ff fe66 	bl	8001ad8 <lcd_init>
  lcd_clear(&lcd);
 8001e0c:	4896      	ldr	r0, [pc, #600]	@ (8002068 <main+0x2a4>)
 8001e0e:	f7ff fe17 	bl	8001a40 <lcd_clear>

  //Init AHT10
  aht10.hi2c = &hi2c2;
 8001e12:	4b97      	ldr	r3, [pc, #604]	@ (8002070 <main+0x2ac>)
 8001e14:	4a97      	ldr	r2, [pc, #604]	@ (8002074 <main+0x2b0>)
 8001e16:	601a      	str	r2, [r3, #0]
  aht10.address = 0x38<<1; //AHT10 default address << 1 = 0x38 << 1 = 0x70
 8001e18:	4b95      	ldr	r3, [pc, #596]	@ (8002070 <main+0x2ac>)
 8001e1a:	2270      	movs	r2, #112	@ 0x70
 8001e1c:	711a      	strb	r2, [r3, #4]
  AHT10_Init(&aht10);
 8001e1e:	4894      	ldr	r0, [pc, #592]	@ (8002070 <main+0x2ac>)
 8001e20:	f7ff fcd8 	bl	80017d4 <AHT10_Init>
  HAL_Delay(50);
 8001e24:	2032      	movs	r0, #50	@ 0x32
 8001e26:	f000 fe83 	bl	8002b30 <HAL_Delay>

  //Init LoRa
  myLoRa = newLoRa();
 8001e2a:	4c93      	ldr	r4, [pc, #588]	@ (8002078 <main+0x2b4>)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f918 	bl	8001064 <newLoRa>
 8001e34:	4625      	mov	r5, r4
 8001e36:	463c      	mov	r4, r7
 8001e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e44:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001e48:	4b8b      	ldr	r3, [pc, #556]	@ (8002078 <main+0x2b4>)
 8001e4a:	4a8c      	ldr	r2, [pc, #560]	@ (800207c <main+0x2b8>)
 8001e4c:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8001e4e:	4b8a      	ldr	r3, [pc, #552]	@ (8002078 <main+0x2b4>)
 8001e50:	2210      	movs	r2, #16
 8001e52:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001e54:	4b88      	ldr	r3, [pc, #544]	@ (8002078 <main+0x2b4>)
 8001e56:	4a8a      	ldr	r2, [pc, #552]	@ (8002080 <main+0x2bc>)
 8001e58:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001e5a:	4b87      	ldr	r3, [pc, #540]	@ (8002078 <main+0x2b4>)
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001e60:	4b85      	ldr	r3, [pc, #532]	@ (8002078 <main+0x2b4>)
 8001e62:	4a86      	ldr	r2, [pc, #536]	@ (800207c <main+0x2b8>)
 8001e64:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8001e66:	4b84      	ldr	r3, [pc, #528]	@ (8002078 <main+0x2b4>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001e6c:	4b82      	ldr	r3, [pc, #520]	@ (8002078 <main+0x2b4>)
 8001e6e:	4a85      	ldr	r2, [pc, #532]	@ (8002084 <main+0x2c0>)
 8001e70:	619a      	str	r2, [r3, #24]

  LoRa_init(&myLoRa);
 8001e72:	4881      	ldr	r0, [pc, #516]	@ (8002078 <main+0x2b4>)
 8001e74:	f7ff fc07 	bl	8001686 <LoRa_init>

    if (!LoRa_init(&myLoRa)) {
 8001e78:	487f      	ldr	r0, [pc, #508]	@ (8002078 <main+0x2b4>)
 8001e7a:	f7ff fc04 	bl	8001686 <LoRa_init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d106      	bne.n	8001e92 <main+0xce>
        HAL_UART_Transmit(&huart1, (uint8_t*)"LoRa init failed\r\n", 18, 100);
 8001e84:	2364      	movs	r3, #100	@ 0x64
 8001e86:	2212      	movs	r2, #18
 8001e88:	497f      	ldr	r1, [pc, #508]	@ (8002088 <main+0x2c4>)
 8001e8a:	4876      	ldr	r0, [pc, #472]	@ (8002064 <main+0x2a0>)
 8001e8c:	f003 fed2 	bl	8005c34 <HAL_UART_Transmit>
 8001e90:	e005      	b.n	8001e9e <main+0xda>
    }
    else {
    	HAL_UART_Transmit(&huart1, (uint8_t*)"LoRa init done\r\n", 14, 100);
 8001e92:	2364      	movs	r3, #100	@ 0x64
 8001e94:	220e      	movs	r2, #14
 8001e96:	497d      	ldr	r1, [pc, #500]	@ (800208c <main+0x2c8>)
 8001e98:	4872      	ldr	r0, [pc, #456]	@ (8002064 <main+0x2a0>)
 8001e9a:	f003 fecb 	bl	8005c34 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		//Read sensor AHT10
		if (AHT10_ReadRaw(&aht10, &hum_raw, &temp_raw)) {
 8001e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002090 <main+0x2cc>)
 8001ea0:	497c      	ldr	r1, [pc, #496]	@ (8002094 <main+0x2d0>)
 8001ea2:	4873      	ldr	r0, [pc, #460]	@ (8002070 <main+0x2ac>)
 8001ea4:	f7ff fcba 	bl	800181c <AHT10_ReadRaw>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8166 	beq.w	800217c <main+0x3b8>
			temperature = AHT10_ReadTemperature(temp_raw);
 8001eb0:	4b77      	ldr	r3, [pc, #476]	@ (8002090 <main+0x2cc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fd05 	bl	80018c4 <AHT10_ReadTemperature>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a76      	ldr	r2, [pc, #472]	@ (8002098 <main+0x2d4>)
 8001ebe:	6013      	str	r3, [r2, #0]
			humidity = AHT10_ReadHumidity(hum_raw);
 8001ec0:	4b74      	ldr	r3, [pc, #464]	@ (8002094 <main+0x2d0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fd31 	bl	800192c <AHT10_ReadHumidity>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a73      	ldr	r2, [pc, #460]	@ (800209c <main+0x2d8>)
 8001ece:	6013      	str	r3, [r2, #0]

			int temp_int = (int) temperature;
 8001ed0:	4b71      	ldr	r3, [pc, #452]	@ (8002098 <main+0x2d4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f869 	bl	8000fac <__aeabi_f2iz>
 8001eda:	4603      	mov	r3, r0
 8001edc:	653b      	str	r3, [r7, #80]	@ 0x50
			int temp_frac = (int) ((temperature - temp_int) * 10);
 8001ede:	4b6e      	ldr	r3, [pc, #440]	@ (8002098 <main+0x2d4>)
 8001ee0:	681c      	ldr	r4, [r3, #0]
 8001ee2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001ee4:	f7fe ff98 	bl	8000e18 <__aeabi_i2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7fe fedd 	bl	8000cac <__aeabi_fsub>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	496a      	ldr	r1, [pc, #424]	@ (80020a0 <main+0x2dc>)
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f932 	bl	8000160 <__aeabi_fmul>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f854 	bl	8000fac <__aeabi_f2iz>
 8001f04:	4603      	mov	r3, r0
 8001f06:	64fb      	str	r3, [r7, #76]	@ 0x4c

			int hum_int = (int) humidity;
 8001f08:	4b64      	ldr	r3, [pc, #400]	@ (800209c <main+0x2d8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f84d 	bl	8000fac <__aeabi_f2iz>
 8001f12:	4603      	mov	r3, r0
 8001f14:	64bb      	str	r3, [r7, #72]	@ 0x48
			int hum_frac = (int) ((humidity - hum_int) * 10);
 8001f16:	4b61      	ldr	r3, [pc, #388]	@ (800209c <main+0x2d8>)
 8001f18:	681c      	ldr	r4, [r3, #0]
 8001f1a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001f1c:	f7fe ff7c 	bl	8000e18 <__aeabi_i2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4619      	mov	r1, r3
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7fe fec1 	bl	8000cac <__aeabi_fsub>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	495c      	ldr	r1, [pc, #368]	@ (80020a0 <main+0x2dc>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe f916 	bl	8000160 <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f838 	bl	8000fac <__aeabi_f2iz>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	647b      	str	r3, [r7, #68]	@ 0x44

			//Send data via UART & LoRa
			uint8_t node_id = 01;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
			sprintf(buffer, "NODE%d:%d.%d:%d.%d\r\n", node_id, temp_int,
 8001f46:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f58:	4952      	ldr	r1, [pc, #328]	@ (80020a4 <main+0x2e0>)
 8001f5a:	4853      	ldr	r0, [pc, #332]	@ (80020a8 <main+0x2e4>)
 8001f5c:	f005 fbd6 	bl	800770c <siprintf>
					temp_frac, hum_int, hum_frac);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 8001f60:	4851      	ldr	r0, [pc, #324]	@ (80020a8 <main+0x2e4>)
 8001f62:	f7fe f8f5 	bl	8000150 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	494e      	ldr	r1, [pc, #312]	@ (80020a8 <main+0x2e4>)
 8001f70:	483c      	ldr	r0, [pc, #240]	@ (8002064 <main+0x2a0>)
 8001f72:	f003 fe5f 	bl	8005c34 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			if (!LoRa_transmit(&myLoRa, (uint8_t*) buffer, strlen(buffer),
 8001f76:	484c      	ldr	r0, [pc, #304]	@ (80020a8 <main+0x2e4>)
 8001f78:	f7fe f8ea 	bl	8000150 <strlen>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f84:	4948      	ldr	r1, [pc, #288]	@ (80020a8 <main+0x2e4>)
 8001f86:	483c      	ldr	r0, [pc, #240]	@ (8002078 <main+0x2b4>)
 8001f88:	f7ff fb25 	bl	80015d6 <LoRa_transmit>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <main+0x1dc>
					2000)) {
				HAL_UART_Transmit(&huart1, (uint8_t*) "LoRa Send Error\r\n", 17,
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	2211      	movs	r2, #17
 8001f98:	4944      	ldr	r1, [pc, #272]	@ (80020ac <main+0x2e8>)
 8001f9a:	4832      	ldr	r0, [pc, #200]	@ (8002064 <main+0x2a0>)
 8001f9c:	f003 fe4a 	bl	8005c34 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}

			// LED theo nhiệt độ
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fa6:	4836      	ldr	r0, [pc, #216]	@ (8002080 <main+0x2bc>)
 8001fa8:	f001 f92a 	bl	8003200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fb2:	4833      	ldr	r0, [pc, #204]	@ (8002080 <main+0x2bc>)
 8001fb4:	f001 f924 	bl	8003200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fbe:	4830      	ldr	r0, [pc, #192]	@ (8002080 <main+0x2bc>)
 8001fc0:	f001 f91e 	bl	8003200 <HAL_GPIO_WritePin>

			GPIO_TypeDef *ledPort = GPIOB;
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <main+0x2bc>)
 8001fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			uint16_t ledPin;
			if (temperature > temp_max) {
 8001fc8:	4b33      	ldr	r3, [pc, #204]	@ (8002098 <main+0x2d4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a38      	ldr	r2, [pc, #224]	@ (80020b0 <main+0x2ec>)
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe ffe0 	bl	8000f98 <__aeabi_fcmpgt>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <main+0x224>
				ledPin = GPIO_PIN_12; // đỏ
 8001fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8001fe6:	e013      	b.n	8002010 <main+0x24c>
			} else if (temperature >= temp_min) {
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <main+0x2d4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a31      	ldr	r2, [pc, #196]	@ (80020b4 <main+0x2f0>)
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe ffc6 	bl	8000f84 <__aeabi_fcmpge>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <main+0x244>
				ledPin = GPIO_PIN_13; // vàng
 8001ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002002:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002006:	e003      	b.n	8002010 <main+0x24c>
			} else {
				ledPin = GPIO_PIN_14; // xanh
 8002008:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800200c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
			}

			uint32_t displayTime = 2000;
 8002010:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002014:	63bb      	str	r3, [r7, #56]	@ 0x38
			uint32_t startTime = HAL_GetTick();
 8002016:	f000 fd81 	bl	8002b1c <HAL_GetTick>
 800201a:	6378      	str	r0, [r7, #52]	@ 0x34
			while ((HAL_GetTick() - startTime) < displayTime) {
 800201c:	e086      	b.n	800212c <main+0x368>
				if (humidity >= humi_min && humidity <= humi_max) {
 800201e:	4b1f      	ldr	r3, [pc, #124]	@ (800209c <main+0x2d8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a25      	ldr	r2, [pc, #148]	@ (80020b8 <main+0x2f4>)
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe ffab 	bl	8000f84 <__aeabi_fcmpge>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d045      	beq.n	80020c0 <main+0x2fc>
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <main+0x2d8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a20      	ldr	r2, [pc, #128]	@ (80020bc <main+0x2f8>)
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe ff96 	bl	8000f70 <__aeabi_fcmple>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03a      	beq.n	80020c0 <main+0x2fc>
					HAL_GPIO_WritePin(ledPort, ledPin, GPIO_PIN_SET);
 800204a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800204e:	2201      	movs	r2, #1
 8002050:	4619      	mov	r1, r3
 8002052:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002054:	f001 f8d4 	bl	8003200 <HAL_GPIO_WritePin>
 8002058:	e068      	b.n	800212c <main+0x368>
 800205a:	bf00      	nop
 800205c:	20000304 	.word	0x20000304
 8002060:	20000400 	.word	0x20000400
 8002064:	2000034c 	.word	0x2000034c
 8002068:	2000039c 	.word	0x2000039c
 800206c:	20000204 	.word	0x20000204
 8002070:	20000394 	.word	0x20000394
 8002074:	20000258 	.word	0x20000258
 8002078:	200003a4 	.word	0x200003a4
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00
 8002084:	200002ac 	.word	0x200002ac
 8002088:	08009a54 	.word	0x08009a54
 800208c:	08009a68 	.word	0x08009a68
 8002090:	200003f8 	.word	0x200003f8
 8002094:	200003fc 	.word	0x200003fc
 8002098:	200003f0 	.word	0x200003f0
 800209c:	200003f4 	.word	0x200003f4
 80020a0:	41200000 	.word	0x41200000
 80020a4:	08009a7c 	.word	0x08009a7c
 80020a8:	200003d0 	.word	0x200003d0
 80020ac:	08009a94 	.word	0x08009a94
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	20000008 	.word	0x20000008
				} else if (humidity < humi_min) {
 80020c0:	4b37      	ldr	r3, [pc, #220]	@ (80021a0 <main+0x3dc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a37      	ldr	r2, [pc, #220]	@ (80021a4 <main+0x3e0>)
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe ff46 	bl	8000f5c <__aeabi_fcmplt>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d014      	beq.n	8002100 <main+0x33c>
					HAL_GPIO_WritePin(ledPort, ledPin, GPIO_PIN_SET);
 80020d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80020da:	2201      	movs	r2, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80020e0:	f001 f88e 	bl	8003200 <HAL_GPIO_WritePin>
					HAL_Delay(100);
 80020e4:	2064      	movs	r0, #100	@ 0x64
 80020e6:	f000 fd23 	bl	8002b30 <HAL_Delay>
					HAL_GPIO_WritePin(ledPort, ledPin, GPIO_PIN_RESET);
 80020ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80020ee:	2200      	movs	r2, #0
 80020f0:	4619      	mov	r1, r3
 80020f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80020f4:	f001 f884 	bl	8003200 <HAL_GPIO_WritePin>
					HAL_Delay(100);
 80020f8:	2064      	movs	r0, #100	@ 0x64
 80020fa:	f000 fd19 	bl	8002b30 <HAL_Delay>
 80020fe:	e015      	b.n	800212c <main+0x368>
				} else {
					HAL_GPIO_WritePin(ledPort, ledPin, GPIO_PIN_SET);
 8002100:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002104:	2201      	movs	r2, #1
 8002106:	4619      	mov	r1, r3
 8002108:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800210a:	f001 f879 	bl	8003200 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 800210e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002112:	f000 fd0d 	bl	8002b30 <HAL_Delay>
					HAL_GPIO_WritePin(ledPort, ledPin, GPIO_PIN_RESET);
 8002116:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800211a:	2200      	movs	r2, #0
 800211c:	4619      	mov	r1, r3
 800211e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002120:	f001 f86e 	bl	8003200 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8002124:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002128:	f000 fd02 	bl	8002b30 <HAL_Delay>
			while ((HAL_GetTick() - startTime) < displayTime) {
 800212c:	f000 fcf6 	bl	8002b1c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002138:	429a      	cmp	r2, r3
 800213a:	f63f af70 	bhi.w	800201e <main+0x25a>
				}
			}

			//Display on LCD
			sprintf(buffer, "Temp: %d.%d C", temp_int, temp_frac);
 800213e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002142:	4919      	ldr	r1, [pc, #100]	@ (80021a8 <main+0x3e4>)
 8002144:	4819      	ldr	r0, [pc, #100]	@ (80021ac <main+0x3e8>)
 8002146:	f005 fae1 	bl	800770c <siprintf>
			lcd_gotoxy(&lcd, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	4818      	ldr	r0, [pc, #96]	@ (80021b0 <main+0x3ec>)
 8002150:	f7ff fc90 	bl	8001a74 <lcd_gotoxy>
			lcd_puts(&lcd, buffer);
 8002154:	4915      	ldr	r1, [pc, #84]	@ (80021ac <main+0x3e8>)
 8002156:	4816      	ldr	r0, [pc, #88]	@ (80021b0 <main+0x3ec>)
 8002158:	f7ff fd05 	bl	8001b66 <lcd_puts>

			sprintf(buffer, "Hum:  %d.%d %%", hum_int, hum_frac);
 800215c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800215e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002160:	4914      	ldr	r1, [pc, #80]	@ (80021b4 <main+0x3f0>)
 8002162:	4812      	ldr	r0, [pc, #72]	@ (80021ac <main+0x3e8>)
 8002164:	f005 fad2 	bl	800770c <siprintf>
			lcd_gotoxy(&lcd, 0, 1);
 8002168:	2201      	movs	r2, #1
 800216a:	2100      	movs	r1, #0
 800216c:	4810      	ldr	r0, [pc, #64]	@ (80021b0 <main+0x3ec>)
 800216e:	f7ff fc81 	bl	8001a74 <lcd_gotoxy>
			lcd_puts(&lcd, buffer);
 8002172:	490e      	ldr	r1, [pc, #56]	@ (80021ac <main+0x3e8>)
 8002174:	480e      	ldr	r0, [pc, #56]	@ (80021b0 <main+0x3ec>)
 8002176:	f7ff fcf6 	bl	8001b66 <lcd_puts>
 800217a:	e00b      	b.n	8002194 <main+0x3d0>
		} else {
			lcd_gotoxy(&lcd, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	480b      	ldr	r0, [pc, #44]	@ (80021b0 <main+0x3ec>)
 8002182:	f7ff fc77 	bl	8001a74 <lcd_gotoxy>
			HAL_UART_Transmit(&huart1, (uint8_t*) "AHT10 Error\r\n", 13,
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	220d      	movs	r2, #13
 800218c:	490a      	ldr	r1, [pc, #40]	@ (80021b8 <main+0x3f4>)
 800218e:	480b      	ldr	r0, [pc, #44]	@ (80021bc <main+0x3f8>)
 8002190:	f003 fd50 	bl	8005c34 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}

		// Delay theo chu kỳ
		HAL_Delay(interval_ms);
 8002194:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <main+0x3fc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fcc9 	bl	8002b30 <HAL_Delay>
		if (AHT10_ReadRaw(&aht10, &hum_raw, &temp_raw)) {
 800219e:	e67e      	b.n	8001e9e <main+0xda>
 80021a0:	200003f4 	.word	0x200003f4
 80021a4:	2000000c 	.word	0x2000000c
 80021a8:	08009aa8 	.word	0x08009aa8
 80021ac:	200003d0 	.word	0x200003d0
 80021b0:	2000039c 	.word	0x2000039c
 80021b4:	08009ab8 	.word	0x08009ab8
 80021b8:	08009ac8 	.word	0x08009ac8
 80021bc:	2000034c 	.word	0x2000034c
 80021c0:	20000010 	.word	0x20000010

080021c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b090      	sub	sp, #64	@ 0x40
 80021c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	2228      	movs	r2, #40	@ 0x28
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f005 faff 	bl	80077d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f4:	2301      	movs	r3, #1
 80021f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f8:	2302      	movs	r3, #2
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002200:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002202:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	4618      	mov	r0, r3
 800220e:	f002 f843 	bl	8004298 <HAL_RCC_OscConfig>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002218:	f000 f9a6 	bl	8002568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800221c:	230f      	movs	r3, #15
 800221e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002220:	2302      	movs	r3, #2
 8002222:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800222c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	2102      	movs	r1, #2
 8002236:	4618      	mov	r0, r3
 8002238:	f002 fab0 	bl	800479c <HAL_RCC_ClockConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002242:	f000 f991 	bl	8002568 <Error_Handler>
  }
}
 8002246:	bf00      	nop
 8002248:	3740      	adds	r7, #64	@ 0x40
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <MX_I2C1_Init+0x50>)
 8002256:	4a13      	ldr	r2, [pc, #76]	@ (80022a4 <MX_I2C1_Init+0x54>)
 8002258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800225a:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <MX_I2C1_Init+0x50>)
 800225c:	4a12      	ldr	r2, [pc, #72]	@ (80022a8 <MX_I2C1_Init+0x58>)
 800225e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002260:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <MX_I2C1_Init+0x50>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <MX_I2C1_Init+0x50>)
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <MX_I2C1_Init+0x50>)
 800226e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <MX_I2C1_Init+0x50>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <MX_I2C1_Init+0x50>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <MX_I2C1_Init+0x50>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <MX_I2C1_Init+0x50>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800228c:	4804      	ldr	r0, [pc, #16]	@ (80022a0 <MX_I2C1_Init+0x50>)
 800228e:	f000 ffcf 	bl	8003230 <HAL_I2C_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002298:	f000 f966 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000204 	.word	0x20000204
 80022a4:	40005400 	.word	0x40005400
 80022a8:	000186a0 	.word	0x000186a0

080022ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022b2:	4a13      	ldr	r2, [pc, #76]	@ (8002300 <MX_I2C2_Init+0x54>)
 80022b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022b8:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <MX_I2C2_Init+0x58>)
 80022ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	@ (80022fc <MX_I2C2_Init+0x50>)
 80022ea:	f000 ffa1 	bl	8003230 <HAL_I2C_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80022f4:	f000 f938 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000258 	.word	0x20000258
 8002300:	40005800 	.word	0x40005800
 8002304:	00061a80 	.word	0x00061a80

08002308 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800230c:	4b17      	ldr	r3, [pc, #92]	@ (800236c <MX_SPI1_Init+0x64>)
 800230e:	4a18      	ldr	r2, [pc, #96]	@ (8002370 <MX_SPI1_Init+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002312:	4b16      	ldr	r3, [pc, #88]	@ (800236c <MX_SPI1_Init+0x64>)
 8002314:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002318:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800231a:	4b14      	ldr	r3, [pc, #80]	@ (800236c <MX_SPI1_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002320:	4b12      	ldr	r3, [pc, #72]	@ (800236c <MX_SPI1_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002326:	4b11      	ldr	r3, [pc, #68]	@ (800236c <MX_SPI1_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800232c:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <MX_SPI1_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002332:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <MX_SPI1_Init+0x64>)
 8002334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002338:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800233a:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <MX_SPI1_Init+0x64>)
 800233c:	2218      	movs	r2, #24
 800233e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <MX_SPI1_Init+0x64>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002346:	4b09      	ldr	r3, [pc, #36]	@ (800236c <MX_SPI1_Init+0x64>)
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <MX_SPI1_Init+0x64>)
 800234e:	2200      	movs	r2, #0
 8002350:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <MX_SPI1_Init+0x64>)
 8002354:	220a      	movs	r2, #10
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002358:	4804      	ldr	r0, [pc, #16]	@ (800236c <MX_SPI1_Init+0x64>)
 800235a:	f002 fbad 	bl	8004ab8 <HAL_SPI_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002364:	f000 f900 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200002ac 	.word	0x200002ac
 8002370:	40013000 	.word	0x40013000

08002374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237a:	f107 0308 	add.w	r3, r7, #8
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002388:	463b      	mov	r3, r7
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002390:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <MX_TIM2_Init+0x98>)
 8002392:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8002398:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <MX_TIM2_Init+0x98>)
 800239a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800239e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <MX_TIM2_Init+0x98>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <MX_TIM2_Init+0x98>)
 80023a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80023ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b17      	ldr	r3, [pc, #92]	@ (800240c <MX_TIM2_Init+0x98>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b15      	ldr	r3, [pc, #84]	@ (800240c <MX_TIM2_Init+0x98>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023ba:	4814      	ldr	r0, [pc, #80]	@ (800240c <MX_TIM2_Init+0x98>)
 80023bc:	f003 f91f 	bl	80055fe <HAL_TIM_Base_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023c6:	f000 f8cf 	bl	8002568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4619      	mov	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	@ (800240c <MX_TIM2_Init+0x98>)
 80023d8:	f003 f9b2 	bl	8005740 <HAL_TIM_ConfigClockSource>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80023e2:	f000 f8c1 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	@ (800240c <MX_TIM2_Init+0x98>)
 80023f4:	f003 fb70 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80023fe:	f000 f8b3 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000304 	.word	0x20000304

08002410 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002416:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <MX_USART1_UART_Init+0x50>)
 8002418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800241c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002448:	f003 fba4 	bl	8005b94 <HAL_UART_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002452:	f000 f889 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000034c 	.word	0x2000034c
 8002460:	40013800 	.word	0x40013800

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002478:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <MX_GPIO_Init+0xf4>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a36      	ldr	r2, [pc, #216]	@ (8002558 <MX_GPIO_Init+0xf4>)
 800247e:	f043 0320 	orr.w	r3, r3, #32
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b34      	ldr	r3, [pc, #208]	@ (8002558 <MX_GPIO_Init+0xf4>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <MX_GPIO_Init+0xf4>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a30      	ldr	r2, [pc, #192]	@ (8002558 <MX_GPIO_Init+0xf4>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b2e      	ldr	r3, [pc, #184]	@ (8002558 <MX_GPIO_Init+0xf4>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <MX_GPIO_Init+0xf4>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002558 <MX_GPIO_Init+0xf4>)
 80024ae:	f043 0308 	orr.w	r3, r3, #8
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b28      	ldr	r3, [pc, #160]	@ (8002558 <MX_GPIO_Init+0xf4>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2110      	movs	r1, #16
 80024c4:	4825      	ldr	r0, [pc, #148]	@ (800255c <MX_GPIO_Init+0xf8>)
 80024c6:	f000 fe9b 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80024ca:	2201      	movs	r2, #1
 80024cc:	2102      	movs	r1, #2
 80024ce:	4824      	ldr	r0, [pc, #144]	@ (8002560 <MX_GPIO_Init+0xfc>)
 80024d0:	f000 fe96 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80024da:	4821      	ldr	r0, [pc, #132]	@ (8002560 <MX_GPIO_Init+0xfc>)
 80024dc:	f000 fe90 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80024e0:	2301      	movs	r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <MX_GPIO_Init+0x100>)
 80024e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	4619      	mov	r1, r3
 80024f2:	481a      	ldr	r0, [pc, #104]	@ (800255c <MX_GPIO_Init+0xf8>)
 80024f4:	f000 fd00 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80024f8:	2310      	movs	r3, #16
 80024fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2302      	movs	r3, #2
 8002506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	4619      	mov	r1, r3
 800250e:	4813      	ldr	r0, [pc, #76]	@ (800255c <MX_GPIO_Init+0xf8>)
 8002510:	f000 fcf2 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8002514:	2302      	movs	r3, #2
 8002516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002518:	2301      	movs	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2302      	movs	r3, #2
 8002522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	4619      	mov	r1, r3
 800252a:	480d      	ldr	r0, [pc, #52]	@ (8002560 <MX_GPIO_Init+0xfc>)
 800252c:	f000 fce4 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002530:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	2301      	movs	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253a:	2301      	movs	r3, #1
 800253c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2302      	movs	r3, #2
 8002540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	@ (8002560 <MX_GPIO_Init+0xfc>)
 800254a:	f000 fcd5 	bl	8002ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40010800 	.word	0x40010800
 8002560:	40010c00 	.word	0x40010c00
 8002564:	10110000 	.word	0x10110000

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <Error_Handler+0x8>

08002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <HAL_MspInit+0x5c>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a14      	ldr	r2, [pc, #80]	@ (80025d0 <HAL_MspInit+0x5c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6193      	str	r3, [r2, #24]
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_MspInit+0x5c>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <HAL_MspInit+0x5c>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a0e      	ldr	r2, [pc, #56]	@ (80025d0 <HAL_MspInit+0x5c>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]
 800259e:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <HAL_MspInit+0x5c>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025aa:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <HAL_MspInit+0x60>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <HAL_MspInit+0x60>)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000

080025d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0318 	add.w	r3, r7, #24
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2b      	ldr	r2, [pc, #172]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d124      	bne.n	8002642 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f8:	4b2a      	ldr	r3, [pc, #168]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a29      	ldr	r2, [pc, #164]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 80025fe:	f043 0308 	orr.w	r3, r3, #8
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002610:	23c0      	movs	r3, #192	@ 0xc0
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002614:	2312      	movs	r3, #18
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261c:	f107 0318 	add.w	r3, r7, #24
 8002620:	4619      	mov	r1, r3
 8002622:	4821      	ldr	r0, [pc, #132]	@ (80026a8 <HAL_I2C_MspInit+0xd0>)
 8002624:	f000 fc68 	bl	8002ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002628:	4b1e      	ldr	r3, [pc, #120]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	4a1d      	ldr	r2, [pc, #116]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 800262e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002632:	61d3      	str	r3, [r2, #28]
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002640:	e029      	b.n	8002696 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a19      	ldr	r2, [pc, #100]	@ (80026ac <HAL_I2C_MspInit+0xd4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d124      	bne.n	8002696 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a14      	ldr	r2, [pc, #80]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002664:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800266a:	2312      	movs	r3, #18
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 0318 	add.w	r3, r7, #24
 8002676:	4619      	mov	r1, r3
 8002678:	480b      	ldr	r0, [pc, #44]	@ (80026a8 <HAL_I2C_MspInit+0xd0>)
 800267a:	f000 fc3d 	bl	8002ef8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800267e:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a08      	ldr	r2, [pc, #32]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 8002684:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002688:	61d3      	str	r3, [r2, #28]
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	@ 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40005400 	.word	0x40005400
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40010c00 	.word	0x40010c00
 80026ac:	40005800 	.word	0x40005800

080026b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002738 <HAL_SPI_MspInit+0x88>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d12f      	bne.n	8002730 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <HAL_SPI_MspInit+0x8c>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4a19      	ldr	r2, [pc, #100]	@ (800273c <HAL_SPI_MspInit+0x8c>)
 80026d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026da:	6193      	str	r3, [r2, #24]
 80026dc:	4b17      	ldr	r3, [pc, #92]	@ (800273c <HAL_SPI_MspInit+0x8c>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_SPI_MspInit+0x8c>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a13      	ldr	r2, [pc, #76]	@ (800273c <HAL_SPI_MspInit+0x8c>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_SPI_MspInit+0x8c>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002700:	23a0      	movs	r3, #160	@ 0xa0
 8002702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	4619      	mov	r1, r3
 8002712:	480b      	ldr	r0, [pc, #44]	@ (8002740 <HAL_SPI_MspInit+0x90>)
 8002714:	f000 fbf0 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002718:	2340      	movs	r3, #64	@ 0x40
 800271a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	4619      	mov	r1, r3
 800272a:	4805      	ldr	r0, [pc, #20]	@ (8002740 <HAL_SPI_MspInit+0x90>)
 800272c:	f000 fbe4 	bl	8002ef8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002730:	bf00      	nop
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40013000 	.word	0x40013000
 800273c:	40021000 	.word	0x40021000
 8002740:	40010800 	.word	0x40010800

08002744 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002754:	d10b      	bne.n	800276e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <HAL_TIM_Base_MspInit+0x34>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a07      	ldr	r2, [pc, #28]	@ (8002778 <HAL_TIM_Base_MspInit+0x34>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	61d3      	str	r3, [r2, #28]
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_TIM_Base_MspInit+0x34>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000

0800277c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <HAL_UART_MspInit+0x9c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d139      	bne.n	8002810 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279c:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <HAL_UART_MspInit+0xa0>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4a1e      	ldr	r2, [pc, #120]	@ (800281c <HAL_UART_MspInit+0xa0>)
 80027a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a6:	6193      	str	r3, [r2, #24]
 80027a8:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <HAL_UART_MspInit+0xa0>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b4:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_UART_MspInit+0xa0>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a18      	ldr	r2, [pc, #96]	@ (800281c <HAL_UART_MspInit+0xa0>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b16      	ldr	r3, [pc, #88]	@ (800281c <HAL_UART_MspInit+0xa0>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	4619      	mov	r1, r3
 80027e0:	480f      	ldr	r0, [pc, #60]	@ (8002820 <HAL_UART_MspInit+0xa4>)
 80027e2:	f000 fb89 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4619      	mov	r1, r3
 80027fa:	4809      	ldr	r0, [pc, #36]	@ (8002820 <HAL_UART_MspInit+0xa4>)
 80027fc:	f000 fb7c 	bl	8002ef8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2100      	movs	r1, #0
 8002804:	2025      	movs	r0, #37	@ 0x25
 8002806:	f000 fa8e 	bl	8002d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800280a:	2025      	movs	r0, #37	@ 0x25
 800280c:	f000 faa7 	bl	8002d5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002810:	bf00      	nop
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40013800 	.word	0x40013800
 800281c:	40021000 	.word	0x40021000
 8002820:	40010800 	.word	0x40010800

08002824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <NMI_Handler+0x4>

0800282c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <HardFault_Handler+0x4>

08002834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <MemManage_Handler+0x4>

0800283c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <BusFault_Handler+0x4>

08002844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <UsageFault_Handler+0x4>

0800284c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002874:	f000 f940 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002880:	4802      	ldr	r0, [pc, #8]	@ (800288c <USART1_IRQHandler+0x10>)
 8002882:	f003 fa87 	bl	8005d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000034c 	.word	0x2000034c

08002890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return 1;
 8002894:	2301      	movs	r3, #1
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <_kill>:

int _kill(int pid, int sig)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028a8:	f005 f852 	bl	8007950 <__errno>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2216      	movs	r2, #22
 80028b0:	601a      	str	r2, [r3, #0]
  return -1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_exit>:

void _exit (int status)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028c6:	f04f 31ff 	mov.w	r1, #4294967295
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffe7 	bl	800289e <_kill>
  while (1) {}    /* Make sure we hang here */
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <_exit+0x12>

080028d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e00a      	b.n	80028fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028e6:	f3af 8000 	nop.w
 80028ea:	4601      	mov	r1, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	60ba      	str	r2, [r7, #8]
 80028f2:	b2ca      	uxtb	r2, r1
 80028f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	dbf0      	blt.n	80028e6 <_read+0x12>
  }

  return len;
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e009      	b.n	8002934 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf1      	blt.n	8002920 <_write+0x12>
  }
  return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_close>:

int _close(int file)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800296c:	605a      	str	r2, [r3, #4]
  return 0;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <_isatty>:

int _isatty(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
	...

080029a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b0:	4a14      	ldr	r2, [pc, #80]	@ (8002a04 <_sbrk+0x5c>)
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <_sbrk+0x60>)
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029bc:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <_sbrk+0x64>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <_sbrk+0x64>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	@ (8002a10 <_sbrk+0x68>)
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ca:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d207      	bcs.n	80029e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d8:	f004 ffba 	bl	8007950 <__errno>
 80029dc:	4603      	mov	r3, r0
 80029de:	220c      	movs	r2, #12
 80029e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
 80029e6:	e009      	b.n	80029fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e8:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <_sbrk+0x64>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ee:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <_sbrk+0x64>)
 80029f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029fa:	68fb      	ldr	r3, [r7, #12]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20005000 	.word	0x20005000
 8002a08:	00000400 	.word	0x00000400
 8002a0c:	20000484 	.word	0x20000484
 8002a10:	200005d8 	.word	0x200005d8

08002a14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a20:	f7ff fff8 	bl	8002a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480b      	ldr	r0, [pc, #44]	@ (8002a54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a26:	490c      	ldr	r1, [pc, #48]	@ (8002a58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a28:	4a0c      	ldr	r2, [pc, #48]	@ (8002a5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a3c:	4c09      	ldr	r4, [pc, #36]	@ (8002a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a4a:	f004 ff87 	bl	800795c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4e:	f7ff f9b9 	bl	8001dc4 <main>
  bx lr
 8002a52:	4770      	bx	lr
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a58:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002a5c:	08009f28 	.word	0x08009f28
  ldr r2, =_sbss
 8002a60:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002a64:	200005d8 	.word	0x200005d8

08002a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC1_2_IRQHandler>
	...

08002a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_Init+0x28>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <HAL_Init+0x28>)
 8002a76:	f043 0310 	orr.w	r3, r3, #16
 8002a7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f000 f947 	bl	8002d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a82:	200f      	movs	r0, #15
 8002a84:	f000 f808 	bl	8002a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a88:	f7ff fd74 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000

08002a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x54>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_InitTick+0x58>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f95f 	bl	8002d7a <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00e      	b.n	8002ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d80a      	bhi.n	8002ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f000 f927 	bl	8002d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <HAL_InitTick+0x5c>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000014 	.word	0x20000014
 8002af0:	2000001c 	.word	0x2000001c
 8002af4:	20000018 	.word	0x20000018

08002af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_IncTick+0x1c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_IncTick+0x20>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a03      	ldr	r2, [pc, #12]	@ (8002b18 <HAL_IncTick+0x20>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	2000001c 	.word	0x2000001c
 8002b18:	20000488 	.word	0x20000488

08002b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b02      	ldr	r3, [pc, #8]	@ (8002b2c <HAL_GetTick+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	20000488 	.word	0x20000488

08002b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_GetTick>
 8002b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d005      	beq.n	8002b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_Delay+0x44>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b56:	bf00      	nop
 8002b58:	f7ff ffe0 	bl	8002b1c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d8f7      	bhi.n	8002b58 <HAL_Delay+0x28>
  {
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000001c 	.word	0x2000001c

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4906      	ldr	r1, [pc, #24]	@ (8002c10 <__NVIC_EnableIRQ+0x34>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	@ (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	@ (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	@ 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cdc:	d301      	bcc.n	8002ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00f      	b.n	8002d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <SysTick_Config+0x40>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cea:	210f      	movs	r1, #15
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	f7ff ff90 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <SysTick_Config+0x40>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfa:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <SysTick_Config+0x40>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	e000e010 	.word	0xe000e010

08002d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff2d 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d38:	f7ff ff42 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f7ff ff90 	bl	8002c68 <NVIC_EncodePriority>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff5f 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff35 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ffa2 	bl	8002ccc <SysTick_Config>
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d008      	beq.n	8002dbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2204      	movs	r2, #4
 8002dae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e020      	b.n	8002dfe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 020e 	bic.w	r2, r2, #14
 8002dca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d005      	beq.n	8002e2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2204      	movs	r2, #4
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e051      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 020e 	bic.w	r2, r2, #14
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <HAL_DMA_Abort_IT+0xd4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d029      	beq.n	8002eaa <HAL_DMA_Abort_IT+0xa2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ee0 <HAL_DMA_Abort_IT+0xd8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <HAL_DMA_Abort_IT+0x9e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <HAL_DMA_Abort_IT+0xdc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01a      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0x98>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <HAL_DMA_Abort_IT+0xe0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d012      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x92>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1c      	ldr	r2, [pc, #112]	@ (8002eec <HAL_DMA_Abort_IT+0xe4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00a      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x8c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <HAL_DMA_Abort_IT+0xe8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d102      	bne.n	8002e8e <HAL_DMA_Abort_IT+0x86>
 8002e88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e8c:	e00e      	b.n	8002eac <HAL_DMA_Abort_IT+0xa4>
 8002e8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e92:	e00b      	b.n	8002eac <HAL_DMA_Abort_IT+0xa4>
 8002e94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e98:	e008      	b.n	8002eac <HAL_DMA_Abort_IT+0xa4>
 8002e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e9e:	e005      	b.n	8002eac <HAL_DMA_Abort_IT+0xa4>
 8002ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ea4:	e002      	b.n	8002eac <HAL_DMA_Abort_IT+0xa4>
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	e000      	b.n	8002eac <HAL_DMA_Abort_IT+0xa4>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <HAL_DMA_Abort_IT+0xec>)
 8002eae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
    } 
  }
  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40020008 	.word	0x40020008
 8002ee0:	4002001c 	.word	0x4002001c
 8002ee4:	40020030 	.word	0x40020030
 8002ee8:	40020044 	.word	0x40020044
 8002eec:	40020058 	.word	0x40020058
 8002ef0:	4002006c 	.word	0x4002006c
 8002ef4:	40020000 	.word	0x40020000

08002ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b08b      	sub	sp, #44	@ 0x2c
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f02:	2300      	movs	r3, #0
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	e169      	b.n	80031e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8158 	bne.w	80031da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a9a      	ldr	r2, [pc, #616]	@ (8003198 <HAL_GPIO_Init+0x2a0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d05e      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f34:	4a98      	ldr	r2, [pc, #608]	@ (8003198 <HAL_GPIO_Init+0x2a0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d875      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f3a:	4a98      	ldr	r2, [pc, #608]	@ (800319c <HAL_GPIO_Init+0x2a4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d058      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f40:	4a96      	ldr	r2, [pc, #600]	@ (800319c <HAL_GPIO_Init+0x2a4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d86f      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f46:	4a96      	ldr	r2, [pc, #600]	@ (80031a0 <HAL_GPIO_Init+0x2a8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d052      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f4c:	4a94      	ldr	r2, [pc, #592]	@ (80031a0 <HAL_GPIO_Init+0x2a8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d869      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f52:	4a94      	ldr	r2, [pc, #592]	@ (80031a4 <HAL_GPIO_Init+0x2ac>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04c      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f58:	4a92      	ldr	r2, [pc, #584]	@ (80031a4 <HAL_GPIO_Init+0x2ac>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d863      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f5e:	4a92      	ldr	r2, [pc, #584]	@ (80031a8 <HAL_GPIO_Init+0x2b0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d046      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
 8002f64:	4a90      	ldr	r2, [pc, #576]	@ (80031a8 <HAL_GPIO_Init+0x2b0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d85d      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f6a:	2b12      	cmp	r3, #18
 8002f6c:	d82a      	bhi.n	8002fc4 <HAL_GPIO_Init+0xcc>
 8002f6e:	2b12      	cmp	r3, #18
 8002f70:	d859      	bhi.n	8003026 <HAL_GPIO_Init+0x12e>
 8002f72:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <HAL_GPIO_Init+0x80>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002ff3 	.word	0x08002ff3
 8002f7c:	08002fcd 	.word	0x08002fcd
 8002f80:	08002fdf 	.word	0x08002fdf
 8002f84:	08003021 	.word	0x08003021
 8002f88:	08003027 	.word	0x08003027
 8002f8c:	08003027 	.word	0x08003027
 8002f90:	08003027 	.word	0x08003027
 8002f94:	08003027 	.word	0x08003027
 8002f98:	08003027 	.word	0x08003027
 8002f9c:	08003027 	.word	0x08003027
 8002fa0:	08003027 	.word	0x08003027
 8002fa4:	08003027 	.word	0x08003027
 8002fa8:	08003027 	.word	0x08003027
 8002fac:	08003027 	.word	0x08003027
 8002fb0:	08003027 	.word	0x08003027
 8002fb4:	08003027 	.word	0x08003027
 8002fb8:	08003027 	.word	0x08003027
 8002fbc:	08002fd5 	.word	0x08002fd5
 8002fc0:	08002fe9 	.word	0x08002fe9
 8002fc4:	4a79      	ldr	r2, [pc, #484]	@ (80031ac <HAL_GPIO_Init+0x2b4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fca:	e02c      	b.n	8003026 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	623b      	str	r3, [r7, #32]
          break;
 8002fd2:	e029      	b.n	8003028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	623b      	str	r3, [r7, #32]
          break;
 8002fdc:	e024      	b.n	8003028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	623b      	str	r3, [r7, #32]
          break;
 8002fe6:	e01f      	b.n	8003028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	330c      	adds	r3, #12
 8002fee:	623b      	str	r3, [r7, #32]
          break;
 8002ff0:	e01a      	b.n	8003028 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	623b      	str	r3, [r7, #32]
          break;
 8002ffe:	e013      	b.n	8003028 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003008:	2308      	movs	r3, #8
 800300a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	611a      	str	r2, [r3, #16]
          break;
 8003012:	e009      	b.n	8003028 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003014:	2308      	movs	r3, #8
 8003016:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	615a      	str	r2, [r3, #20]
          break;
 800301e:	e003      	b.n	8003028 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003020:	2300      	movs	r3, #0
 8003022:	623b      	str	r3, [r7, #32]
          break;
 8003024:	e000      	b.n	8003028 <HAL_GPIO_Init+0x130>
          break;
 8003026:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2bff      	cmp	r3, #255	@ 0xff
 800302c:	d801      	bhi.n	8003032 <HAL_GPIO_Init+0x13a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	e001      	b.n	8003036 <HAL_GPIO_Init+0x13e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2bff      	cmp	r3, #255	@ 0xff
 800303c:	d802      	bhi.n	8003044 <HAL_GPIO_Init+0x14c>
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	e002      	b.n	800304a <HAL_GPIO_Init+0x152>
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	3b08      	subs	r3, #8
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	210f      	movs	r1, #15
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	431a      	orrs	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80b1 	beq.w	80031da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003078:	4b4d      	ldr	r3, [pc, #308]	@ (80031b0 <HAL_GPIO_Init+0x2b8>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4a4c      	ldr	r2, [pc, #304]	@ (80031b0 <HAL_GPIO_Init+0x2b8>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6193      	str	r3, [r2, #24]
 8003084:	4b4a      	ldr	r3, [pc, #296]	@ (80031b0 <HAL_GPIO_Init+0x2b8>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003090:	4a48      	ldr	r2, [pc, #288]	@ (80031b4 <HAL_GPIO_Init+0x2bc>)
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3302      	adds	r3, #2
 8003098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	220f      	movs	r2, #15
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a40      	ldr	r2, [pc, #256]	@ (80031b8 <HAL_GPIO_Init+0x2c0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d013      	beq.n	80030e4 <HAL_GPIO_Init+0x1ec>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a3f      	ldr	r2, [pc, #252]	@ (80031bc <HAL_GPIO_Init+0x2c4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00d      	beq.n	80030e0 <HAL_GPIO_Init+0x1e8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a3e      	ldr	r2, [pc, #248]	@ (80031c0 <HAL_GPIO_Init+0x2c8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <HAL_GPIO_Init+0x1e4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a3d      	ldr	r2, [pc, #244]	@ (80031c4 <HAL_GPIO_Init+0x2cc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_GPIO_Init+0x1e0>
 80030d4:	2303      	movs	r3, #3
 80030d6:	e006      	b.n	80030e6 <HAL_GPIO_Init+0x1ee>
 80030d8:	2304      	movs	r3, #4
 80030da:	e004      	b.n	80030e6 <HAL_GPIO_Init+0x1ee>
 80030dc:	2302      	movs	r3, #2
 80030de:	e002      	b.n	80030e6 <HAL_GPIO_Init+0x1ee>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_GPIO_Init+0x1ee>
 80030e4:	2300      	movs	r3, #0
 80030e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e8:	f002 0203 	and.w	r2, r2, #3
 80030ec:	0092      	lsls	r2, r2, #2
 80030ee:	4093      	lsls	r3, r2
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030f6:	492f      	ldr	r1, [pc, #188]	@ (80031b4 <HAL_GPIO_Init+0x2bc>)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	3302      	adds	r3, #2
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003110:	4b2d      	ldr	r3, [pc, #180]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	492c      	ldr	r1, [pc, #176]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]
 800311c:	e006      	b.n	800312c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800311e:	4b2a      	ldr	r3, [pc, #168]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	43db      	mvns	r3, r3
 8003126:	4928      	ldr	r1, [pc, #160]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003128:	4013      	ands	r3, r2
 800312a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003138:	4b23      	ldr	r3, [pc, #140]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4922      	ldr	r1, [pc, #136]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	60cb      	str	r3, [r1, #12]
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003146:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	43db      	mvns	r3, r3
 800314e:	491e      	ldr	r1, [pc, #120]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003150:	4013      	ands	r3, r2
 8003152:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003160:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4918      	ldr	r1, [pc, #96]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	e006      	b.n	800317c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800316e:	4b16      	ldr	r3, [pc, #88]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	43db      	mvns	r3, r3
 8003176:	4914      	ldr	r1, [pc, #80]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 8003178:	4013      	ands	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d021      	beq.n	80031cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003188:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	490e      	ldr	r1, [pc, #56]	@ (80031c8 <HAL_GPIO_Init+0x2d0>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	e021      	b.n	80031da <HAL_GPIO_Init+0x2e2>
 8003196:	bf00      	nop
 8003198:	10320000 	.word	0x10320000
 800319c:	10310000 	.word	0x10310000
 80031a0:	10220000 	.word	0x10220000
 80031a4:	10210000 	.word	0x10210000
 80031a8:	10120000 	.word	0x10120000
 80031ac:	10110000 	.word	0x10110000
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40010800 	.word	0x40010800
 80031bc:	40010c00 	.word	0x40010c00
 80031c0:	40011000 	.word	0x40011000
 80031c4:	40011400 	.word	0x40011400
 80031c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031cc:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <HAL_GPIO_Init+0x304>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	4909      	ldr	r1, [pc, #36]	@ (80031fc <HAL_GPIO_Init+0x304>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	3301      	adds	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f47f ae8e 	bne.w	8002f0c <HAL_GPIO_Init+0x14>
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	372c      	adds	r7, #44	@ 0x2c
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40010400 	.word	0x40010400

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12b      	b.n	800349a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff f9be 	bl	80025d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003294:	f001 fbca 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a81      	ldr	r2, [pc, #516]	@ (80034a4 <HAL_I2C_Init+0x274>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <HAL_I2C_Init+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a80      	ldr	r2, [pc, #512]	@ (80034a8 <HAL_I2C_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e006      	b.n	80032c2 <HAL_I2C_Init+0x92>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	@ (80034ac <HAL_I2C_Init+0x27c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e7      	b.n	800349a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a78      	ldr	r2, [pc, #480]	@ (80034b0 <HAL_I2C_Init+0x280>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	@ (80034a4 <HAL_I2C_Init+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <HAL_I2C_Init+0xd4>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	e009      	b.n	8003318 <HAL_I2C_Init+0xe8>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4a69      	ldr	r2, [pc, #420]	@ (80034b4 <HAL_I2C_Init+0x284>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800332a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	495c      	ldr	r1, [pc, #368]	@ (80034a4 <HAL_I2C_Init+0x274>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d819      	bhi.n	800336c <HAL_I2C_Init+0x13c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e59      	subs	r1, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fbb1 f3f3 	udiv	r3, r1, r3
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_I2C_Init+0x138>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e59      	subs	r1, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	e051      	b.n	800340c <HAL_I2C_Init+0x1dc>
 8003368:	2304      	movs	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x168>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x18e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x196>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
 80034c8:	4613      	mov	r3, r2
 80034ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7ff fb26 	bl	8002b1c <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 80e0 	bne.w	80036a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2319      	movs	r3, #25
 80034e6:	2201      	movs	r2, #1
 80034e8:	4970      	ldr	r1, [pc, #448]	@ (80036ac <HAL_I2C_Master_Transmit+0x1f4>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fc9e 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	e0d3      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x50>
 8003504:	2302      	movs	r3, #2
 8003506:	e0cc      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d007      	beq.n	800352e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800353c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	@ 0x21
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2210      	movs	r2, #16
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	893a      	ldrh	r2, [r7, #8]
 800355e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a50      	ldr	r2, [pc, #320]	@ (80036b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800356e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fb08 	bl	8003b8c <I2C_MasterRequestWrite>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e08d      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800359c:	e066      	b.n	800366c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	6a39      	ldr	r1, [r7, #32]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fd5c 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d107      	bne.n	80035c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06b      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b04      	cmp	r3, #4
 8003606:	d11b      	bne.n	8003640 <HAL_I2C_Master_Transmit+0x188>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d017      	beq.n	8003640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	6a39      	ldr	r1, [r7, #32]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fd53 	bl	80040f0 <I2C_WaitOnBTFFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b04      	cmp	r3, #4
 8003656:	d107      	bne.n	8003668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e01a      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d194      	bne.n	800359e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	00100002 	.word	0x00100002
 80036b0:	ffff0000 	.word	0xffff0000

080036b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	@ 0x30
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	461a      	mov	r2, r3
 80036c0:	460b      	mov	r3, r1
 80036c2:	817b      	strh	r3, [r7, #10]
 80036c4:	4613      	mov	r3, r2
 80036c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036cc:	f7ff fa26 	bl	8002b1c <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b20      	cmp	r3, #32
 80036dc:	f040 824b 	bne.w	8003b76 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2319      	movs	r3, #25
 80036e6:	2201      	movs	r2, #1
 80036e8:	497f      	ldr	r1, [pc, #508]	@ (80038e8 <HAL_I2C_Master_Receive+0x234>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fb9e 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	e23e      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_I2C_Master_Receive+0x54>
 8003704:	2302      	movs	r3, #2
 8003706:	e237      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d007      	beq.n	800372e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800373c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2222      	movs	r2, #34	@ 0x22
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2210      	movs	r2, #16
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	893a      	ldrh	r2, [r7, #8]
 800375e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a5f      	ldr	r2, [pc, #380]	@ (80038ec <HAL_I2C_Master_Receive+0x238>)
 800376e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003770:	8979      	ldrh	r1, [r7, #10]
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa8a 	bl	8003c90 <I2C_MasterRequestRead>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e1f8      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d113      	bne.n	80037b6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e1cc      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d11e      	bne.n	80037fc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037ce:	b672      	cpsid	i
}
 80037d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037f8:	b662      	cpsie	i
}
 80037fa:	e035      	b.n	8003868 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	2b02      	cmp	r3, #2
 8003802:	d11e      	bne.n	8003842 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003814:	b672      	cpsid	i
}
 8003816:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800383e:	b662      	cpsie	i
}
 8003840:	e012      	b.n	8003868 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003868:	e172      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386e:	2b03      	cmp	r3, #3
 8003870:	f200 811f 	bhi.w	8003ab2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	2b01      	cmp	r3, #1
 800387a:	d123      	bne.n	80038c4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fc7d 	bl	8004180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e173      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038c2:	e145      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d152      	bne.n	8003972 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	4906      	ldr	r1, [pc, #24]	@ (80038f0 <HAL_I2C_Master_Receive+0x23c>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 faa8 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e148      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
 80038e6:	bf00      	nop
 80038e8:	00100002 	.word	0x00100002
 80038ec:	ffff0000 	.word	0xffff0000
 80038f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038f4:	b672      	cpsid	i
}
 80038f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800393a:	b662      	cpsie	i
}
 800393c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003970:	e0ee      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003978:	2200      	movs	r2, #0
 800397a:	4981      	ldr	r1, [pc, #516]	@ (8003b80 <HAL_I2C_Master_Receive+0x4cc>)
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fa55 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0f5      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800399c:	b672      	cpsid	i
}
 800399e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003b84 <HAL_I2C_Master_Receive+0x4d0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	08db      	lsrs	r3, r3, #3
 80039d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003b88 <HAL_I2C_Master_Receive+0x4d4>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0a1a      	lsrs	r2, r3, #8
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00da      	lsls	r2, r3, #3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d118      	bne.n	8003a2a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1a:	b662      	cpsie	i
}
 8003a1c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0a6      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d1d9      	bne.n	80039ec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7a:	b662      	cpsie	i
}
 8003a7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ab0:	e04e      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fb62 	bl	8004180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e058      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d124      	bne.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d107      	bne.n	8003b1e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f47f ae88 	bne.w	800386a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3728      	adds	r7, #40	@ 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	00010004 	.word	0x00010004
 8003b84:	20000014 	.word	0x20000014
 8003b88:	14f8b589 	.word	0x14f8b589

08003b8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d006      	beq.n	8003bb6 <I2C_MasterRequestWrite+0x2a>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d003      	beq.n	8003bb6 <I2C_MasterRequestWrite+0x2a>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bb4:	d108      	bne.n	8003bc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e00b      	b.n	8003be0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bcc:	2b12      	cmp	r3, #18
 8003bce:	d107      	bne.n	8003be0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f91d 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c06:	d103      	bne.n	8003c10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e035      	b.n	8003c80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c1c:	d108      	bne.n	8003c30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c2c:	611a      	str	r2, [r3, #16]
 8003c2e:	e01b      	b.n	8003c68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c30:	897b      	ldrh	r3, [r7, #10]
 8003c32:	11db      	asrs	r3, r3, #7
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f003 0306 	and.w	r3, r3, #6
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f063 030f 	orn	r3, r3, #15
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	490e      	ldr	r1, [pc, #56]	@ (8003c88 <I2C_MasterRequestWrite+0xfc>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f966 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e010      	b.n	8003c80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c5e:	897b      	ldrh	r3, [r7, #10]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4907      	ldr	r1, [pc, #28]	@ (8003c8c <I2C_MasterRequestWrite+0x100>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f956 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	00010008 	.word	0x00010008
 8003c8c:	00010002 	.word	0x00010002

08003c90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d006      	beq.n	8003cca <I2C_MasterRequestRead+0x3a>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <I2C_MasterRequestRead+0x3a>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cc8:	d108      	bne.n	8003cdc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e00b      	b.n	8003cf4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	2b11      	cmp	r3, #17
 8003ce2:	d107      	bne.n	8003cf4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f893 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d1a:	d103      	bne.n	8003d24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e079      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d30:	d108      	bne.n	8003d44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	e05f      	b.n	8003e04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d44:	897b      	ldrh	r3, [r7, #10]
 8003d46:	11db      	asrs	r3, r3, #7
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0306 	and.w	r3, r3, #6
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f063 030f 	orn	r3, r3, #15
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4930      	ldr	r1, [pc, #192]	@ (8003e24 <I2C_MasterRequestRead+0x194>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f8dc 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e054      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d72:	897b      	ldrh	r3, [r7, #10]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4929      	ldr	r1, [pc, #164]	@ (8003e28 <I2C_MasterRequestRead+0x198>)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f8cc 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e044      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f831 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dde:	d103      	bne.n	8003de8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e017      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003dec:	897b      	ldrh	r3, [r7, #10]
 8003dee:	11db      	asrs	r3, r3, #7
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0306 	and.w	r3, r3, #6
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f063 030e 	orn	r3, r3, #14
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4907      	ldr	r1, [pc, #28]	@ (8003e28 <I2C_MasterRequestRead+0x198>)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f888 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	00010008 	.word	0x00010008
 8003e28:	00010002 	.word	0x00010002

08003e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3c:	e048      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d044      	beq.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fe fe69 	bl	8002b1c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d139      	bne.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10d      	bne.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4013      	ands	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	e00c      	b.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	43da      	mvns	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d116      	bne.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e023      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10d      	bne.n	8003ef6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	e00c      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d093      	beq.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2e:	e071      	b.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3e:	d123      	bne.n	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e067      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d041      	beq.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f90:	f7fe fdc4 	bl	8002b1c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d136      	bne.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d10c      	bne.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e00b      	b.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	43da      	mvns	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e021      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10c      	bne.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	43da      	mvns	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e00b      	b.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	f47f af6d 	bne.w	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406c:	e034      	b.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f8e3 	bl	800423a <I2C_IsAcknowledgeFailed>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e034      	b.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d028      	beq.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7fe fd49 	bl	8002b1c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d11d      	bne.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b80      	cmp	r3, #128	@ 0x80
 80040a8:	d016      	beq.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e007      	b.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b80      	cmp	r3, #128	@ 0x80
 80040e4:	d1c3      	bne.n	800406e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040fc:	e034      	b.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f89b 	bl	800423a <I2C_IsAcknowledgeFailed>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e034      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d028      	beq.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fe fd01 	bl	8002b1c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11d      	bne.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d016      	beq.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e007      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d1c3      	bne.n	80040fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800418c:	e049      	b.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b10      	cmp	r3, #16
 800419a:	d119      	bne.n	80041d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0210 	mvn.w	r2, #16
 80041a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e030      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d0:	f7fe fca4 	bl	8002b1c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11d      	bne.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b40      	cmp	r3, #64	@ 0x40
 80041f2:	d016      	beq.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e007      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422c:	2b40      	cmp	r3, #64	@ 0x40
 800422e:	d1ae      	bne.n	800418e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004250:	d11b      	bne.n	800428a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800425a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
	...

08004298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e272      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8087 	beq.w	80043c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042b8:	4b92      	ldr	r3, [pc, #584]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d00c      	beq.n	80042de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d112      	bne.n	80042f6 <HAL_RCC_OscConfig+0x5e>
 80042d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042de:	4b89      	ldr	r3, [pc, #548]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d06c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x12c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d168      	bne.n	80043c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e24c      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fe:	d106      	bne.n	800430e <HAL_RCC_OscConfig+0x76>
 8004300:	4b80      	ldr	r3, [pc, #512]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a7f      	ldr	r2, [pc, #508]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	e02e      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b7b      	ldr	r3, [pc, #492]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7a      	ldr	r2, [pc, #488]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b78      	ldr	r3, [pc, #480]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a77      	ldr	r2, [pc, #476]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004328:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0xbc>
 800433a:	4b72      	ldr	r3, [pc, #456]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a71      	ldr	r2, [pc, #452]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6f      	ldr	r3, [pc, #444]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6e      	ldr	r2, [pc, #440]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 8004354:	4b6b      	ldr	r3, [pc, #428]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6a      	ldr	r2, [pc, #424]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b68      	ldr	r3, [pc, #416]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a67      	ldr	r2, [pc, #412]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fe fbd2 	bl	8002b1c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fe fbce 	bl	8002b1c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e200      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5d      	ldr	r3, [pc, #372]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xe4>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fe fbbe 	bl	8002b1c <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fe fbba 	bl	8002b1c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1ec      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b53      	ldr	r3, [pc, #332]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x10c>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043de:	4b49      	ldr	r3, [pc, #292]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x18c>
 80043ea:	4b46      	ldr	r3, [pc, #280]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b43      	ldr	r3, [pc, #268]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x176>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c0      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4939      	ldr	r1, [pc, #228]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fe fb73 	bl	8002b1c <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443a:	f7fe fb6f 	bl	8002b1c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a1      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b2a      	ldr	r3, [pc, #168]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4927      	ldr	r1, [pc, #156]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b26      	ldr	r3, [pc, #152]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fe fb52 	bl	8002b1c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447c:	f7fe fb4e 	bl	8002b1c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e180      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03a      	beq.n	800451c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d019      	beq.n	80044e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b17      	ldr	r3, [pc, #92]	@ (800450c <HAL_RCC_OscConfig+0x274>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fe fb32 	bl	8002b1c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fe fb2e 	bl	8002b1c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e160      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044da:	2001      	movs	r0, #1
 80044dc:	f000 face 	bl	8004a7c <RCC_Delay>
 80044e0:	e01c      	b.n	800451c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e2:	4b0a      	ldr	r3, [pc, #40]	@ (800450c <HAL_RCC_OscConfig+0x274>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e8:	f7fe fb18 	bl	8002b1c <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ee:	e00f      	b.n	8004510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f0:	f7fe fb14 	bl	8002b1c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d908      	bls.n	8004510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e146      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	42420000 	.word	0x42420000
 800450c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	4b92      	ldr	r3, [pc, #584]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e9      	bne.n	80044f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a6 	beq.w	8004676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452e:	4b8b      	ldr	r3, [pc, #556]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	4b88      	ldr	r3, [pc, #544]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	4a87      	ldr	r2, [pc, #540]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004544:	61d3      	str	r3, [r2, #28]
 8004546:	4b85      	ldr	r3, [pc, #532]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b82      	ldr	r3, [pc, #520]	@ (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b7f      	ldr	r3, [pc, #508]	@ (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7e      	ldr	r2, [pc, #504]	@ (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fe fad5 	bl	8002b1c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fe fad1 	bl	8002b1c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	@ 0x64
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e103      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b75      	ldr	r3, [pc, #468]	@ (8004760 <HAL_RCC_OscConfig+0x4c8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x312>
 800459c:	4b6f      	ldr	r3, [pc, #444]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4a6e      	ldr	r2, [pc, #440]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6213      	str	r3, [r2, #32]
 80045a8:	e02d      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x334>
 80045b2:	4b6a      	ldr	r3, [pc, #424]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a69      	ldr	r2, [pc, #420]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6213      	str	r3, [r2, #32]
 80045be:	4b67      	ldr	r3, [pc, #412]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a66      	ldr	r2, [pc, #408]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	e01c      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	d10c      	bne.n	80045ee <HAL_RCC_OscConfig+0x356>
 80045d4:	4b61      	ldr	r3, [pc, #388]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4a60      	ldr	r2, [pc, #384]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045da:	f043 0304 	orr.w	r3, r3, #4
 80045de:	6213      	str	r3, [r2, #32]
 80045e0:	4b5e      	ldr	r3, [pc, #376]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4a5d      	ldr	r2, [pc, #372]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6213      	str	r3, [r2, #32]
 80045ec:	e00b      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045ee:	4b5b      	ldr	r3, [pc, #364]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4a5a      	ldr	r2, [pc, #360]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	6213      	str	r3, [r2, #32]
 80045fa:	4b58      	ldr	r3, [pc, #352]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4a57      	ldr	r2, [pc, #348]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d015      	beq.n	800463a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fe fa85 	bl	8002b1c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fe fa81 	bl	8002b1c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0b1      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	4b4b      	ldr	r3, [pc, #300]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ee      	beq.n	8004616 <HAL_RCC_OscConfig+0x37e>
 8004638:	e014      	b.n	8004664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463a:	f7fe fa6f 	bl	8002b1c <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe fa6b 	bl	8002b1c <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e09b      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004658:	4b40      	ldr	r3, [pc, #256]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ee      	bne.n	8004642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d105      	bne.n	8004676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466a:	4b3c      	ldr	r3, [pc, #240]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	4a3b      	ldr	r2, [pc, #236]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8087 	beq.w	800478e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004680:	4b36      	ldr	r3, [pc, #216]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d061      	beq.n	8004750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d146      	bne.n	8004722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b33      	ldr	r3, [pc, #204]	@ (8004764 <HAL_RCC_OscConfig+0x4cc>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fe fa3f 	bl	8002b1c <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe fa3b 	bl	8002b1c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e06d      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b4:	4b29      	ldr	r3, [pc, #164]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c8:	d108      	bne.n	80046dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ca:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4921      	ldr	r1, [pc, #132]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046dc:	4b1f      	ldr	r3, [pc, #124]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a19      	ldr	r1, [r3, #32]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	430b      	orrs	r3, r1
 80046ee:	491b      	ldr	r1, [pc, #108]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <HAL_RCC_OscConfig+0x4cc>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fe fa0f 	bl	8002b1c <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fe fa0b 	bl	8002b1c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e03d      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004714:	4b11      	ldr	r3, [pc, #68]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x46a>
 8004720:	e035      	b.n	800478e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <HAL_RCC_OscConfig+0x4cc>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fe f9f8 	bl	8002b1c <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fe f9f4 	bl	8002b1c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e026      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004742:	4b06      	ldr	r3, [pc, #24]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x498>
 800474e:	e01e      	b.n	800478e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e019      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004768:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <HAL_RCC_OscConfig+0x500>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0d0      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b6a      	ldr	r3, [pc, #424]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d910      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b67      	ldr	r3, [pc, #412]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 0207 	bic.w	r2, r3, #7
 80047c6:	4965      	ldr	r1, [pc, #404]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b63      	ldr	r3, [pc, #396]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b59      	ldr	r3, [pc, #356]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a58      	ldr	r2, [pc, #352]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004802:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004810:	4b53      	ldr	r3, [pc, #332]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a52      	ldr	r2, [pc, #328]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800481a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b50      	ldr	r3, [pc, #320]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	494d      	ldr	r1, [pc, #308]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d040      	beq.n	80048bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b47      	ldr	r3, [pc, #284]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d115      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485a:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e073      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486a:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06b      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487a:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4936      	ldr	r1, [pc, #216]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800488c:	f7fe f946 	bl	8002b1c <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7fe f942 	bl	8002b1c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e053      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 020c 	and.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d1eb      	bne.n	8004894 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048bc:	4b27      	ldr	r3, [pc, #156]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d210      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b24      	ldr	r3, [pc, #144]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 0207 	bic.w	r2, r3, #7
 80048d2:	4922      	ldr	r1, [pc, #136]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e032      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b19      	ldr	r3, [pc, #100]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4916      	ldr	r1, [pc, #88]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004916:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f821 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490a      	ldr	r1, [pc, #40]	@ (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	@ (8004968 <HAL_RCC_ClockConfig+0x1cc>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <HAL_RCC_ClockConfig+0x1d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe f8a4 	bl	8002a98 <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40022000 	.word	0x40022000
 8004960:	40021000 	.word	0x40021000
 8004964:	08009ad8 	.word	0x08009ad8
 8004968:	20000014 	.word	0x20000014
 800496c:	20000018 	.word	0x20000018

08004970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800498a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x30>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x36>
 800499e:	e027      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a0:	4b19      	ldr	r3, [pc, #100]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049a2:	613b      	str	r3, [r7, #16]
      break;
 80049a4:	e027      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	0c9b      	lsrs	r3, r3, #18
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	4a17      	ldr	r2, [pc, #92]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80049b0:	5cd3      	ldrb	r3, [r2, r3]
 80049b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d010      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049be:	4b11      	ldr	r3, [pc, #68]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0c5b      	lsrs	r3, r3, #17
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	4a11      	ldr	r2, [pc, #68]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049d2:	fb03 f202 	mul.w	r2, r3, r2
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e004      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	613b      	str	r3, [r7, #16]
      break;
 80049ee:	e002      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049f2:	613b      	str	r3, [r7, #16]
      break;
 80049f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f6:	693b      	ldr	r3, [r7, #16]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	007a1200 	.word	0x007a1200
 8004a0c:	08009af0 	.word	0x08009af0
 8004a10:	08009b00 	.word	0x08009b00
 8004a14:	003d0900 	.word	0x003d0900

08004a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a1c:	4b02      	ldr	r3, [pc, #8]	@ (8004a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	20000014 	.word	0x20000014

08004a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a30:	f7ff fff2 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4903      	ldr	r1, [pc, #12]	@ (8004a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	08009ae8 	.word	0x08009ae8

08004a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a58:	f7ff ffde 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	0adb      	lsrs	r3, r3, #11
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4903      	ldr	r1, [pc, #12]	@ (8004a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000
 8004a78:	08009ae8 	.word	0x08009ae8

08004a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a84:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <RCC_Delay+0x34>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <RCC_Delay+0x38>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	0a5b      	lsrs	r3, r3, #9
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a98:	bf00      	nop
  }
  while (Delay --);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e5a      	subs	r2, r3, #1
 8004a9e:	60fa      	str	r2, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f9      	bne.n	8004a98 <RCC_Delay+0x1c>
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	20000014 	.word	0x20000014
 8004ab4:	10624dd3 	.word	0x10624dd3

08004ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e076      	b.n	8004bb8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d108      	bne.n	8004ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ada:	d009      	beq.n	8004af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
 8004ae2:	e005      	b.n	8004af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd fdd0 	bl	80026b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b74:	ea42 0103 	orr.w	r1, r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	0c1a      	lsrs	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f002 0204 	and.w	r2, r2, #4
 8004b96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ba6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd0:	f7fd ffa4 	bl	8002b1c <HAL_GetTick>
 8004bd4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d001      	beq.n	8004bea <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	e12a      	b.n	8004e40 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_SPI_Transmit+0x36>
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e122      	b.n	8004e40 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_SPI_Transmit+0x48>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e11b      	b.n	8004e40 <HAL_SPI_Transmit+0x280>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2203      	movs	r2, #3
 8004c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c56:	d10f      	bne.n	8004c78 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c82:	2b40      	cmp	r3, #64	@ 0x40
 8004c84:	d007      	beq.n	8004c96 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c9e:	d152      	bne.n	8004d46 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_Transmit+0xee>
 8004ca8:	8b7b      	ldrh	r3, [r7, #26]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d145      	bne.n	8004d3a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	881a      	ldrh	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	1c9a      	adds	r2, r3, #2
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cd2:	e032      	b.n	8004d3a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d112      	bne.n	8004d08 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	881a      	ldrh	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	1c9a      	adds	r2, r3, #2
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d06:	e018      	b.n	8004d3a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d08:	f7fd ff08 	bl	8002b1c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d803      	bhi.n	8004d20 <HAL_SPI_Transmit+0x160>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d102      	bne.n	8004d26 <HAL_SPI_Transmit+0x166>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e082      	b.n	8004e40 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1c7      	bne.n	8004cd4 <HAL_SPI_Transmit+0x114>
 8004d44:	e053      	b.n	8004dee <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_Transmit+0x194>
 8004d4e:	8b7b      	ldrh	r3, [r7, #26]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d147      	bne.n	8004de4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	7812      	ldrb	r2, [r2, #0]
 8004d60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d7a:	e033      	b.n	8004de4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d113      	bne.n	8004db2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004db0:	e018      	b.n	8004de4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004db2:	f7fd feb3 	bl	8002b1c <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d803      	bhi.n	8004dca <HAL_SPI_Transmit+0x20a>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d102      	bne.n	8004dd0 <HAL_SPI_Transmit+0x210>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e02d      	b.n	8004e40 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1c6      	bne.n	8004d7c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fbd2 	bl	800559c <SPI_EndRxTxTransaction>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
  }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
 8004e66:	e104      	b.n	8005072 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e70:	d112      	bne.n	8004e98 <HAL_SPI_Receive+0x50>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10e      	bne.n	8004e98 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f8f3 	bl	800507a <HAL_SPI_TransmitReceive>
 8004e94:	4603      	mov	r3, r0
 8004e96:	e0ec      	b.n	8005072 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e98:	f7fd fe40 	bl	8002b1c <HAL_GetTick>
 8004e9c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Receive+0x62>
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0e1      	b.n	8005072 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_SPI_Receive+0x74>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e0da      	b.n	8005072 <HAL_SPI_Receive+0x22a>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	88fa      	ldrh	r2, [r7, #6]
 8004ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f0a:	d10f      	bne.n	8004f2c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f36:	2b40      	cmp	r3, #64	@ 0x40
 8004f38:	d007      	beq.n	8004f4a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d170      	bne.n	8005034 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f52:	e035      	b.n	8004fc0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d115      	bne.n	8004f8e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f103 020c 	add.w	r2, r3, #12
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	7812      	ldrb	r2, [r2, #0]
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f8c:	e018      	b.n	8004fc0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f8e:	f7fd fdc5 	bl	8002b1c <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d803      	bhi.n	8004fa6 <HAL_SPI_Receive+0x15e>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d102      	bne.n	8004fac <HAL_SPI_Receive+0x164>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e058      	b.n	8005072 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1c4      	bne.n	8004f54 <HAL_SPI_Receive+0x10c>
 8004fca:	e038      	b.n	800503e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d113      	bne.n	8005002 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe4:	b292      	uxth	r2, r2
 8004fe6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fec:	1c9a      	adds	r2, r3, #2
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005000:	e018      	b.n	8005034 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005002:	f7fd fd8b 	bl	8002b1c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d803      	bhi.n	800501a <HAL_SPI_Receive+0x1d2>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d102      	bne.n	8005020 <HAL_SPI_Receive+0x1d8>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e01e      	b.n	8005072 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1c6      	bne.n	8004fcc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fa58 	bl	80054f8 <SPI_EndRxTransaction>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005070:	2300      	movs	r3, #0
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b08a      	sub	sp, #40	@ 0x28
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005088:	2301      	movs	r3, #1
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800508c:	f7fd fd46 	bl	8002b1c <HAL_GetTick>
 8005090:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005098:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80050a0:	887b      	ldrh	r3, [r7, #2]
 80050a2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d00c      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x4a>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050b0:	d106      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d102      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x46>
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d001      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
 80050c2:	e17f      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_SPI_TransmitReceive+0x5c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_SPI_TransmitReceive+0x5c>
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e174      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_SPI_TransmitReceive+0x6e>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e16d      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x34a>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d003      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2205      	movs	r2, #5
 8005100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	887a      	ldrh	r2, [r7, #2]
 800511a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	887a      	ldrh	r2, [r7, #2]
 8005126:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	887a      	ldrh	r2, [r7, #2]
 800512c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	d007      	beq.n	8005158 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005160:	d17e      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_SPI_TransmitReceive+0xf6>
 800516a:	8afb      	ldrh	r3, [r7, #22]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d16c      	bne.n	800524a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	881a      	ldrh	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	1c9a      	adds	r2, r3, #2
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005194:	e059      	b.n	800524a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d11b      	bne.n	80051dc <HAL_SPI_TransmitReceive+0x162>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d016      	beq.n	80051dc <HAL_SPI_TransmitReceive+0x162>
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d113      	bne.n	80051dc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b8:	881a      	ldrh	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c4:	1c9a      	adds	r2, r3, #2
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d119      	bne.n	800521e <HAL_SPI_TransmitReceive+0x1a4>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d014      	beq.n	800521e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fe:	b292      	uxth	r2, r2
 8005200:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005206:	1c9a      	adds	r2, r3, #2
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800521a:	2301      	movs	r3, #1
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800521e:	f7fd fc7d 	bl	8002b1c <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522a:	429a      	cmp	r2, r3
 800522c:	d80d      	bhi.n	800524a <HAL_SPI_TransmitReceive+0x1d0>
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d009      	beq.n	800524a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e0bc      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1a0      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x11c>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d19b      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x11c>
 800525e:	e082      	b.n	8005366 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_SPI_TransmitReceive+0x1f4>
 8005268:	8afb      	ldrh	r3, [r7, #22]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d171      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005294:	e05d      	b.n	8005352 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d11c      	bne.n	80052de <HAL_SPI_TransmitReceive+0x264>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d017      	beq.n	80052de <HAL_SPI_TransmitReceive+0x264>
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d114      	bne.n	80052de <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d119      	bne.n	8005320 <HAL_SPI_TransmitReceive+0x2a6>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d014      	beq.n	8005320 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800531c:	2301      	movs	r3, #1
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005320:	f7fd fbfc 	bl	8002b1c <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532c:	429a      	cmp	r2, r3
 800532e:	d803      	bhi.n	8005338 <HAL_SPI_TransmitReceive+0x2be>
 8005330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	d102      	bne.n	800533e <HAL_SPI_TransmitReceive+0x2c4>
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e038      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d19c      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x21c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d197      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005366:	6a3a      	ldr	r2, [r7, #32]
 8005368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f916 	bl	800559c <SPI_EndRxTxTransaction>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e01d      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005390:	2300      	movs	r3, #0
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80053c2:	2300      	movs	r3, #0
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3728      	adds	r7, #40	@ 0x28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053da:	b2db      	uxtb	r3, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
	...

080053e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053f8:	f7fd fb90 	bl	8002b1c <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	4413      	add	r3, r2
 8005406:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005408:	f7fd fb88 	bl	8002b1c <HAL_GetTick>
 800540c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800540e:	4b39      	ldr	r3, [pc, #228]	@ (80054f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	015b      	lsls	r3, r3, #5
 8005414:	0d1b      	lsrs	r3, r3, #20
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541e:	e054      	b.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d050      	beq.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005428:	f7fd fb78 	bl	8002b1c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	429a      	cmp	r2, r3
 8005436:	d902      	bls.n	800543e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d13d      	bne.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800544c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005456:	d111      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005460:	d004      	beq.n	800546c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546a:	d107      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800547a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005484:	d10f      	bne.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e017      	b.n	80054ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d19b      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000014 	.word	0x20000014

080054f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800550c:	d111      	bne.n	8005532 <SPI_EndRxTransaction+0x3a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005516:	d004      	beq.n	8005522 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005520:	d107      	bne.n	8005532 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005530:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800553a:	d117      	bne.n	800556c <SPI_EndRxTransaction+0x74>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005544:	d112      	bne.n	800556c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	2101      	movs	r1, #1
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff ff49 	bl	80053e8 <SPI_WaitFlagStateUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01a      	beq.n	8005592 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e013      	b.n	8005594 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2200      	movs	r2, #0
 8005574:	2180      	movs	r1, #128	@ 0x80
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff ff36 	bl	80053e8 <SPI_WaitFlagStateUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e000      	b.n	8005594 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2201      	movs	r2, #1
 80055b0:	2102      	movs	r1, #2
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff ff18 	bl	80053e8 <SPI_WaitFlagStateUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e013      	b.n	80055f6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2180      	movs	r1, #128	@ 0x80
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff ff05 	bl	80053e8 <SPI_WaitFlagStateUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e000      	b.n	80055f6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e041      	b.n	8005694 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fd f88d 	bl	8002744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f000 f947 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d001      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e03a      	b.n	800572a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <HAL_TIM_Base_Start_IT+0x98>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x58>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056de:	d009      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x58>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a14      	ldr	r2, [pc, #80]	@ (8005738 <HAL_TIM_Base_Start_IT+0x9c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x58>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a13      	ldr	r2, [pc, #76]	@ (800573c <HAL_TIM_Base_Start_IT+0xa0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d111      	bne.n	8005718 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b06      	cmp	r3, #6
 8005704:	d010      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005716:	e007      	b.n	8005728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800

08005740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIM_ConfigClockSource+0x1c>
 8005758:	2302      	movs	r3, #2
 800575a:	e0b4      	b.n	80058c6 <HAL_TIM_ConfigClockSource+0x186>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800577a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005794:	d03e      	beq.n	8005814 <HAL_TIM_ConfigClockSource+0xd4>
 8005796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800579a:	f200 8087 	bhi.w	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a2:	f000 8086 	beq.w	80058b2 <HAL_TIM_ConfigClockSource+0x172>
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057aa:	d87f      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b70      	cmp	r3, #112	@ 0x70
 80057ae:	d01a      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0xa6>
 80057b0:	2b70      	cmp	r3, #112	@ 0x70
 80057b2:	d87b      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057b4:	2b60      	cmp	r3, #96	@ 0x60
 80057b6:	d050      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x11a>
 80057b8:	2b60      	cmp	r3, #96	@ 0x60
 80057ba:	d877      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b50      	cmp	r3, #80	@ 0x50
 80057be:	d03c      	beq.n	800583a <HAL_TIM_ConfigClockSource+0xfa>
 80057c0:	2b50      	cmp	r3, #80	@ 0x50
 80057c2:	d873      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b40      	cmp	r3, #64	@ 0x40
 80057c6:	d058      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x13a>
 80057c8:	2b40      	cmp	r3, #64	@ 0x40
 80057ca:	d86f      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b30      	cmp	r3, #48	@ 0x30
 80057ce:	d064      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x15a>
 80057d0:	2b30      	cmp	r3, #48	@ 0x30
 80057d2:	d86b      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d060      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x15a>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d867      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d05c      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x15a>
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d05a      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	e062      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057f6:	f000 f950 	bl	8005a9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	609a      	str	r2, [r3, #8]
      break;
 8005812:	e04f      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005824:	f000 f939 	bl	8005a9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005836:	609a      	str	r2, [r3, #8]
      break;
 8005838:	e03c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	461a      	mov	r2, r3
 8005848:	f000 f8b0 	bl	80059ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2150      	movs	r1, #80	@ 0x50
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f907 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 8005858:	e02c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005866:	461a      	mov	r2, r3
 8005868:	f000 f8ce 	bl	8005a08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2160      	movs	r1, #96	@ 0x60
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f8f7 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 8005878:	e01c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005886:	461a      	mov	r2, r3
 8005888:	f000 f890 	bl	80059ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2140      	movs	r1, #64	@ 0x40
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f8e7 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 8005898:	e00c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f000 f8de 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80058aa:	e003      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
      break;
 80058b0:	e000      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a2f      	ldr	r2, [pc, #188]	@ (80059a0 <TIM_Base_SetConfig+0xd0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_Base_SetConfig+0x30>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ee:	d007      	beq.n	8005900 <TIM_Base_SetConfig+0x30>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <TIM_Base_SetConfig+0xd4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0x30>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <TIM_Base_SetConfig+0xd8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d108      	bne.n	8005912 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a22      	ldr	r2, [pc, #136]	@ (80059a0 <TIM_Base_SetConfig+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00b      	beq.n	8005932 <TIM_Base_SetConfig+0x62>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005920:	d007      	beq.n	8005932 <TIM_Base_SetConfig+0x62>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1f      	ldr	r2, [pc, #124]	@ (80059a4 <TIM_Base_SetConfig+0xd4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d003      	beq.n	8005932 <TIM_Base_SetConfig+0x62>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1e      	ldr	r2, [pc, #120]	@ (80059a8 <TIM_Base_SetConfig+0xd8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d108      	bne.n	8005944 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a0d      	ldr	r2, [pc, #52]	@ (80059a0 <TIM_Base_SetConfig+0xd0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d103      	bne.n	8005978 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f023 0201 	bic.w	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	611a      	str	r2, [r3, #16]
  }
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800

080059ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 030a 	bic.w	r3, r3, #10
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0210 	bic.w	r2, r3, #16
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	031b      	lsls	r3, r3, #12
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f043 0307 	orr.w	r3, r3, #7
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr

08005a9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b087      	sub	sp, #28
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	021a      	lsls	r2, r3, #8
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	609a      	str	r2, [r3, #8]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e046      	b.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a16      	ldr	r2, [pc, #88]	@ (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3c:	d009      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a12      	ldr	r2, [pc, #72]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a10      	ldr	r2, [pc, #64]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10c      	bne.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40000400 	.word	0x40000400
 8005b90:	40000800 	.word	0x40000800

08005b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e042      	b.n	8005c2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fc fdde 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2224      	movs	r2, #36	@ 0x24
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fdb7 	bl	800674c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	@ 0x28
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d175      	bne.n	8005d40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_UART_Transmit+0x2c>
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e06e      	b.n	8005d42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2221      	movs	r2, #33	@ 0x21
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c72:	f7fc ff53 	bl	8002b1c <HAL_GetTick>
 8005c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	88fa      	ldrh	r2, [r7, #6]
 8005c82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8c:	d108      	bne.n	8005ca0 <HAL_UART_Transmit+0x6c>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e003      	b.n	8005ca8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ca8:	e02e      	b.n	8005d08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2180      	movs	r1, #128	@ 0x80
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fb1c 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e03a      	b.n	8005d42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10b      	bne.n	8005cea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	e007      	b.n	8005cfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1cb      	bne.n	8005caa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2140      	movs	r1, #64	@ 0x40
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fae8 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e006      	b.n	8005d42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	4613      	mov	r3, r2
 8005d56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d112      	bne.n	8005d8a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_UART_Receive_IT+0x26>
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e00b      	b.n	8005d8c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fb0f 	bl	80063a4 <UART_Start_Receive_IT>
 8005d86:	4603      	mov	r3, r0
 8005d88:	e000      	b.n	8005d8c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d8a:	2302      	movs	r3, #2
  }
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b0ba      	sub	sp, #232	@ 0xe8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_UART_IRQHandler+0x66>
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fbec 	bl	80065d0 <UART_Receive_IT>
      return;
 8005df8:	e25b      	b.n	80062b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80de 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x22c>
 8005e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80d1 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_UART_IRQHandler+0xae>
 8005e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3a:	f043 0201 	orr.w	r2, r3, #1
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00b      	beq.n	8005e66 <HAL_UART_IRQHandler+0xd2>
 8005e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	f043 0202 	orr.w	r2, r3, #2
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <HAL_UART_IRQHandler+0xf6>
 8005e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d011      	beq.n	8005eba <HAL_UART_IRQHandler+0x126>
 8005e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	f043 0208 	orr.w	r2, r3, #8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 81f2 	beq.w	80062a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x14e>
 8005ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fb77 	bl	80065d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <HAL_UART_IRQHandler+0x17a>
 8005f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d04f      	beq.n	8005fae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa81 	bl	8006416 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d041      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3314      	adds	r3, #20
 8005f28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1d9      	bne.n	8005f22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d013      	beq.n	8005f9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8006174 <HAL_UART_IRQHandler+0x3e0>)
 8005f7c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fc ff40 	bl	8002e08 <HAL_DMA_Abort_IT>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d016      	beq.n	8005fbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	e00e      	b.n	8005fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f993 	bl	80062ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	e00a      	b.n	8005fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f98f 	bl	80062ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	e006      	b.n	8005fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f98b 	bl	80062ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005fba:	e175      	b.n	80062a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	bf00      	nop
    return;
 8005fbe:	e173      	b.n	80062a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	f040 814f 	bne.w	8006268 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8148 	beq.w	8006268 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 8141 	beq.w	8006268 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80b6 	beq.w	8006178 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8145 	beq.w	80062ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800602a:	429a      	cmp	r2, r3
 800602c:	f080 813e 	bcs.w	80062ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006036:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b20      	cmp	r3, #32
 8006040:	f000 8088 	beq.w	8006154 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800605a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800605e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006062:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	330c      	adds	r3, #12
 800606c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006070:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006074:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800607c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1d9      	bne.n	8006044 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060b4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e1      	bne.n	8006090 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e3      	bne.n	80060cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006124:	f023 0310 	bic.w	r3, r3, #16
 8006128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006136:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006138:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800613c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e3      	bne.n	8006112 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc fe1f 	bl	8002d92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006162:	b29b      	uxth	r3, r3
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	b29b      	uxth	r3, r3
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8b6 	bl	80062dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006170:	e09c      	b.n	80062ac <HAL_UART_IRQHandler+0x518>
 8006172:	bf00      	nop
 8006174:	080064db 	.word	0x080064db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006180:	b29b      	uxth	r3, r3
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 808e 	beq.w	80062b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8089 	beq.w	80062b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	330c      	adds	r3, #12
 80061a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80061c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80061c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e3      	bne.n	800619e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	623b      	str	r3, [r7, #32]
   return(result);
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3314      	adds	r3, #20
 80061f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80061fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e3      	bne.n	80061d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	60fb      	str	r3, [r7, #12]
   return(result);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0310 	bic.w	r3, r3, #16
 8006232:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006240:	61fa      	str	r2, [r7, #28]
 8006242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	69b9      	ldr	r1, [r7, #24]
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	617b      	str	r3, [r7, #20]
   return(result);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e3      	bne.n	800621c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800625a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f83b 	bl	80062dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006266:	e023      	b.n	80062b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800626c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <HAL_UART_IRQHandler+0x4f4>
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f93e 	bl	8006502 <UART_Transmit_IT>
    return;
 8006286:	e014      	b.n	80062b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <HAL_UART_IRQHandler+0x51e>
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f97d 	bl	80065a0 <UART_EndTransmit_IT>
    return;
 80062a6:	e004      	b.n	80062b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80062a8:	bf00      	nop
 80062aa:	e002      	b.n	80062b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80062ac:	bf00      	nop
 80062ae:	e000      	b.n	80062b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80062b0:	bf00      	nop
  }
}
 80062b2:	37e8      	adds	r7, #232	@ 0xe8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr

080062f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4613      	mov	r3, r2
 8006300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006302:	e03b      	b.n	800637c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d037      	beq.n	800637c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630c:	f7fc fc06 	bl	8002b1c <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	429a      	cmp	r2, r3
 800631a:	d302      	bcc.n	8006322 <UART_WaitOnFlagUntilTimeout+0x30>
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e03a      	b.n	800639c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d023      	beq.n	800637c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b80      	cmp	r3, #128	@ 0x80
 8006338:	d020      	beq.n	800637c <UART_WaitOnFlagUntilTimeout+0x8a>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b40      	cmp	r3, #64	@ 0x40
 800633e:	d01d      	beq.n	800637c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b08      	cmp	r3, #8
 800634c:	d116      	bne.n	800637c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f856 	bl	8006416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2208      	movs	r2, #8
 800636e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e00f      	b.n	800639c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4013      	ands	r3, r2
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	429a      	cmp	r2, r3
 8006398:	d0b4      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2222      	movs	r2, #34	@ 0x22
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0201 	orr.w	r2, r2, #1
 80063f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0220 	orr.w	r2, r2, #32
 8006408:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006416:	b480      	push	{r7}
 8006418:	b095      	sub	sp, #84	@ 0x54
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800643e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006444:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e5      	bne.n	800641e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3314      	adds	r3, #20
 8006458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	61fb      	str	r3, [r7, #28]
   return(result);
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f023 0301 	bic.w	r3, r3, #1
 8006468:	64bb      	str	r3, [r7, #72]	@ 0x48
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3314      	adds	r3, #20
 8006470:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006474:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e5      	bne.n	8006452 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	2b01      	cmp	r3, #1
 800648c:	d119      	bne.n	80064c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	60bb      	str	r3, [r7, #8]
   return(result);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f023 0310 	bic.w	r3, r3, #16
 80064a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	330c      	adds	r3, #12
 80064ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064ae:	61ba      	str	r2, [r7, #24]
 80064b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6979      	ldr	r1, [r7, #20]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	613b      	str	r3, [r7, #16]
   return(result);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e5      	bne.n	800648e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80064d0:	bf00      	nop
 80064d2:	3754      	adds	r7, #84	@ 0x54
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7ff fee8 	bl	80062ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b21      	cmp	r3, #33	@ 0x21
 8006514:	d13e      	bne.n	8006594 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651e:	d114      	bne.n	800654a <UART_Transmit_IT+0x48>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d110      	bne.n	800654a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800653c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	1c9a      	adds	r2, r3, #2
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]
 8006548:	e008      	b.n	800655c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	1c59      	adds	r1, r3, #1
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6211      	str	r1, [r2, #32]
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b01      	subs	r3, #1
 8006564:	b29b      	uxth	r3, r3
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4619      	mov	r1, r3
 800656a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10f      	bne.n	8006590 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800657e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800658e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e000      	b.n	8006596 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
  }
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr

080065a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff fe79 	bl	80062b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08c      	sub	sp, #48	@ 0x30
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b22      	cmp	r3, #34	@ 0x22
 80065e2:	f040 80ae 	bne.w	8006742 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ee:	d117      	bne.n	8006620 <UART_Receive_IT+0x50>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d113      	bne.n	8006620 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660e:	b29a      	uxth	r2, r3
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	1c9a      	adds	r2, r3, #2
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	629a      	str	r2, [r3, #40]	@ 0x28
 800661e:	e026      	b.n	800666e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006632:	d007      	beq.n	8006644 <UART_Receive_IT+0x74>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <UART_Receive_IT+0x82>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	e008      	b.n	8006664 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800665e:	b2da      	uxtb	r2, r3
 8006660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006662:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4619      	mov	r1, r3
 800667c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800667e:	2b00      	cmp	r3, #0
 8006680:	d15d      	bne.n	800673e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0220 	bic.w	r2, r2, #32
 8006690:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0201 	bic.w	r2, r2, #1
 80066b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d135      	bne.n	8006734 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	613b      	str	r3, [r7, #16]
   return(result);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f023 0310 	bic.w	r3, r3, #16
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ee:	623a      	str	r2, [r7, #32]
 80066f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	69f9      	ldr	r1, [r7, #28]
 80066f4:	6a3a      	ldr	r2, [r7, #32]
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0310 	and.w	r3, r3, #16
 800670c:	2b10      	cmp	r3, #16
 800670e:	d10a      	bne.n	8006726 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fdd5 	bl	80062dc <HAL_UARTEx_RxEventCallback>
 8006732:	e002      	b.n	800673a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fb fae3 	bl	8001d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	e002      	b.n	8006744 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006742:	2302      	movs	r3, #2
  }
}
 8006744:	4618      	mov	r0, r3
 8006746:	3730      	adds	r7, #48	@ 0x30
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006786:	f023 030c 	bic.w	r3, r3, #12
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	430b      	orrs	r3, r1
 8006792:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006860 <UART_SetConfig+0x114>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d103      	bne.n	80067bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7fe f94e 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	e002      	b.n	80067c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067bc:	f7fe f936 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 80067c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009a      	lsls	r2, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	4a22      	ldr	r2, [pc, #136]	@ (8006864 <UART_SetConfig+0x118>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	0119      	lsls	r1, r3, #4
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009a      	lsls	r2, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006864 <UART_SetConfig+0x118>)
 80067fa:	fba3 0302 	umull	r0, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	2064      	movs	r0, #100	@ 0x64
 8006802:	fb00 f303 	mul.w	r3, r0, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	3332      	adds	r3, #50	@ 0x32
 800680c:	4a15      	ldr	r2, [pc, #84]	@ (8006864 <UART_SetConfig+0x118>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006818:	4419      	add	r1, r3
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009a      	lsls	r2, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006830:	4b0c      	ldr	r3, [pc, #48]	@ (8006864 <UART_SetConfig+0x118>)
 8006832:	fba3 0302 	umull	r0, r3, r3, r2
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	2064      	movs	r0, #100	@ 0x64
 800683a:	fb00 f303 	mul.w	r3, r0, r3
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	3332      	adds	r3, #50	@ 0x32
 8006844:	4a07      	ldr	r2, [pc, #28]	@ (8006864 <UART_SetConfig+0x118>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	f003 020f 	and.w	r2, r3, #15
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	440a      	add	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40013800 	.word	0x40013800
 8006864:	51eb851f 	.word	0x51eb851f

08006868 <atof>:
 8006868:	2100      	movs	r1, #0
 800686a:	f000 bdfd 	b.w	8007468 <strtod>

0800686e <atoi>:
 800686e:	220a      	movs	r2, #10
 8006870:	2100      	movs	r1, #0
 8006872:	f000 be7f 	b.w	8007574 <strtol>

08006876 <sulp>:
 8006876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687a:	460f      	mov	r7, r1
 800687c:	4690      	mov	r8, r2
 800687e:	f002 f87d 	bl	800897c <__ulp>
 8006882:	4604      	mov	r4, r0
 8006884:	460d      	mov	r5, r1
 8006886:	f1b8 0f00 	cmp.w	r8, #0
 800688a:	d011      	beq.n	80068b0 <sulp+0x3a>
 800688c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006890:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006894:	2b00      	cmp	r3, #0
 8006896:	dd0b      	ble.n	80068b0 <sulp+0x3a>
 8006898:	2400      	movs	r4, #0
 800689a:	051b      	lsls	r3, r3, #20
 800689c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80068a0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80068a4:	4622      	mov	r2, r4
 80068a6:	462b      	mov	r3, r5
 80068a8:	f7f9 feca 	bl	8000640 <__aeabi_dmul>
 80068ac:	4604      	mov	r4, r0
 80068ae:	460d      	mov	r5, r1
 80068b0:	4620      	mov	r0, r4
 80068b2:	4629      	mov	r1, r5
 80068b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068b8 <_strtod_l>:
 80068b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068bc:	b09f      	sub	sp, #124	@ 0x7c
 80068be:	9217      	str	r2, [sp, #92]	@ 0x5c
 80068c0:	2200      	movs	r2, #0
 80068c2:	460c      	mov	r4, r1
 80068c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80068c6:	f04f 0a00 	mov.w	sl, #0
 80068ca:	f04f 0b00 	mov.w	fp, #0
 80068ce:	460a      	mov	r2, r1
 80068d0:	9005      	str	r0, [sp, #20]
 80068d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068d4:	7811      	ldrb	r1, [r2, #0]
 80068d6:	292b      	cmp	r1, #43	@ 0x2b
 80068d8:	d048      	beq.n	800696c <_strtod_l+0xb4>
 80068da:	d836      	bhi.n	800694a <_strtod_l+0x92>
 80068dc:	290d      	cmp	r1, #13
 80068de:	d830      	bhi.n	8006942 <_strtod_l+0x8a>
 80068e0:	2908      	cmp	r1, #8
 80068e2:	d830      	bhi.n	8006946 <_strtod_l+0x8e>
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d039      	beq.n	800695c <_strtod_l+0xa4>
 80068e8:	2200      	movs	r2, #0
 80068ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80068ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80068ee:	782a      	ldrb	r2, [r5, #0]
 80068f0:	2a30      	cmp	r2, #48	@ 0x30
 80068f2:	f040 80b0 	bne.w	8006a56 <_strtod_l+0x19e>
 80068f6:	786a      	ldrb	r2, [r5, #1]
 80068f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068fc:	2a58      	cmp	r2, #88	@ 0x58
 80068fe:	d16c      	bne.n	80069da <_strtod_l+0x122>
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006904:	4a8f      	ldr	r2, [pc, #572]	@ (8006b44 <_strtod_l+0x28c>)
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	ab1a      	add	r3, sp, #104	@ 0x68
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	9805      	ldr	r0, [sp, #20]
 800690e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006910:	a919      	add	r1, sp, #100	@ 0x64
 8006912:	f001 f92d 	bl	8007b70 <__gethex>
 8006916:	f010 060f 	ands.w	r6, r0, #15
 800691a:	4604      	mov	r4, r0
 800691c:	d005      	beq.n	800692a <_strtod_l+0x72>
 800691e:	2e06      	cmp	r6, #6
 8006920:	d126      	bne.n	8006970 <_strtod_l+0xb8>
 8006922:	2300      	movs	r3, #0
 8006924:	3501      	adds	r5, #1
 8006926:	9519      	str	r5, [sp, #100]	@ 0x64
 8006928:	930e      	str	r3, [sp, #56]	@ 0x38
 800692a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 8582 	bne.w	8007436 <_strtod_l+0xb7e>
 8006932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006934:	b1bb      	cbz	r3, 8006966 <_strtod_l+0xae>
 8006936:	4650      	mov	r0, sl
 8006938:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800693c:	b01f      	add	sp, #124	@ 0x7c
 800693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006942:	2920      	cmp	r1, #32
 8006944:	d1d0      	bne.n	80068e8 <_strtod_l+0x30>
 8006946:	3201      	adds	r2, #1
 8006948:	e7c3      	b.n	80068d2 <_strtod_l+0x1a>
 800694a:	292d      	cmp	r1, #45	@ 0x2d
 800694c:	d1cc      	bne.n	80068e8 <_strtod_l+0x30>
 800694e:	2101      	movs	r1, #1
 8006950:	910e      	str	r1, [sp, #56]	@ 0x38
 8006952:	1c51      	adds	r1, r2, #1
 8006954:	9119      	str	r1, [sp, #100]	@ 0x64
 8006956:	7852      	ldrb	r2, [r2, #1]
 8006958:	2a00      	cmp	r2, #0
 800695a:	d1c7      	bne.n	80068ec <_strtod_l+0x34>
 800695c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800695e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006960:	2b00      	cmp	r3, #0
 8006962:	f040 8566 	bne.w	8007432 <_strtod_l+0xb7a>
 8006966:	4650      	mov	r0, sl
 8006968:	4659      	mov	r1, fp
 800696a:	e7e7      	b.n	800693c <_strtod_l+0x84>
 800696c:	2100      	movs	r1, #0
 800696e:	e7ef      	b.n	8006950 <_strtod_l+0x98>
 8006970:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006972:	b13a      	cbz	r2, 8006984 <_strtod_l+0xcc>
 8006974:	2135      	movs	r1, #53	@ 0x35
 8006976:	a81c      	add	r0, sp, #112	@ 0x70
 8006978:	f002 f8f0 	bl	8008b5c <__copybits>
 800697c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800697e:	9805      	ldr	r0, [sp, #20]
 8006980:	f001 fcd0 	bl	8008324 <_Bfree>
 8006984:	3e01      	subs	r6, #1
 8006986:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006988:	2e04      	cmp	r6, #4
 800698a:	d806      	bhi.n	800699a <_strtod_l+0xe2>
 800698c:	e8df f006 	tbb	[pc, r6]
 8006990:	201d0314 	.word	0x201d0314
 8006994:	14          	.byte	0x14
 8006995:	00          	.byte	0x00
 8006996:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800699a:	05e1      	lsls	r1, r4, #23
 800699c:	bf48      	it	mi
 800699e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80069a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069a6:	0d1b      	lsrs	r3, r3, #20
 80069a8:	051b      	lsls	r3, r3, #20
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1bd      	bne.n	800692a <_strtod_l+0x72>
 80069ae:	f000 ffcf 	bl	8007950 <__errno>
 80069b2:	2322      	movs	r3, #34	@ 0x22
 80069b4:	6003      	str	r3, [r0, #0]
 80069b6:	e7b8      	b.n	800692a <_strtod_l+0x72>
 80069b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80069bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80069c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069c4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069c8:	e7e7      	b.n	800699a <_strtod_l+0xe2>
 80069ca:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006b48 <_strtod_l+0x290>
 80069ce:	e7e4      	b.n	800699a <_strtod_l+0xe2>
 80069d0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80069d4:	f04f 3aff 	mov.w	sl, #4294967295
 80069d8:	e7df      	b.n	800699a <_strtod_l+0xe2>
 80069da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	9219      	str	r2, [sp, #100]	@ 0x64
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b30      	cmp	r3, #48	@ 0x30
 80069e4:	d0f9      	beq.n	80069da <_strtod_l+0x122>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d09f      	beq.n	800692a <_strtod_l+0x72>
 80069ea:	2301      	movs	r3, #1
 80069ec:	2700      	movs	r7, #0
 80069ee:	220a      	movs	r2, #10
 80069f0:	46b9      	mov	r9, r7
 80069f2:	9308      	str	r3, [sp, #32]
 80069f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069f6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80069f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80069fa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80069fc:	7805      	ldrb	r5, [r0, #0]
 80069fe:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006a02:	b2d9      	uxtb	r1, r3
 8006a04:	2909      	cmp	r1, #9
 8006a06:	d928      	bls.n	8006a5a <_strtod_l+0x1a2>
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4950      	ldr	r1, [pc, #320]	@ (8006b4c <_strtod_l+0x294>)
 8006a0c:	f000 feeb 	bl	80077e6 <strncmp>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d032      	beq.n	8006a7a <_strtod_l+0x1c2>
 8006a14:	2000      	movs	r0, #0
 8006a16:	462a      	mov	r2, r5
 8006a18:	4603      	mov	r3, r0
 8006a1a:	464d      	mov	r5, r9
 8006a1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a1e:	2a65      	cmp	r2, #101	@ 0x65
 8006a20:	d001      	beq.n	8006a26 <_strtod_l+0x16e>
 8006a22:	2a45      	cmp	r2, #69	@ 0x45
 8006a24:	d114      	bne.n	8006a50 <_strtod_l+0x198>
 8006a26:	b91d      	cbnz	r5, 8006a30 <_strtod_l+0x178>
 8006a28:	9a08      	ldr	r2, [sp, #32]
 8006a2a:	4302      	orrs	r2, r0
 8006a2c:	d096      	beq.n	800695c <_strtod_l+0xa4>
 8006a2e:	2500      	movs	r5, #0
 8006a30:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006a32:	1c62      	adds	r2, r4, #1
 8006a34:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a36:	7862      	ldrb	r2, [r4, #1]
 8006a38:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a3a:	d07a      	beq.n	8006b32 <_strtod_l+0x27a>
 8006a3c:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a3e:	d07e      	beq.n	8006b3e <_strtod_l+0x286>
 8006a40:	f04f 0c00 	mov.w	ip, #0
 8006a44:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a48:	2909      	cmp	r1, #9
 8006a4a:	f240 8085 	bls.w	8006b58 <_strtod_l+0x2a0>
 8006a4e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a50:	f04f 0800 	mov.w	r8, #0
 8006a54:	e0a5      	b.n	8006ba2 <_strtod_l+0x2ea>
 8006a56:	2300      	movs	r3, #0
 8006a58:	e7c8      	b.n	80069ec <_strtod_l+0x134>
 8006a5a:	f1b9 0f08 	cmp.w	r9, #8
 8006a5e:	bfd8      	it	le
 8006a60:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006a62:	f100 0001 	add.w	r0, r0, #1
 8006a66:	bfd6      	itet	le
 8006a68:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a6c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006a70:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006a72:	f109 0901 	add.w	r9, r9, #1
 8006a76:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a78:	e7bf      	b.n	80069fa <_strtod_l+0x142>
 8006a7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a80:	785a      	ldrb	r2, [r3, #1]
 8006a82:	f1b9 0f00 	cmp.w	r9, #0
 8006a86:	d03b      	beq.n	8006b00 <_strtod_l+0x248>
 8006a88:	464d      	mov	r5, r9
 8006a8a:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a8c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006a90:	2b09      	cmp	r3, #9
 8006a92:	d912      	bls.n	8006aba <_strtod_l+0x202>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e7c2      	b.n	8006a1e <_strtod_l+0x166>
 8006a98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006aa0:	785a      	ldrb	r2, [r3, #1]
 8006aa2:	2a30      	cmp	r2, #48	@ 0x30
 8006aa4:	d0f8      	beq.n	8006a98 <_strtod_l+0x1e0>
 8006aa6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	f200 84c8 	bhi.w	8007440 <_strtod_l+0xb88>
 8006ab0:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ab8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006aba:	3a30      	subs	r2, #48	@ 0x30
 8006abc:	f100 0301 	add.w	r3, r0, #1
 8006ac0:	d018      	beq.n	8006af4 <_strtod_l+0x23c>
 8006ac2:	462e      	mov	r6, r5
 8006ac4:	f04f 0e0a 	mov.w	lr, #10
 8006ac8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006aca:	4419      	add	r1, r3
 8006acc:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ace:	1c71      	adds	r1, r6, #1
 8006ad0:	eba1 0c05 	sub.w	ip, r1, r5
 8006ad4:	4563      	cmp	r3, ip
 8006ad6:	dc15      	bgt.n	8006b04 <_strtod_l+0x24c>
 8006ad8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006adc:	182b      	adds	r3, r5, r0
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	f105 0501 	add.w	r5, r5, #1
 8006ae4:	4405      	add	r5, r0
 8006ae6:	dc1a      	bgt.n	8006b1e <_strtod_l+0x266>
 8006ae8:	230a      	movs	r3, #10
 8006aea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006aec:	fb03 2301 	mla	r3, r3, r1, r2
 8006af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006af2:	2300      	movs	r3, #0
 8006af4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006af6:	4618      	mov	r0, r3
 8006af8:	1c51      	adds	r1, r2, #1
 8006afa:	9119      	str	r1, [sp, #100]	@ 0x64
 8006afc:	7852      	ldrb	r2, [r2, #1]
 8006afe:	e7c5      	b.n	8006a8c <_strtod_l+0x1d4>
 8006b00:	4648      	mov	r0, r9
 8006b02:	e7ce      	b.n	8006aa2 <_strtod_l+0x1ea>
 8006b04:	2e08      	cmp	r6, #8
 8006b06:	dc05      	bgt.n	8006b14 <_strtod_l+0x25c>
 8006b08:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006b0a:	fb0e f606 	mul.w	r6, lr, r6
 8006b0e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006b10:	460e      	mov	r6, r1
 8006b12:	e7dc      	b.n	8006ace <_strtod_l+0x216>
 8006b14:	2910      	cmp	r1, #16
 8006b16:	bfd8      	it	le
 8006b18:	fb0e f707 	mulle.w	r7, lr, r7
 8006b1c:	e7f8      	b.n	8006b10 <_strtod_l+0x258>
 8006b1e:	2b0f      	cmp	r3, #15
 8006b20:	bfdc      	itt	le
 8006b22:	230a      	movle	r3, #10
 8006b24:	fb03 2707 	mlale	r7, r3, r7, r2
 8006b28:	e7e3      	b.n	8006af2 <_strtod_l+0x23a>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e77a      	b.n	8006a28 <_strtod_l+0x170>
 8006b32:	f04f 0c00 	mov.w	ip, #0
 8006b36:	1ca2      	adds	r2, r4, #2
 8006b38:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b3a:	78a2      	ldrb	r2, [r4, #2]
 8006b3c:	e782      	b.n	8006a44 <_strtod_l+0x18c>
 8006b3e:	f04f 0c01 	mov.w	ip, #1
 8006b42:	e7f8      	b.n	8006b36 <_strtod_l+0x27e>
 8006b44:	08009cd8 	.word	0x08009cd8
 8006b48:	7ff00000 	.word	0x7ff00000
 8006b4c:	08009b02 	.word	0x08009b02
 8006b50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b52:	1c51      	adds	r1, r2, #1
 8006b54:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b56:	7852      	ldrb	r2, [r2, #1]
 8006b58:	2a30      	cmp	r2, #48	@ 0x30
 8006b5a:	d0f9      	beq.n	8006b50 <_strtod_l+0x298>
 8006b5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006b60:	2908      	cmp	r1, #8
 8006b62:	f63f af75 	bhi.w	8006a50 <_strtod_l+0x198>
 8006b66:	f04f 080a 	mov.w	r8, #10
 8006b6a:	3a30      	subs	r2, #48	@ 0x30
 8006b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006b72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b74:	1c56      	adds	r6, r2, #1
 8006b76:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b78:	7852      	ldrb	r2, [r2, #1]
 8006b7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b7e:	f1be 0f09 	cmp.w	lr, #9
 8006b82:	d939      	bls.n	8006bf8 <_strtod_l+0x340>
 8006b84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b86:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006b8a:	1a76      	subs	r6, r6, r1
 8006b8c:	2e08      	cmp	r6, #8
 8006b8e:	dc03      	bgt.n	8006b98 <_strtod_l+0x2e0>
 8006b90:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b92:	4588      	cmp	r8, r1
 8006b94:	bfa8      	it	ge
 8006b96:	4688      	movge	r8, r1
 8006b98:	f1bc 0f00 	cmp.w	ip, #0
 8006b9c:	d001      	beq.n	8006ba2 <_strtod_l+0x2ea>
 8006b9e:	f1c8 0800 	rsb	r8, r8, #0
 8006ba2:	2d00      	cmp	r5, #0
 8006ba4:	d14e      	bne.n	8006c44 <_strtod_l+0x38c>
 8006ba6:	9908      	ldr	r1, [sp, #32]
 8006ba8:	4308      	orrs	r0, r1
 8006baa:	f47f aebe 	bne.w	800692a <_strtod_l+0x72>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f47f aed4 	bne.w	800695c <_strtod_l+0xa4>
 8006bb4:	2a69      	cmp	r2, #105	@ 0x69
 8006bb6:	d028      	beq.n	8006c0a <_strtod_l+0x352>
 8006bb8:	dc25      	bgt.n	8006c06 <_strtod_l+0x34e>
 8006bba:	2a49      	cmp	r2, #73	@ 0x49
 8006bbc:	d025      	beq.n	8006c0a <_strtod_l+0x352>
 8006bbe:	2a4e      	cmp	r2, #78	@ 0x4e
 8006bc0:	f47f aecc 	bne.w	800695c <_strtod_l+0xa4>
 8006bc4:	4999      	ldr	r1, [pc, #612]	@ (8006e2c <_strtod_l+0x574>)
 8006bc6:	a819      	add	r0, sp, #100	@ 0x64
 8006bc8:	f001 f9f4 	bl	8007fb4 <__match>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f43f aec5 	beq.w	800695c <_strtod_l+0xa4>
 8006bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b28      	cmp	r3, #40	@ 0x28
 8006bd8:	d12e      	bne.n	8006c38 <_strtod_l+0x380>
 8006bda:	4995      	ldr	r1, [pc, #596]	@ (8006e30 <_strtod_l+0x578>)
 8006bdc:	aa1c      	add	r2, sp, #112	@ 0x70
 8006bde:	a819      	add	r0, sp, #100	@ 0x64
 8006be0:	f001 f9fc 	bl	8007fdc <__hexnan>
 8006be4:	2805      	cmp	r0, #5
 8006be6:	d127      	bne.n	8006c38 <_strtod_l+0x380>
 8006be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006bea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006bee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006bf2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006bf6:	e698      	b.n	800692a <_strtod_l+0x72>
 8006bf8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bfa:	fb08 2101 	mla	r1, r8, r1, r2
 8006bfe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006c02:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c04:	e7b5      	b.n	8006b72 <_strtod_l+0x2ba>
 8006c06:	2a6e      	cmp	r2, #110	@ 0x6e
 8006c08:	e7da      	b.n	8006bc0 <_strtod_l+0x308>
 8006c0a:	498a      	ldr	r1, [pc, #552]	@ (8006e34 <_strtod_l+0x57c>)
 8006c0c:	a819      	add	r0, sp, #100	@ 0x64
 8006c0e:	f001 f9d1 	bl	8007fb4 <__match>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	f43f aea2 	beq.w	800695c <_strtod_l+0xa4>
 8006c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c1a:	4987      	ldr	r1, [pc, #540]	@ (8006e38 <_strtod_l+0x580>)
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	a819      	add	r0, sp, #100	@ 0x64
 8006c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c22:	f001 f9c7 	bl	8007fb4 <__match>
 8006c26:	b910      	cbnz	r0, 8006c2e <_strtod_l+0x376>
 8006c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c2e:	f04f 0a00 	mov.w	sl, #0
 8006c32:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006e3c <_strtod_l+0x584>
 8006c36:	e678      	b.n	800692a <_strtod_l+0x72>
 8006c38:	4881      	ldr	r0, [pc, #516]	@ (8006e40 <_strtod_l+0x588>)
 8006c3a:	f000 fec5 	bl	80079c8 <nan>
 8006c3e:	4682      	mov	sl, r0
 8006c40:	468b      	mov	fp, r1
 8006c42:	e672      	b.n	800692a <_strtod_l+0x72>
 8006c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c46:	f1b9 0f00 	cmp.w	r9, #0
 8006c4a:	bf08      	it	eq
 8006c4c:	46a9      	moveq	r9, r5
 8006c4e:	eba8 0303 	sub.w	r3, r8, r3
 8006c52:	2d10      	cmp	r5, #16
 8006c54:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006c56:	462c      	mov	r4, r5
 8006c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c5a:	bfa8      	it	ge
 8006c5c:	2410      	movge	r4, #16
 8006c5e:	f7f9 fc75 	bl	800054c <__aeabi_ui2d>
 8006c62:	2d09      	cmp	r5, #9
 8006c64:	4682      	mov	sl, r0
 8006c66:	468b      	mov	fp, r1
 8006c68:	dc11      	bgt.n	8006c8e <_strtod_l+0x3d6>
 8006c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f43f ae5c 	beq.w	800692a <_strtod_l+0x72>
 8006c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c74:	dd76      	ble.n	8006d64 <_strtod_l+0x4ac>
 8006c76:	2b16      	cmp	r3, #22
 8006c78:	dc5d      	bgt.n	8006d36 <_strtod_l+0x47e>
 8006c7a:	4972      	ldr	r1, [pc, #456]	@ (8006e44 <_strtod_l+0x58c>)
 8006c7c:	4652      	mov	r2, sl
 8006c7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c82:	465b      	mov	r3, fp
 8006c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c88:	f7f9 fcda 	bl	8000640 <__aeabi_dmul>
 8006c8c:	e7d7      	b.n	8006c3e <_strtod_l+0x386>
 8006c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e44 <_strtod_l+0x58c>)
 8006c90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006c98:	f7f9 fcd2 	bl	8000640 <__aeabi_dmul>
 8006c9c:	4682      	mov	sl, r0
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	468b      	mov	fp, r1
 8006ca2:	f7f9 fc53 	bl	800054c <__aeabi_ui2d>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4650      	mov	r0, sl
 8006cac:	4659      	mov	r1, fp
 8006cae:	f7f9 fb11 	bl	80002d4 <__adddf3>
 8006cb2:	2d0f      	cmp	r5, #15
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	468b      	mov	fp, r1
 8006cb8:	ddd7      	ble.n	8006c6a <_strtod_l+0x3b2>
 8006cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cbc:	1b2c      	subs	r4, r5, r4
 8006cbe:	441c      	add	r4, r3
 8006cc0:	2c00      	cmp	r4, #0
 8006cc2:	f340 8093 	ble.w	8006dec <_strtod_l+0x534>
 8006cc6:	f014 030f 	ands.w	r3, r4, #15
 8006cca:	d00a      	beq.n	8006ce2 <_strtod_l+0x42a>
 8006ccc:	495d      	ldr	r1, [pc, #372]	@ (8006e44 <_strtod_l+0x58c>)
 8006cce:	4652      	mov	r2, sl
 8006cd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd8:	465b      	mov	r3, fp
 8006cda:	f7f9 fcb1 	bl	8000640 <__aeabi_dmul>
 8006cde:	4682      	mov	sl, r0
 8006ce0:	468b      	mov	fp, r1
 8006ce2:	f034 040f 	bics.w	r4, r4, #15
 8006ce6:	d073      	beq.n	8006dd0 <_strtod_l+0x518>
 8006ce8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006cec:	dd49      	ble.n	8006d82 <_strtod_l+0x4ca>
 8006cee:	2400      	movs	r4, #0
 8006cf0:	46a0      	mov	r8, r4
 8006cf2:	46a1      	mov	r9, r4
 8006cf4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006cf6:	2322      	movs	r3, #34	@ 0x22
 8006cf8:	f04f 0a00 	mov.w	sl, #0
 8006cfc:	9a05      	ldr	r2, [sp, #20]
 8006cfe:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006e3c <_strtod_l+0x584>
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f43f ae0f 	beq.w	800692a <_strtod_l+0x72>
 8006d0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d0e:	9805      	ldr	r0, [sp, #20]
 8006d10:	f001 fb08 	bl	8008324 <_Bfree>
 8006d14:	4649      	mov	r1, r9
 8006d16:	9805      	ldr	r0, [sp, #20]
 8006d18:	f001 fb04 	bl	8008324 <_Bfree>
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	9805      	ldr	r0, [sp, #20]
 8006d20:	f001 fb00 	bl	8008324 <_Bfree>
 8006d24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	f001 fafc 	bl	8008324 <_Bfree>
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	9805      	ldr	r0, [sp, #20]
 8006d30:	f001 faf8 	bl	8008324 <_Bfree>
 8006d34:	e5f9      	b.n	800692a <_strtod_l+0x72>
 8006d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	dbbc      	blt.n	8006cba <_strtod_l+0x402>
 8006d40:	4c40      	ldr	r4, [pc, #256]	@ (8006e44 <_strtod_l+0x58c>)
 8006d42:	f1c5 050f 	rsb	r5, r5, #15
 8006d46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d50:	465b      	mov	r3, fp
 8006d52:	f7f9 fc75 	bl	8000640 <__aeabi_dmul>
 8006d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d58:	1b5d      	subs	r5, r3, r5
 8006d5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d62:	e791      	b.n	8006c88 <_strtod_l+0x3d0>
 8006d64:	3316      	adds	r3, #22
 8006d66:	dba8      	blt.n	8006cba <_strtod_l+0x402>
 8006d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	eba3 0808 	sub.w	r8, r3, r8
 8006d70:	4b34      	ldr	r3, [pc, #208]	@ (8006e44 <_strtod_l+0x58c>)
 8006d72:	4659      	mov	r1, fp
 8006d74:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d78:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d7c:	f7f9 fd8a 	bl	8000894 <__aeabi_ddiv>
 8006d80:	e75d      	b.n	8006c3e <_strtod_l+0x386>
 8006d82:	2300      	movs	r3, #0
 8006d84:	4650      	mov	r0, sl
 8006d86:	4659      	mov	r1, fp
 8006d88:	461e      	mov	r6, r3
 8006d8a:	4f2f      	ldr	r7, [pc, #188]	@ (8006e48 <_strtod_l+0x590>)
 8006d8c:	1124      	asrs	r4, r4, #4
 8006d8e:	2c01      	cmp	r4, #1
 8006d90:	dc21      	bgt.n	8006dd6 <_strtod_l+0x51e>
 8006d92:	b10b      	cbz	r3, 8006d98 <_strtod_l+0x4e0>
 8006d94:	4682      	mov	sl, r0
 8006d96:	468b      	mov	fp, r1
 8006d98:	492b      	ldr	r1, [pc, #172]	@ (8006e48 <_strtod_l+0x590>)
 8006d9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006d9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006da2:	4652      	mov	r2, sl
 8006da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006da8:	465b      	mov	r3, fp
 8006daa:	f7f9 fc49 	bl	8000640 <__aeabi_dmul>
 8006dae:	4b23      	ldr	r3, [pc, #140]	@ (8006e3c <_strtod_l+0x584>)
 8006db0:	460a      	mov	r2, r1
 8006db2:	400b      	ands	r3, r1
 8006db4:	4925      	ldr	r1, [pc, #148]	@ (8006e4c <_strtod_l+0x594>)
 8006db6:	4682      	mov	sl, r0
 8006db8:	428b      	cmp	r3, r1
 8006dba:	d898      	bhi.n	8006cee <_strtod_l+0x436>
 8006dbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	bf86      	itte	hi
 8006dc4:	f04f 3aff 	movhi.w	sl, #4294967295
 8006dc8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006e50 <_strtod_l+0x598>
 8006dcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9308      	str	r3, [sp, #32]
 8006dd4:	e076      	b.n	8006ec4 <_strtod_l+0x60c>
 8006dd6:	07e2      	lsls	r2, r4, #31
 8006dd8:	d504      	bpl.n	8006de4 <_strtod_l+0x52c>
 8006dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dde:	f7f9 fc2f 	bl	8000640 <__aeabi_dmul>
 8006de2:	2301      	movs	r3, #1
 8006de4:	3601      	adds	r6, #1
 8006de6:	1064      	asrs	r4, r4, #1
 8006de8:	3708      	adds	r7, #8
 8006dea:	e7d0      	b.n	8006d8e <_strtod_l+0x4d6>
 8006dec:	d0f0      	beq.n	8006dd0 <_strtod_l+0x518>
 8006dee:	4264      	negs	r4, r4
 8006df0:	f014 020f 	ands.w	r2, r4, #15
 8006df4:	d00a      	beq.n	8006e0c <_strtod_l+0x554>
 8006df6:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <_strtod_l+0x58c>)
 8006df8:	4650      	mov	r0, sl
 8006dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dfe:	4659      	mov	r1, fp
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f7f9 fd46 	bl	8000894 <__aeabi_ddiv>
 8006e08:	4682      	mov	sl, r0
 8006e0a:	468b      	mov	fp, r1
 8006e0c:	1124      	asrs	r4, r4, #4
 8006e0e:	d0df      	beq.n	8006dd0 <_strtod_l+0x518>
 8006e10:	2c1f      	cmp	r4, #31
 8006e12:	dd1f      	ble.n	8006e54 <_strtod_l+0x59c>
 8006e14:	2400      	movs	r4, #0
 8006e16:	46a0      	mov	r8, r4
 8006e18:	46a1      	mov	r9, r4
 8006e1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e1c:	2322      	movs	r3, #34	@ 0x22
 8006e1e:	9a05      	ldr	r2, [sp, #20]
 8006e20:	f04f 0a00 	mov.w	sl, #0
 8006e24:	f04f 0b00 	mov.w	fp, #0
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	e76b      	b.n	8006d04 <_strtod_l+0x44c>
 8006e2c:	08009b0d 	.word	0x08009b0d
 8006e30:	08009cc4 	.word	0x08009cc4
 8006e34:	08009b04 	.word	0x08009b04
 8006e38:	08009b07 	.word	0x08009b07
 8006e3c:	7ff00000 	.word	0x7ff00000
 8006e40:	08009bc4 	.word	0x08009bc4
 8006e44:	08009e50 	.word	0x08009e50
 8006e48:	08009e28 	.word	0x08009e28
 8006e4c:	7ca00000 	.word	0x7ca00000
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	f014 0310 	ands.w	r3, r4, #16
 8006e58:	bf18      	it	ne
 8006e5a:	236a      	movne	r3, #106	@ 0x6a
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	9308      	str	r3, [sp, #32]
 8006e60:	4659      	mov	r1, fp
 8006e62:	2300      	movs	r3, #0
 8006e64:	4e77      	ldr	r6, [pc, #476]	@ (8007044 <_strtod_l+0x78c>)
 8006e66:	07e7      	lsls	r7, r4, #31
 8006e68:	d504      	bpl.n	8006e74 <_strtod_l+0x5bc>
 8006e6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e6e:	f7f9 fbe7 	bl	8000640 <__aeabi_dmul>
 8006e72:	2301      	movs	r3, #1
 8006e74:	1064      	asrs	r4, r4, #1
 8006e76:	f106 0608 	add.w	r6, r6, #8
 8006e7a:	d1f4      	bne.n	8006e66 <_strtod_l+0x5ae>
 8006e7c:	b10b      	cbz	r3, 8006e82 <_strtod_l+0x5ca>
 8006e7e:	4682      	mov	sl, r0
 8006e80:	468b      	mov	fp, r1
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	b1b3      	cbz	r3, 8006eb4 <_strtod_l+0x5fc>
 8006e86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	4659      	mov	r1, fp
 8006e92:	dd0f      	ble.n	8006eb4 <_strtod_l+0x5fc>
 8006e94:	2b1f      	cmp	r3, #31
 8006e96:	dd58      	ble.n	8006f4a <_strtod_l+0x692>
 8006e98:	2b34      	cmp	r3, #52	@ 0x34
 8006e9a:	bfd8      	it	le
 8006e9c:	f04f 33ff 	movle.w	r3, #4294967295
 8006ea0:	f04f 0a00 	mov.w	sl, #0
 8006ea4:	bfcf      	iteee	gt
 8006ea6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006eaa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006eae:	4093      	lslle	r3, r2
 8006eb0:	ea03 0b01 	andle.w	fp, r3, r1
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4650      	mov	r0, sl
 8006eba:	4659      	mov	r1, fp
 8006ebc:	f7f9 fe28 	bl	8000b10 <__aeabi_dcmpeq>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d1a7      	bne.n	8006e14 <_strtod_l+0x55c>
 8006ec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ec6:	464a      	mov	r2, r9
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006ecc:	462b      	mov	r3, r5
 8006ece:	9805      	ldr	r0, [sp, #20]
 8006ed0:	f001 fa90 	bl	80083f4 <__s2b>
 8006ed4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f43f af09 	beq.w	8006cee <_strtod_l+0x436>
 8006edc:	2400      	movs	r4, #0
 8006ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	eba3 0308 	sub.w	r3, r3, r8
 8006ee8:	bfa8      	it	ge
 8006eea:	2300      	movge	r3, #0
 8006eec:	46a0      	mov	r8, r4
 8006eee:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ef0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ef4:	9316      	str	r3, [sp, #88]	@ 0x58
 8006ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ef8:	9805      	ldr	r0, [sp, #20]
 8006efa:	6859      	ldr	r1, [r3, #4]
 8006efc:	f001 f9d2 	bl	80082a4 <_Balloc>
 8006f00:	4681      	mov	r9, r0
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f43f aef7 	beq.w	8006cf6 <_strtod_l+0x43e>
 8006f08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f0a:	300c      	adds	r0, #12
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	f103 010c 	add.w	r1, r3, #12
 8006f12:	3202      	adds	r2, #2
 8006f14:	0092      	lsls	r2, r2, #2
 8006f16:	f000 fd48 	bl	80079aa <memcpy>
 8006f1a:	ab1c      	add	r3, sp, #112	@ 0x70
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	4652      	mov	r2, sl
 8006f24:	465b      	mov	r3, fp
 8006f26:	9805      	ldr	r0, [sp, #20]
 8006f28:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006f2c:	f001 fd8e 	bl	8008a4c <__d2b>
 8006f30:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f43f aedf 	beq.w	8006cf6 <_strtod_l+0x43e>
 8006f38:	2101      	movs	r1, #1
 8006f3a:	9805      	ldr	r0, [sp, #20]
 8006f3c:	f001 faf0 	bl	8008520 <__i2b>
 8006f40:	4680      	mov	r8, r0
 8006f42:	b948      	cbnz	r0, 8006f58 <_strtod_l+0x6a0>
 8006f44:	f04f 0800 	mov.w	r8, #0
 8006f48:	e6d5      	b.n	8006cf6 <_strtod_l+0x43e>
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	ea03 0a0a 	and.w	sl, r3, sl
 8006f56:	e7ad      	b.n	8006eb4 <_strtod_l+0x5fc>
 8006f58:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006f5a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	bfab      	itete	ge
 8006f60:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006f62:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006f64:	18ef      	addge	r7, r5, r3
 8006f66:	1b5e      	sublt	r6, r3, r5
 8006f68:	9b08      	ldr	r3, [sp, #32]
 8006f6a:	bfa8      	it	ge
 8006f6c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006f6e:	eba5 0503 	sub.w	r5, r5, r3
 8006f72:	4415      	add	r5, r2
 8006f74:	4b34      	ldr	r3, [pc, #208]	@ (8007048 <_strtod_l+0x790>)
 8006f76:	f105 35ff 	add.w	r5, r5, #4294967295
 8006f7a:	bfb8      	it	lt
 8006f7c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f84:	da50      	bge.n	8007028 <_strtod_l+0x770>
 8006f86:	1b5b      	subs	r3, r3, r5
 8006f88:	2b1f      	cmp	r3, #31
 8006f8a:	f04f 0101 	mov.w	r1, #1
 8006f8e:	eba2 0203 	sub.w	r2, r2, r3
 8006f92:	dc3d      	bgt.n	8007010 <_strtod_l+0x758>
 8006f94:	fa01 f303 	lsl.w	r3, r1, r3
 8006f98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f9e:	18bd      	adds	r5, r7, r2
 8006fa0:	9b08      	ldr	r3, [sp, #32]
 8006fa2:	42af      	cmp	r7, r5
 8006fa4:	4416      	add	r6, r2
 8006fa6:	441e      	add	r6, r3
 8006fa8:	463b      	mov	r3, r7
 8006faa:	bfa8      	it	ge
 8006fac:	462b      	movge	r3, r5
 8006fae:	42b3      	cmp	r3, r6
 8006fb0:	bfa8      	it	ge
 8006fb2:	4633      	movge	r3, r6
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfc2      	ittt	gt
 8006fb8:	1aed      	subgt	r5, r5, r3
 8006fba:	1af6      	subgt	r6, r6, r3
 8006fbc:	1aff      	subgt	r7, r7, r3
 8006fbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dd16      	ble.n	8006ff2 <_strtod_l+0x73a>
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	9805      	ldr	r0, [sp, #20]
 8006fca:	f001 fb61 	bl	8008690 <__pow5mult>
 8006fce:	4680      	mov	r8, r0
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d0b7      	beq.n	8006f44 <_strtod_l+0x68c>
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006fd8:	9805      	ldr	r0, [sp, #20]
 8006fda:	f001 fab7 	bl	800854c <__multiply>
 8006fde:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	f43f ae88 	beq.w	8006cf6 <_strtod_l+0x43e>
 8006fe6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fe8:	9805      	ldr	r0, [sp, #20]
 8006fea:	f001 f99b 	bl	8008324 <_Bfree>
 8006fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ff2:	2d00      	cmp	r5, #0
 8006ff4:	dc1d      	bgt.n	8007032 <_strtod_l+0x77a>
 8006ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	dd27      	ble.n	800704c <_strtod_l+0x794>
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007000:	9805      	ldr	r0, [sp, #20]
 8007002:	f001 fb45 	bl	8008690 <__pow5mult>
 8007006:	4681      	mov	r9, r0
 8007008:	bb00      	cbnz	r0, 800704c <_strtod_l+0x794>
 800700a:	f04f 0900 	mov.w	r9, #0
 800700e:	e672      	b.n	8006cf6 <_strtod_l+0x43e>
 8007010:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007014:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007018:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800701c:	35e2      	adds	r5, #226	@ 0xe2
 800701e:	fa01 f305 	lsl.w	r3, r1, r5
 8007022:	9310      	str	r3, [sp, #64]	@ 0x40
 8007024:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007026:	e7ba      	b.n	8006f9e <_strtod_l+0x6e6>
 8007028:	2300      	movs	r3, #0
 800702a:	9310      	str	r3, [sp, #64]	@ 0x40
 800702c:	2301      	movs	r3, #1
 800702e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007030:	e7b5      	b.n	8006f9e <_strtod_l+0x6e6>
 8007032:	462a      	mov	r2, r5
 8007034:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007036:	9805      	ldr	r0, [sp, #20]
 8007038:	f001 fb84 	bl	8008744 <__lshift>
 800703c:	901a      	str	r0, [sp, #104]	@ 0x68
 800703e:	2800      	cmp	r0, #0
 8007040:	d1d9      	bne.n	8006ff6 <_strtod_l+0x73e>
 8007042:	e658      	b.n	8006cf6 <_strtod_l+0x43e>
 8007044:	08009cf0 	.word	0x08009cf0
 8007048:	fffffc02 	.word	0xfffffc02
 800704c:	2e00      	cmp	r6, #0
 800704e:	dd07      	ble.n	8007060 <_strtod_l+0x7a8>
 8007050:	4649      	mov	r1, r9
 8007052:	4632      	mov	r2, r6
 8007054:	9805      	ldr	r0, [sp, #20]
 8007056:	f001 fb75 	bl	8008744 <__lshift>
 800705a:	4681      	mov	r9, r0
 800705c:	2800      	cmp	r0, #0
 800705e:	d0d4      	beq.n	800700a <_strtod_l+0x752>
 8007060:	2f00      	cmp	r7, #0
 8007062:	dd08      	ble.n	8007076 <_strtod_l+0x7be>
 8007064:	4641      	mov	r1, r8
 8007066:	463a      	mov	r2, r7
 8007068:	9805      	ldr	r0, [sp, #20]
 800706a:	f001 fb6b 	bl	8008744 <__lshift>
 800706e:	4680      	mov	r8, r0
 8007070:	2800      	cmp	r0, #0
 8007072:	f43f ae40 	beq.w	8006cf6 <_strtod_l+0x43e>
 8007076:	464a      	mov	r2, r9
 8007078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800707a:	9805      	ldr	r0, [sp, #20]
 800707c:	f001 fbea 	bl	8008854 <__mdiff>
 8007080:	4604      	mov	r4, r0
 8007082:	2800      	cmp	r0, #0
 8007084:	f43f ae37 	beq.w	8006cf6 <_strtod_l+0x43e>
 8007088:	68c3      	ldr	r3, [r0, #12]
 800708a:	4641      	mov	r1, r8
 800708c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800708e:	2300      	movs	r3, #0
 8007090:	60c3      	str	r3, [r0, #12]
 8007092:	f001 fbc3 	bl	800881c <__mcmp>
 8007096:	2800      	cmp	r0, #0
 8007098:	da3d      	bge.n	8007116 <_strtod_l+0x85e>
 800709a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800709c:	ea53 030a 	orrs.w	r3, r3, sl
 80070a0:	d163      	bne.n	800716a <_strtod_l+0x8b2>
 80070a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d15f      	bne.n	800716a <_strtod_l+0x8b2>
 80070aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070ae:	0d1b      	lsrs	r3, r3, #20
 80070b0:	051b      	lsls	r3, r3, #20
 80070b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070b6:	d958      	bls.n	800716a <_strtod_l+0x8b2>
 80070b8:	6963      	ldr	r3, [r4, #20]
 80070ba:	b913      	cbnz	r3, 80070c2 <_strtod_l+0x80a>
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	dd53      	ble.n	800716a <_strtod_l+0x8b2>
 80070c2:	4621      	mov	r1, r4
 80070c4:	2201      	movs	r2, #1
 80070c6:	9805      	ldr	r0, [sp, #20]
 80070c8:	f001 fb3c 	bl	8008744 <__lshift>
 80070cc:	4641      	mov	r1, r8
 80070ce:	4604      	mov	r4, r0
 80070d0:	f001 fba4 	bl	800881c <__mcmp>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	dd48      	ble.n	800716a <_strtod_l+0x8b2>
 80070d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070dc:	9a08      	ldr	r2, [sp, #32]
 80070de:	0d1b      	lsrs	r3, r3, #20
 80070e0:	051b      	lsls	r3, r3, #20
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	d062      	beq.n	80071ac <_strtod_l+0x8f4>
 80070e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070ea:	d85f      	bhi.n	80071ac <_strtod_l+0x8f4>
 80070ec:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80070f0:	f67f ae94 	bls.w	8006e1c <_strtod_l+0x564>
 80070f4:	4650      	mov	r0, sl
 80070f6:	4659      	mov	r1, fp
 80070f8:	4ba3      	ldr	r3, [pc, #652]	@ (8007388 <_strtod_l+0xad0>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	f7f9 faa0 	bl	8000640 <__aeabi_dmul>
 8007100:	4ba2      	ldr	r3, [pc, #648]	@ (800738c <_strtod_l+0xad4>)
 8007102:	4682      	mov	sl, r0
 8007104:	400b      	ands	r3, r1
 8007106:	468b      	mov	fp, r1
 8007108:	2b00      	cmp	r3, #0
 800710a:	f47f adff 	bne.w	8006d0c <_strtod_l+0x454>
 800710e:	2322      	movs	r3, #34	@ 0x22
 8007110:	9a05      	ldr	r2, [sp, #20]
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	e5fa      	b.n	8006d0c <_strtod_l+0x454>
 8007116:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800711a:	d165      	bne.n	80071e8 <_strtod_l+0x930>
 800711c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800711e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007122:	b35a      	cbz	r2, 800717c <_strtod_l+0x8c4>
 8007124:	4a9a      	ldr	r2, [pc, #616]	@ (8007390 <_strtod_l+0xad8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d12b      	bne.n	8007182 <_strtod_l+0x8ca>
 800712a:	9b08      	ldr	r3, [sp, #32]
 800712c:	4651      	mov	r1, sl
 800712e:	b303      	cbz	r3, 8007172 <_strtod_l+0x8ba>
 8007130:	465a      	mov	r2, fp
 8007132:	4b96      	ldr	r3, [pc, #600]	@ (800738c <_strtod_l+0xad4>)
 8007134:	4013      	ands	r3, r2
 8007136:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800713a:	f04f 32ff 	mov.w	r2, #4294967295
 800713e:	d81b      	bhi.n	8007178 <_strtod_l+0x8c0>
 8007140:	0d1b      	lsrs	r3, r3, #20
 8007142:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	4299      	cmp	r1, r3
 800714c:	d119      	bne.n	8007182 <_strtod_l+0x8ca>
 800714e:	4b91      	ldr	r3, [pc, #580]	@ (8007394 <_strtod_l+0xadc>)
 8007150:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007152:	429a      	cmp	r2, r3
 8007154:	d102      	bne.n	800715c <_strtod_l+0x8a4>
 8007156:	3101      	adds	r1, #1
 8007158:	f43f adcd 	beq.w	8006cf6 <_strtod_l+0x43e>
 800715c:	f04f 0a00 	mov.w	sl, #0
 8007160:	4b8a      	ldr	r3, [pc, #552]	@ (800738c <_strtod_l+0xad4>)
 8007162:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007164:	401a      	ands	r2, r3
 8007166:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800716a:	9b08      	ldr	r3, [sp, #32]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1c1      	bne.n	80070f4 <_strtod_l+0x83c>
 8007170:	e5cc      	b.n	8006d0c <_strtod_l+0x454>
 8007172:	f04f 33ff 	mov.w	r3, #4294967295
 8007176:	e7e8      	b.n	800714a <_strtod_l+0x892>
 8007178:	4613      	mov	r3, r2
 800717a:	e7e6      	b.n	800714a <_strtod_l+0x892>
 800717c:	ea53 030a 	orrs.w	r3, r3, sl
 8007180:	d0aa      	beq.n	80070d8 <_strtod_l+0x820>
 8007182:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007184:	b1db      	cbz	r3, 80071be <_strtod_l+0x906>
 8007186:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007188:	4213      	tst	r3, r2
 800718a:	d0ee      	beq.n	800716a <_strtod_l+0x8b2>
 800718c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800718e:	4650      	mov	r0, sl
 8007190:	4659      	mov	r1, fp
 8007192:	9a08      	ldr	r2, [sp, #32]
 8007194:	b1bb      	cbz	r3, 80071c6 <_strtod_l+0x90e>
 8007196:	f7ff fb6e 	bl	8006876 <sulp>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071a2:	f7f9 f897 	bl	80002d4 <__adddf3>
 80071a6:	4682      	mov	sl, r0
 80071a8:	468b      	mov	fp, r1
 80071aa:	e7de      	b.n	800716a <_strtod_l+0x8b2>
 80071ac:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80071b0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80071b4:	f04f 3aff 	mov.w	sl, #4294967295
 80071b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80071bc:	e7d5      	b.n	800716a <_strtod_l+0x8b2>
 80071be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071c0:	ea13 0f0a 	tst.w	r3, sl
 80071c4:	e7e1      	b.n	800718a <_strtod_l+0x8d2>
 80071c6:	f7ff fb56 	bl	8006876 <sulp>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071d2:	f7f9 f87d 	bl	80002d0 <__aeabi_dsub>
 80071d6:	2200      	movs	r2, #0
 80071d8:	2300      	movs	r3, #0
 80071da:	4682      	mov	sl, r0
 80071dc:	468b      	mov	fp, r1
 80071de:	f7f9 fc97 	bl	8000b10 <__aeabi_dcmpeq>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d0c1      	beq.n	800716a <_strtod_l+0x8b2>
 80071e6:	e619      	b.n	8006e1c <_strtod_l+0x564>
 80071e8:	4641      	mov	r1, r8
 80071ea:	4620      	mov	r0, r4
 80071ec:	f001 fc86 	bl	8008afc <__ratio>
 80071f0:	2200      	movs	r2, #0
 80071f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80071f6:	4606      	mov	r6, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	f7f9 fc9d 	bl	8000b38 <__aeabi_dcmple>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d06d      	beq.n	80072de <_strtod_l+0xa26>
 8007202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d178      	bne.n	80072fa <_strtod_l+0xa42>
 8007208:	f1ba 0f00 	cmp.w	sl, #0
 800720c:	d156      	bne.n	80072bc <_strtod_l+0xa04>
 800720e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007214:	2b00      	cmp	r3, #0
 8007216:	d158      	bne.n	80072ca <_strtod_l+0xa12>
 8007218:	2200      	movs	r2, #0
 800721a:	4630      	mov	r0, r6
 800721c:	4639      	mov	r1, r7
 800721e:	4b5e      	ldr	r3, [pc, #376]	@ (8007398 <_strtod_l+0xae0>)
 8007220:	f7f9 fc80 	bl	8000b24 <__aeabi_dcmplt>
 8007224:	2800      	cmp	r0, #0
 8007226:	d157      	bne.n	80072d8 <_strtod_l+0xa20>
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	2200      	movs	r2, #0
 800722e:	4b5b      	ldr	r3, [pc, #364]	@ (800739c <_strtod_l+0xae4>)
 8007230:	f7f9 fa06 	bl	8000640 <__aeabi_dmul>
 8007234:	4606      	mov	r6, r0
 8007236:	460f      	mov	r7, r1
 8007238:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800723c:	9606      	str	r6, [sp, #24]
 800723e:	9307      	str	r3, [sp, #28]
 8007240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007244:	4d51      	ldr	r5, [pc, #324]	@ (800738c <_strtod_l+0xad4>)
 8007246:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800724a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800724c:	401d      	ands	r5, r3
 800724e:	4b54      	ldr	r3, [pc, #336]	@ (80073a0 <_strtod_l+0xae8>)
 8007250:	429d      	cmp	r5, r3
 8007252:	f040 80ab 	bne.w	80073ac <_strtod_l+0xaf4>
 8007256:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007258:	4650      	mov	r0, sl
 800725a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800725e:	4659      	mov	r1, fp
 8007260:	f001 fb8c 	bl	800897c <__ulp>
 8007264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007268:	f7f9 f9ea 	bl	8000640 <__aeabi_dmul>
 800726c:	4652      	mov	r2, sl
 800726e:	465b      	mov	r3, fp
 8007270:	f7f9 f830 	bl	80002d4 <__adddf3>
 8007274:	460b      	mov	r3, r1
 8007276:	4945      	ldr	r1, [pc, #276]	@ (800738c <_strtod_l+0xad4>)
 8007278:	4a4a      	ldr	r2, [pc, #296]	@ (80073a4 <_strtod_l+0xaec>)
 800727a:	4019      	ands	r1, r3
 800727c:	4291      	cmp	r1, r2
 800727e:	4682      	mov	sl, r0
 8007280:	d942      	bls.n	8007308 <_strtod_l+0xa50>
 8007282:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007284:	4b43      	ldr	r3, [pc, #268]	@ (8007394 <_strtod_l+0xadc>)
 8007286:	429a      	cmp	r2, r3
 8007288:	d103      	bne.n	8007292 <_strtod_l+0x9da>
 800728a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800728c:	3301      	adds	r3, #1
 800728e:	f43f ad32 	beq.w	8006cf6 <_strtod_l+0x43e>
 8007292:	f04f 3aff 	mov.w	sl, #4294967295
 8007296:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8007394 <_strtod_l+0xadc>
 800729a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800729c:	9805      	ldr	r0, [sp, #20]
 800729e:	f001 f841 	bl	8008324 <_Bfree>
 80072a2:	4649      	mov	r1, r9
 80072a4:	9805      	ldr	r0, [sp, #20]
 80072a6:	f001 f83d 	bl	8008324 <_Bfree>
 80072aa:	4641      	mov	r1, r8
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	f001 f839 	bl	8008324 <_Bfree>
 80072b2:	4621      	mov	r1, r4
 80072b4:	9805      	ldr	r0, [sp, #20]
 80072b6:	f001 f835 	bl	8008324 <_Bfree>
 80072ba:	e61c      	b.n	8006ef6 <_strtod_l+0x63e>
 80072bc:	f1ba 0f01 	cmp.w	sl, #1
 80072c0:	d103      	bne.n	80072ca <_strtod_l+0xa12>
 80072c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f43f ada9 	beq.w	8006e1c <_strtod_l+0x564>
 80072ca:	2200      	movs	r2, #0
 80072cc:	4b36      	ldr	r3, [pc, #216]	@ (80073a8 <_strtod_l+0xaf0>)
 80072ce:	2600      	movs	r6, #0
 80072d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072d4:	4f30      	ldr	r7, [pc, #192]	@ (8007398 <_strtod_l+0xae0>)
 80072d6:	e7b3      	b.n	8007240 <_strtod_l+0x988>
 80072d8:	2600      	movs	r6, #0
 80072da:	4f30      	ldr	r7, [pc, #192]	@ (800739c <_strtod_l+0xae4>)
 80072dc:	e7ac      	b.n	8007238 <_strtod_l+0x980>
 80072de:	4630      	mov	r0, r6
 80072e0:	4639      	mov	r1, r7
 80072e2:	4b2e      	ldr	r3, [pc, #184]	@ (800739c <_strtod_l+0xae4>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	f7f9 f9ab 	bl	8000640 <__aeabi_dmul>
 80072ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ec:	4606      	mov	r6, r0
 80072ee:	460f      	mov	r7, r1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0a1      	beq.n	8007238 <_strtod_l+0x980>
 80072f4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80072f8:	e7a2      	b.n	8007240 <_strtod_l+0x988>
 80072fa:	2200      	movs	r2, #0
 80072fc:	4b26      	ldr	r3, [pc, #152]	@ (8007398 <_strtod_l+0xae0>)
 80072fe:	4616      	mov	r6, r2
 8007300:	461f      	mov	r7, r3
 8007302:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007306:	e79b      	b.n	8007240 <_strtod_l+0x988>
 8007308:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800730c:	9b08      	ldr	r3, [sp, #32]
 800730e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1c1      	bne.n	800729a <_strtod_l+0x9e2>
 8007316:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800731a:	0d1b      	lsrs	r3, r3, #20
 800731c:	051b      	lsls	r3, r3, #20
 800731e:	429d      	cmp	r5, r3
 8007320:	d1bb      	bne.n	800729a <_strtod_l+0x9e2>
 8007322:	4630      	mov	r0, r6
 8007324:	4639      	mov	r1, r7
 8007326:	f7f9 fe67 	bl	8000ff8 <__aeabi_d2lz>
 800732a:	f7f9 f95b 	bl	80005e4 <__aeabi_l2d>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f8 ffcb 	bl	80002d0 <__aeabi_dsub>
 800733a:	460b      	mov	r3, r1
 800733c:	4602      	mov	r2, r0
 800733e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007342:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007346:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007348:	ea46 060a 	orr.w	r6, r6, sl
 800734c:	431e      	orrs	r6, r3
 800734e:	d06a      	beq.n	8007426 <_strtod_l+0xb6e>
 8007350:	a309      	add	r3, pc, #36	@ (adr r3, 8007378 <_strtod_l+0xac0>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f9 fbe5 	bl	8000b24 <__aeabi_dcmplt>
 800735a:	2800      	cmp	r0, #0
 800735c:	f47f acd6 	bne.w	8006d0c <_strtod_l+0x454>
 8007360:	a307      	add	r3, pc, #28	@ (adr r3, 8007380 <_strtod_l+0xac8>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800736a:	f7f9 fbf9 	bl	8000b60 <__aeabi_dcmpgt>
 800736e:	2800      	cmp	r0, #0
 8007370:	d093      	beq.n	800729a <_strtod_l+0x9e2>
 8007372:	e4cb      	b.n	8006d0c <_strtod_l+0x454>
 8007374:	f3af 8000 	nop.w
 8007378:	94a03595 	.word	0x94a03595
 800737c:	3fdfffff 	.word	0x3fdfffff
 8007380:	35afe535 	.word	0x35afe535
 8007384:	3fe00000 	.word	0x3fe00000
 8007388:	39500000 	.word	0x39500000
 800738c:	7ff00000 	.word	0x7ff00000
 8007390:	000fffff 	.word	0x000fffff
 8007394:	7fefffff 	.word	0x7fefffff
 8007398:	3ff00000 	.word	0x3ff00000
 800739c:	3fe00000 	.word	0x3fe00000
 80073a0:	7fe00000 	.word	0x7fe00000
 80073a4:	7c9fffff 	.word	0x7c9fffff
 80073a8:	bff00000 	.word	0xbff00000
 80073ac:	9b08      	ldr	r3, [sp, #32]
 80073ae:	b323      	cbz	r3, 80073fa <_strtod_l+0xb42>
 80073b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80073b4:	d821      	bhi.n	80073fa <_strtod_l+0xb42>
 80073b6:	a328      	add	r3, pc, #160	@ (adr r3, 8007458 <_strtod_l+0xba0>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	4630      	mov	r0, r6
 80073be:	4639      	mov	r1, r7
 80073c0:	f7f9 fbba 	bl	8000b38 <__aeabi_dcmple>
 80073c4:	b1a0      	cbz	r0, 80073f0 <_strtod_l+0xb38>
 80073c6:	4639      	mov	r1, r7
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7f9 fbfb 	bl	8000bc4 <__aeabi_d2uiz>
 80073ce:	2801      	cmp	r0, #1
 80073d0:	bf38      	it	cc
 80073d2:	2001      	movcc	r0, #1
 80073d4:	f7f9 f8ba 	bl	800054c <__aeabi_ui2d>
 80073d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	b9fb      	cbnz	r3, 8007420 <_strtod_l+0xb68>
 80073e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80073e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80073e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80073ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80073f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80073f6:	1b5b      	subs	r3, r3, r5
 80073f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80073fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007402:	f001 fabb 	bl	800897c <__ulp>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	f7f9 f917 	bl	8000640 <__aeabi_dmul>
 8007412:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007416:	f7f8 ff5d 	bl	80002d4 <__adddf3>
 800741a:	4682      	mov	sl, r0
 800741c:	468b      	mov	fp, r1
 800741e:	e775      	b.n	800730c <_strtod_l+0xa54>
 8007420:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007424:	e7e0      	b.n	80073e8 <_strtod_l+0xb30>
 8007426:	a30e      	add	r3, pc, #56	@ (adr r3, 8007460 <_strtod_l+0xba8>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f7f9 fb7a 	bl	8000b24 <__aeabi_dcmplt>
 8007430:	e79d      	b.n	800736e <_strtod_l+0xab6>
 8007432:	2300      	movs	r3, #0
 8007434:	930e      	str	r3, [sp, #56]	@ 0x38
 8007436:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007438:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	f7ff ba79 	b.w	8006932 <_strtod_l+0x7a>
 8007440:	2a65      	cmp	r2, #101	@ 0x65
 8007442:	f43f ab72 	beq.w	8006b2a <_strtod_l+0x272>
 8007446:	2a45      	cmp	r2, #69	@ 0x45
 8007448:	f43f ab6f 	beq.w	8006b2a <_strtod_l+0x272>
 800744c:	2301      	movs	r3, #1
 800744e:	f7ff bbaa 	b.w	8006ba6 <_strtod_l+0x2ee>
 8007452:	bf00      	nop
 8007454:	f3af 8000 	nop.w
 8007458:	ffc00000 	.word	0xffc00000
 800745c:	41dfffff 	.word	0x41dfffff
 8007460:	94a03595 	.word	0x94a03595
 8007464:	3fcfffff 	.word	0x3fcfffff

08007468 <strtod>:
 8007468:	460a      	mov	r2, r1
 800746a:	4601      	mov	r1, r0
 800746c:	4802      	ldr	r0, [pc, #8]	@ (8007478 <strtod+0x10>)
 800746e:	4b03      	ldr	r3, [pc, #12]	@ (800747c <strtod+0x14>)
 8007470:	6800      	ldr	r0, [r0, #0]
 8007472:	f7ff ba21 	b.w	80068b8 <_strtod_l>
 8007476:	bf00      	nop
 8007478:	20000198 	.word	0x20000198
 800747c:	2000002c 	.word	0x2000002c

08007480 <_strtol_l.isra.0>:
 8007480:	2b24      	cmp	r3, #36	@ 0x24
 8007482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007486:	4686      	mov	lr, r0
 8007488:	4690      	mov	r8, r2
 800748a:	d801      	bhi.n	8007490 <_strtol_l.isra.0+0x10>
 800748c:	2b01      	cmp	r3, #1
 800748e:	d106      	bne.n	800749e <_strtol_l.isra.0+0x1e>
 8007490:	f000 fa5e 	bl	8007950 <__errno>
 8007494:	2316      	movs	r3, #22
 8007496:	6003      	str	r3, [r0, #0]
 8007498:	2000      	movs	r0, #0
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	460d      	mov	r5, r1
 80074a0:	4833      	ldr	r0, [pc, #204]	@ (8007570 <_strtol_l.isra.0+0xf0>)
 80074a2:	462a      	mov	r2, r5
 80074a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074a8:	5d06      	ldrb	r6, [r0, r4]
 80074aa:	f016 0608 	ands.w	r6, r6, #8
 80074ae:	d1f8      	bne.n	80074a2 <_strtol_l.isra.0+0x22>
 80074b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80074b2:	d110      	bne.n	80074d6 <_strtol_l.isra.0+0x56>
 80074b4:	2601      	movs	r6, #1
 80074b6:	782c      	ldrb	r4, [r5, #0]
 80074b8:	1c95      	adds	r5, r2, #2
 80074ba:	f033 0210 	bics.w	r2, r3, #16
 80074be:	d115      	bne.n	80074ec <_strtol_l.isra.0+0x6c>
 80074c0:	2c30      	cmp	r4, #48	@ 0x30
 80074c2:	d10d      	bne.n	80074e0 <_strtol_l.isra.0+0x60>
 80074c4:	782a      	ldrb	r2, [r5, #0]
 80074c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80074ca:	2a58      	cmp	r2, #88	@ 0x58
 80074cc:	d108      	bne.n	80074e0 <_strtol_l.isra.0+0x60>
 80074ce:	786c      	ldrb	r4, [r5, #1]
 80074d0:	3502      	adds	r5, #2
 80074d2:	2310      	movs	r3, #16
 80074d4:	e00a      	b.n	80074ec <_strtol_l.isra.0+0x6c>
 80074d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80074d8:	bf04      	itt	eq
 80074da:	782c      	ldrbeq	r4, [r5, #0]
 80074dc:	1c95      	addeq	r5, r2, #2
 80074de:	e7ec      	b.n	80074ba <_strtol_l.isra.0+0x3a>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f6      	bne.n	80074d2 <_strtol_l.isra.0+0x52>
 80074e4:	2c30      	cmp	r4, #48	@ 0x30
 80074e6:	bf14      	ite	ne
 80074e8:	230a      	movne	r3, #10
 80074ea:	2308      	moveq	r3, #8
 80074ec:	2200      	movs	r2, #0
 80074ee:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80074f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074f6:	fbbc f9f3 	udiv	r9, ip, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8007500:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007504:	2f09      	cmp	r7, #9
 8007506:	d80f      	bhi.n	8007528 <_strtol_l.isra.0+0xa8>
 8007508:	463c      	mov	r4, r7
 800750a:	42a3      	cmp	r3, r4
 800750c:	dd1b      	ble.n	8007546 <_strtol_l.isra.0+0xc6>
 800750e:	1c57      	adds	r7, r2, #1
 8007510:	d007      	beq.n	8007522 <_strtol_l.isra.0+0xa2>
 8007512:	4581      	cmp	r9, r0
 8007514:	d314      	bcc.n	8007540 <_strtol_l.isra.0+0xc0>
 8007516:	d101      	bne.n	800751c <_strtol_l.isra.0+0x9c>
 8007518:	45a2      	cmp	sl, r4
 800751a:	db11      	blt.n	8007540 <_strtol_l.isra.0+0xc0>
 800751c:	2201      	movs	r2, #1
 800751e:	fb00 4003 	mla	r0, r0, r3, r4
 8007522:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007526:	e7eb      	b.n	8007500 <_strtol_l.isra.0+0x80>
 8007528:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800752c:	2f19      	cmp	r7, #25
 800752e:	d801      	bhi.n	8007534 <_strtol_l.isra.0+0xb4>
 8007530:	3c37      	subs	r4, #55	@ 0x37
 8007532:	e7ea      	b.n	800750a <_strtol_l.isra.0+0x8a>
 8007534:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007538:	2f19      	cmp	r7, #25
 800753a:	d804      	bhi.n	8007546 <_strtol_l.isra.0+0xc6>
 800753c:	3c57      	subs	r4, #87	@ 0x57
 800753e:	e7e4      	b.n	800750a <_strtol_l.isra.0+0x8a>
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	e7ed      	b.n	8007522 <_strtol_l.isra.0+0xa2>
 8007546:	1c53      	adds	r3, r2, #1
 8007548:	d108      	bne.n	800755c <_strtol_l.isra.0+0xdc>
 800754a:	2322      	movs	r3, #34	@ 0x22
 800754c:	4660      	mov	r0, ip
 800754e:	f8ce 3000 	str.w	r3, [lr]
 8007552:	f1b8 0f00 	cmp.w	r8, #0
 8007556:	d0a0      	beq.n	800749a <_strtol_l.isra.0+0x1a>
 8007558:	1e69      	subs	r1, r5, #1
 800755a:	e006      	b.n	800756a <_strtol_l.isra.0+0xea>
 800755c:	b106      	cbz	r6, 8007560 <_strtol_l.isra.0+0xe0>
 800755e:	4240      	negs	r0, r0
 8007560:	f1b8 0f00 	cmp.w	r8, #0
 8007564:	d099      	beq.n	800749a <_strtol_l.isra.0+0x1a>
 8007566:	2a00      	cmp	r2, #0
 8007568:	d1f6      	bne.n	8007558 <_strtol_l.isra.0+0xd8>
 800756a:	f8c8 1000 	str.w	r1, [r8]
 800756e:	e794      	b.n	800749a <_strtol_l.isra.0+0x1a>
 8007570:	08009d19 	.word	0x08009d19

08007574 <strtol>:
 8007574:	4613      	mov	r3, r2
 8007576:	460a      	mov	r2, r1
 8007578:	4601      	mov	r1, r0
 800757a:	4802      	ldr	r0, [pc, #8]	@ (8007584 <strtol+0x10>)
 800757c:	6800      	ldr	r0, [r0, #0]
 800757e:	f7ff bf7f 	b.w	8007480 <_strtol_l.isra.0>
 8007582:	bf00      	nop
 8007584:	20000198 	.word	0x20000198

08007588 <std>:
 8007588:	2300      	movs	r3, #0
 800758a:	b510      	push	{r4, lr}
 800758c:	4604      	mov	r4, r0
 800758e:	e9c0 3300 	strd	r3, r3, [r0]
 8007592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007596:	6083      	str	r3, [r0, #8]
 8007598:	8181      	strh	r1, [r0, #12]
 800759a:	6643      	str	r3, [r0, #100]	@ 0x64
 800759c:	81c2      	strh	r2, [r0, #14]
 800759e:	6183      	str	r3, [r0, #24]
 80075a0:	4619      	mov	r1, r3
 80075a2:	2208      	movs	r2, #8
 80075a4:	305c      	adds	r0, #92	@ 0x5c
 80075a6:	f000 f916 	bl	80077d6 <memset>
 80075aa:	4b0d      	ldr	r3, [pc, #52]	@ (80075e0 <std+0x58>)
 80075ac:	6224      	str	r4, [r4, #32]
 80075ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80075b0:	4b0c      	ldr	r3, [pc, #48]	@ (80075e4 <std+0x5c>)
 80075b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075b4:	4b0c      	ldr	r3, [pc, #48]	@ (80075e8 <std+0x60>)
 80075b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075b8:	4b0c      	ldr	r3, [pc, #48]	@ (80075ec <std+0x64>)
 80075ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80075bc:	4b0c      	ldr	r3, [pc, #48]	@ (80075f0 <std+0x68>)
 80075be:	429c      	cmp	r4, r3
 80075c0:	d006      	beq.n	80075d0 <std+0x48>
 80075c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075c6:	4294      	cmp	r4, r2
 80075c8:	d002      	beq.n	80075d0 <std+0x48>
 80075ca:	33d0      	adds	r3, #208	@ 0xd0
 80075cc:	429c      	cmp	r4, r3
 80075ce:	d105      	bne.n	80075dc <std+0x54>
 80075d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d8:	f000 b9e4 	b.w	80079a4 <__retarget_lock_init_recursive>
 80075dc:	bd10      	pop	{r4, pc}
 80075de:	bf00      	nop
 80075e0:	08007751 	.word	0x08007751
 80075e4:	08007773 	.word	0x08007773
 80075e8:	080077ab 	.word	0x080077ab
 80075ec:	080077cf 	.word	0x080077cf
 80075f0:	2000048c 	.word	0x2000048c

080075f4 <stdio_exit_handler>:
 80075f4:	4a02      	ldr	r2, [pc, #8]	@ (8007600 <stdio_exit_handler+0xc>)
 80075f6:	4903      	ldr	r1, [pc, #12]	@ (8007604 <stdio_exit_handler+0x10>)
 80075f8:	4803      	ldr	r0, [pc, #12]	@ (8007608 <stdio_exit_handler+0x14>)
 80075fa:	f000 b869 	b.w	80076d0 <_fwalk_sglue>
 80075fe:	bf00      	nop
 8007600:	20000020 	.word	0x20000020
 8007604:	080092cd 	.word	0x080092cd
 8007608:	2000019c 	.word	0x2000019c

0800760c <cleanup_stdio>:
 800760c:	6841      	ldr	r1, [r0, #4]
 800760e:	4b0c      	ldr	r3, [pc, #48]	@ (8007640 <cleanup_stdio+0x34>)
 8007610:	b510      	push	{r4, lr}
 8007612:	4299      	cmp	r1, r3
 8007614:	4604      	mov	r4, r0
 8007616:	d001      	beq.n	800761c <cleanup_stdio+0x10>
 8007618:	f001 fe58 	bl	80092cc <_fflush_r>
 800761c:	68a1      	ldr	r1, [r4, #8]
 800761e:	4b09      	ldr	r3, [pc, #36]	@ (8007644 <cleanup_stdio+0x38>)
 8007620:	4299      	cmp	r1, r3
 8007622:	d002      	beq.n	800762a <cleanup_stdio+0x1e>
 8007624:	4620      	mov	r0, r4
 8007626:	f001 fe51 	bl	80092cc <_fflush_r>
 800762a:	68e1      	ldr	r1, [r4, #12]
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <cleanup_stdio+0x3c>)
 800762e:	4299      	cmp	r1, r3
 8007630:	d004      	beq.n	800763c <cleanup_stdio+0x30>
 8007632:	4620      	mov	r0, r4
 8007634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007638:	f001 be48 	b.w	80092cc <_fflush_r>
 800763c:	bd10      	pop	{r4, pc}
 800763e:	bf00      	nop
 8007640:	2000048c 	.word	0x2000048c
 8007644:	200004f4 	.word	0x200004f4
 8007648:	2000055c 	.word	0x2000055c

0800764c <global_stdio_init.part.0>:
 800764c:	b510      	push	{r4, lr}
 800764e:	4b0b      	ldr	r3, [pc, #44]	@ (800767c <global_stdio_init.part.0+0x30>)
 8007650:	4c0b      	ldr	r4, [pc, #44]	@ (8007680 <global_stdio_init.part.0+0x34>)
 8007652:	4a0c      	ldr	r2, [pc, #48]	@ (8007684 <global_stdio_init.part.0+0x38>)
 8007654:	4620      	mov	r0, r4
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	2104      	movs	r1, #4
 800765a:	2200      	movs	r2, #0
 800765c:	f7ff ff94 	bl	8007588 <std>
 8007660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007664:	2201      	movs	r2, #1
 8007666:	2109      	movs	r1, #9
 8007668:	f7ff ff8e 	bl	8007588 <std>
 800766c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007670:	2202      	movs	r2, #2
 8007672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007676:	2112      	movs	r1, #18
 8007678:	f7ff bf86 	b.w	8007588 <std>
 800767c:	200005c4 	.word	0x200005c4
 8007680:	2000048c 	.word	0x2000048c
 8007684:	080075f5 	.word	0x080075f5

08007688 <__sfp_lock_acquire>:
 8007688:	4801      	ldr	r0, [pc, #4]	@ (8007690 <__sfp_lock_acquire+0x8>)
 800768a:	f000 b98c 	b.w	80079a6 <__retarget_lock_acquire_recursive>
 800768e:	bf00      	nop
 8007690:	200005cd 	.word	0x200005cd

08007694 <__sfp_lock_release>:
 8007694:	4801      	ldr	r0, [pc, #4]	@ (800769c <__sfp_lock_release+0x8>)
 8007696:	f000 b987 	b.w	80079a8 <__retarget_lock_release_recursive>
 800769a:	bf00      	nop
 800769c:	200005cd 	.word	0x200005cd

080076a0 <__sinit>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	4604      	mov	r4, r0
 80076a4:	f7ff fff0 	bl	8007688 <__sfp_lock_acquire>
 80076a8:	6a23      	ldr	r3, [r4, #32]
 80076aa:	b11b      	cbz	r3, 80076b4 <__sinit+0x14>
 80076ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076b0:	f7ff bff0 	b.w	8007694 <__sfp_lock_release>
 80076b4:	4b04      	ldr	r3, [pc, #16]	@ (80076c8 <__sinit+0x28>)
 80076b6:	6223      	str	r3, [r4, #32]
 80076b8:	4b04      	ldr	r3, [pc, #16]	@ (80076cc <__sinit+0x2c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1f5      	bne.n	80076ac <__sinit+0xc>
 80076c0:	f7ff ffc4 	bl	800764c <global_stdio_init.part.0>
 80076c4:	e7f2      	b.n	80076ac <__sinit+0xc>
 80076c6:	bf00      	nop
 80076c8:	0800760d 	.word	0x0800760d
 80076cc:	200005c4 	.word	0x200005c4

080076d0 <_fwalk_sglue>:
 80076d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d4:	4607      	mov	r7, r0
 80076d6:	4688      	mov	r8, r1
 80076d8:	4614      	mov	r4, r2
 80076da:	2600      	movs	r6, #0
 80076dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076e0:	f1b9 0901 	subs.w	r9, r9, #1
 80076e4:	d505      	bpl.n	80076f2 <_fwalk_sglue+0x22>
 80076e6:	6824      	ldr	r4, [r4, #0]
 80076e8:	2c00      	cmp	r4, #0
 80076ea:	d1f7      	bne.n	80076dc <_fwalk_sglue+0xc>
 80076ec:	4630      	mov	r0, r6
 80076ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d907      	bls.n	8007708 <_fwalk_sglue+0x38>
 80076f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076fc:	3301      	adds	r3, #1
 80076fe:	d003      	beq.n	8007708 <_fwalk_sglue+0x38>
 8007700:	4629      	mov	r1, r5
 8007702:	4638      	mov	r0, r7
 8007704:	47c0      	blx	r8
 8007706:	4306      	orrs	r6, r0
 8007708:	3568      	adds	r5, #104	@ 0x68
 800770a:	e7e9      	b.n	80076e0 <_fwalk_sglue+0x10>

0800770c <siprintf>:
 800770c:	b40e      	push	{r1, r2, r3}
 800770e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007712:	b510      	push	{r4, lr}
 8007714:	2400      	movs	r4, #0
 8007716:	b09d      	sub	sp, #116	@ 0x74
 8007718:	ab1f      	add	r3, sp, #124	@ 0x7c
 800771a:	9002      	str	r0, [sp, #8]
 800771c:	9006      	str	r0, [sp, #24]
 800771e:	9107      	str	r1, [sp, #28]
 8007720:	9104      	str	r1, [sp, #16]
 8007722:	4809      	ldr	r0, [pc, #36]	@ (8007748 <siprintf+0x3c>)
 8007724:	4909      	ldr	r1, [pc, #36]	@ (800774c <siprintf+0x40>)
 8007726:	f853 2b04 	ldr.w	r2, [r3], #4
 800772a:	9105      	str	r1, [sp, #20]
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	a902      	add	r1, sp, #8
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007734:	f001 fabe 	bl	8008cb4 <_svfiprintf_r>
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	701c      	strb	r4, [r3, #0]
 800773c:	b01d      	add	sp, #116	@ 0x74
 800773e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007742:	b003      	add	sp, #12
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20000198 	.word	0x20000198
 800774c:	ffff0208 	.word	0xffff0208

08007750 <__sread>:
 8007750:	b510      	push	{r4, lr}
 8007752:	460c      	mov	r4, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	f000 f8d6 	bl	8007908 <_read_r>
 800775c:	2800      	cmp	r0, #0
 800775e:	bfab      	itete	ge
 8007760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007762:	89a3      	ldrhlt	r3, [r4, #12]
 8007764:	181b      	addge	r3, r3, r0
 8007766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800776a:	bfac      	ite	ge
 800776c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800776e:	81a3      	strhlt	r3, [r4, #12]
 8007770:	bd10      	pop	{r4, pc}

08007772 <__swrite>:
 8007772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007776:	461f      	mov	r7, r3
 8007778:	898b      	ldrh	r3, [r1, #12]
 800777a:	4605      	mov	r5, r0
 800777c:	05db      	lsls	r3, r3, #23
 800777e:	460c      	mov	r4, r1
 8007780:	4616      	mov	r6, r2
 8007782:	d505      	bpl.n	8007790 <__swrite+0x1e>
 8007784:	2302      	movs	r3, #2
 8007786:	2200      	movs	r2, #0
 8007788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778c:	f000 f8aa 	bl	80078e4 <_lseek_r>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	4632      	mov	r2, r6
 8007794:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	4628      	mov	r0, r5
 800779c:	463b      	mov	r3, r7
 800779e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a6:	f000 b8c1 	b.w	800792c <_write_r>

080077aa <__sseek>:
 80077aa:	b510      	push	{r4, lr}
 80077ac:	460c      	mov	r4, r1
 80077ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b2:	f000 f897 	bl	80078e4 <_lseek_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	bf15      	itete	ne
 80077bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077c6:	81a3      	strheq	r3, [r4, #12]
 80077c8:	bf18      	it	ne
 80077ca:	81a3      	strhne	r3, [r4, #12]
 80077cc:	bd10      	pop	{r4, pc}

080077ce <__sclose>:
 80077ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d2:	f000 b877 	b.w	80078c4 <_close_r>

080077d6 <memset>:
 80077d6:	4603      	mov	r3, r0
 80077d8:	4402      	add	r2, r0
 80077da:	4293      	cmp	r3, r2
 80077dc:	d100      	bne.n	80077e0 <memset+0xa>
 80077de:	4770      	bx	lr
 80077e0:	f803 1b01 	strb.w	r1, [r3], #1
 80077e4:	e7f9      	b.n	80077da <memset+0x4>

080077e6 <strncmp>:
 80077e6:	b510      	push	{r4, lr}
 80077e8:	b16a      	cbz	r2, 8007806 <strncmp+0x20>
 80077ea:	3901      	subs	r1, #1
 80077ec:	1884      	adds	r4, r0, r2
 80077ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d103      	bne.n	8007802 <strncmp+0x1c>
 80077fa:	42a0      	cmp	r0, r4
 80077fc:	d001      	beq.n	8007802 <strncmp+0x1c>
 80077fe:	2a00      	cmp	r2, #0
 8007800:	d1f5      	bne.n	80077ee <strncmp+0x8>
 8007802:	1ad0      	subs	r0, r2, r3
 8007804:	bd10      	pop	{r4, pc}
 8007806:	4610      	mov	r0, r2
 8007808:	e7fc      	b.n	8007804 <strncmp+0x1e>
	...

0800780c <strtok>:
 800780c:	4b16      	ldr	r3, [pc, #88]	@ (8007868 <strtok+0x5c>)
 800780e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007812:	681f      	ldr	r7, [r3, #0]
 8007814:	4605      	mov	r5, r0
 8007816:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007818:	460e      	mov	r6, r1
 800781a:	b9ec      	cbnz	r4, 8007858 <strtok+0x4c>
 800781c:	2050      	movs	r0, #80	@ 0x50
 800781e:	f000 fc79 	bl	8008114 <malloc>
 8007822:	4602      	mov	r2, r0
 8007824:	6478      	str	r0, [r7, #68]	@ 0x44
 8007826:	b920      	cbnz	r0, 8007832 <strtok+0x26>
 8007828:	215b      	movs	r1, #91	@ 0x5b
 800782a:	4b10      	ldr	r3, [pc, #64]	@ (800786c <strtok+0x60>)
 800782c:	4810      	ldr	r0, [pc, #64]	@ (8007870 <strtok+0x64>)
 800782e:	f000 f8d1 	bl	80079d4 <__assert_func>
 8007832:	e9c0 4400 	strd	r4, r4, [r0]
 8007836:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800783a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800783e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007842:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007846:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800784a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800784e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007852:	6184      	str	r4, [r0, #24]
 8007854:	7704      	strb	r4, [r0, #28]
 8007856:	6244      	str	r4, [r0, #36]	@ 0x24
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800785e:	2301      	movs	r3, #1
 8007860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	f000 b806 	b.w	8007874 <__strtok_r>
 8007868:	20000198 	.word	0x20000198
 800786c:	08009b10 	.word	0x08009b10
 8007870:	08009b27 	.word	0x08009b27

08007874 <__strtok_r>:
 8007874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007876:	4604      	mov	r4, r0
 8007878:	b908      	cbnz	r0, 800787e <__strtok_r+0xa>
 800787a:	6814      	ldr	r4, [r2, #0]
 800787c:	b144      	cbz	r4, 8007890 <__strtok_r+0x1c>
 800787e:	460f      	mov	r7, r1
 8007880:	4620      	mov	r0, r4
 8007882:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007886:	f817 6b01 	ldrb.w	r6, [r7], #1
 800788a:	b91e      	cbnz	r6, 8007894 <__strtok_r+0x20>
 800788c:	b965      	cbnz	r5, 80078a8 <__strtok_r+0x34>
 800788e:	6015      	str	r5, [r2, #0]
 8007890:	2000      	movs	r0, #0
 8007892:	e005      	b.n	80078a0 <__strtok_r+0x2c>
 8007894:	42b5      	cmp	r5, r6
 8007896:	d1f6      	bne.n	8007886 <__strtok_r+0x12>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1f0      	bne.n	800787e <__strtok_r+0xa>
 800789c:	6014      	str	r4, [r2, #0]
 800789e:	7003      	strb	r3, [r0, #0]
 80078a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a2:	461c      	mov	r4, r3
 80078a4:	e00c      	b.n	80078c0 <__strtok_r+0x4c>
 80078a6:	b91d      	cbnz	r5, 80078b0 <__strtok_r+0x3c>
 80078a8:	460e      	mov	r6, r1
 80078aa:	4627      	mov	r7, r4
 80078ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078b0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80078b4:	42ab      	cmp	r3, r5
 80078b6:	d1f6      	bne.n	80078a6 <__strtok_r+0x32>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0f2      	beq.n	80078a2 <__strtok_r+0x2e>
 80078bc:	2300      	movs	r3, #0
 80078be:	703b      	strb	r3, [r7, #0]
 80078c0:	6014      	str	r4, [r2, #0]
 80078c2:	e7ed      	b.n	80078a0 <__strtok_r+0x2c>

080078c4 <_close_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	2300      	movs	r3, #0
 80078c8:	4d05      	ldr	r5, [pc, #20]	@ (80078e0 <_close_r+0x1c>)
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	f7fb f839 	bl	8002946 <_close>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_close_r+0x1a>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_close_r+0x1a>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	200005c8 	.word	0x200005c8

080078e4 <_lseek_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	4611      	mov	r1, r2
 80078ec:	2200      	movs	r2, #0
 80078ee:	4d05      	ldr	r5, [pc, #20]	@ (8007904 <_lseek_r+0x20>)
 80078f0:	602a      	str	r2, [r5, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	f7fb f84b 	bl	800298e <_lseek>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_lseek_r+0x1e>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_lseek_r+0x1e>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	200005c8 	.word	0x200005c8

08007908 <_read_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	4611      	mov	r1, r2
 8007910:	2200      	movs	r2, #0
 8007912:	4d05      	ldr	r5, [pc, #20]	@ (8007928 <_read_r+0x20>)
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	f7fa ffdc 	bl	80028d4 <_read>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_read_r+0x1e>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_read_r+0x1e>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	200005c8 	.word	0x200005c8

0800792c <_write_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	2200      	movs	r2, #0
 8007936:	4d05      	ldr	r5, [pc, #20]	@ (800794c <_write_r+0x20>)
 8007938:	602a      	str	r2, [r5, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	f7fa ffe7 	bl	800290e <_write>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_write_r+0x1e>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_write_r+0x1e>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	200005c8 	.word	0x200005c8

08007950 <__errno>:
 8007950:	4b01      	ldr	r3, [pc, #4]	@ (8007958 <__errno+0x8>)
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20000198 	.word	0x20000198

0800795c <__libc_init_array>:
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	2600      	movs	r6, #0
 8007960:	4d0c      	ldr	r5, [pc, #48]	@ (8007994 <__libc_init_array+0x38>)
 8007962:	4c0d      	ldr	r4, [pc, #52]	@ (8007998 <__libc_init_array+0x3c>)
 8007964:	1b64      	subs	r4, r4, r5
 8007966:	10a4      	asrs	r4, r4, #2
 8007968:	42a6      	cmp	r6, r4
 800796a:	d109      	bne.n	8007980 <__libc_init_array+0x24>
 800796c:	f002 f80c 	bl	8009988 <_init>
 8007970:	2600      	movs	r6, #0
 8007972:	4d0a      	ldr	r5, [pc, #40]	@ (800799c <__libc_init_array+0x40>)
 8007974:	4c0a      	ldr	r4, [pc, #40]	@ (80079a0 <__libc_init_array+0x44>)
 8007976:	1b64      	subs	r4, r4, r5
 8007978:	10a4      	asrs	r4, r4, #2
 800797a:	42a6      	cmp	r6, r4
 800797c:	d105      	bne.n	800798a <__libc_init_array+0x2e>
 800797e:	bd70      	pop	{r4, r5, r6, pc}
 8007980:	f855 3b04 	ldr.w	r3, [r5], #4
 8007984:	4798      	blx	r3
 8007986:	3601      	adds	r6, #1
 8007988:	e7ee      	b.n	8007968 <__libc_init_array+0xc>
 800798a:	f855 3b04 	ldr.w	r3, [r5], #4
 800798e:	4798      	blx	r3
 8007990:	3601      	adds	r6, #1
 8007992:	e7f2      	b.n	800797a <__libc_init_array+0x1e>
 8007994:	08009f20 	.word	0x08009f20
 8007998:	08009f20 	.word	0x08009f20
 800799c:	08009f20 	.word	0x08009f20
 80079a0:	08009f24 	.word	0x08009f24

080079a4 <__retarget_lock_init_recursive>:
 80079a4:	4770      	bx	lr

080079a6 <__retarget_lock_acquire_recursive>:
 80079a6:	4770      	bx	lr

080079a8 <__retarget_lock_release_recursive>:
 80079a8:	4770      	bx	lr

080079aa <memcpy>:
 80079aa:	440a      	add	r2, r1
 80079ac:	4291      	cmp	r1, r2
 80079ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80079b2:	d100      	bne.n	80079b6 <memcpy+0xc>
 80079b4:	4770      	bx	lr
 80079b6:	b510      	push	{r4, lr}
 80079b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079bc:	4291      	cmp	r1, r2
 80079be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c2:	d1f9      	bne.n	80079b8 <memcpy+0xe>
 80079c4:	bd10      	pop	{r4, pc}
	...

080079c8 <nan>:
 80079c8:	2000      	movs	r0, #0
 80079ca:	4901      	ldr	r1, [pc, #4]	@ (80079d0 <nan+0x8>)
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	7ff80000 	.word	0x7ff80000

080079d4 <__assert_func>:
 80079d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079d6:	4614      	mov	r4, r2
 80079d8:	461a      	mov	r2, r3
 80079da:	4b09      	ldr	r3, [pc, #36]	@ (8007a00 <__assert_func+0x2c>)
 80079dc:	4605      	mov	r5, r0
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68d8      	ldr	r0, [r3, #12]
 80079e2:	b14c      	cbz	r4, 80079f8 <__assert_func+0x24>
 80079e4:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <__assert_func+0x30>)
 80079e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079ea:	9100      	str	r1, [sp, #0]
 80079ec:	462b      	mov	r3, r5
 80079ee:	4906      	ldr	r1, [pc, #24]	@ (8007a08 <__assert_func+0x34>)
 80079f0:	f001 fc94 	bl	800931c <fiprintf>
 80079f4:	f001 fcdc 	bl	80093b0 <abort>
 80079f8:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <__assert_func+0x38>)
 80079fa:	461c      	mov	r4, r3
 80079fc:	e7f3      	b.n	80079e6 <__assert_func+0x12>
 80079fe:	bf00      	nop
 8007a00:	20000198 	.word	0x20000198
 8007a04:	08009b89 	.word	0x08009b89
 8007a08:	08009b96 	.word	0x08009b96
 8007a0c:	08009bc4 	.word	0x08009bc4

08007a10 <_free_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4605      	mov	r5, r0
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d040      	beq.n	8007a9a <_free_r+0x8a>
 8007a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1c:	1f0c      	subs	r4, r1, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfb8      	it	lt
 8007a22:	18e4      	addlt	r4, r4, r3
 8007a24:	f000 fc32 	bl	800828c <__malloc_lock>
 8007a28:	4a1c      	ldr	r2, [pc, #112]	@ (8007a9c <_free_r+0x8c>)
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	b933      	cbnz	r3, 8007a3c <_free_r+0x2c>
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	6014      	str	r4, [r2, #0]
 8007a32:	4628      	mov	r0, r5
 8007a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a38:	f000 bc2e 	b.w	8008298 <__malloc_unlock>
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	d908      	bls.n	8007a52 <_free_r+0x42>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	1821      	adds	r1, r4, r0
 8007a44:	428b      	cmp	r3, r1
 8007a46:	bf01      	itttt	eq
 8007a48:	6819      	ldreq	r1, [r3, #0]
 8007a4a:	685b      	ldreq	r3, [r3, #4]
 8007a4c:	1809      	addeq	r1, r1, r0
 8007a4e:	6021      	streq	r1, [r4, #0]
 8007a50:	e7ed      	b.n	8007a2e <_free_r+0x1e>
 8007a52:	461a      	mov	r2, r3
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b10b      	cbz	r3, 8007a5c <_free_r+0x4c>
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	d9fa      	bls.n	8007a52 <_free_r+0x42>
 8007a5c:	6811      	ldr	r1, [r2, #0]
 8007a5e:	1850      	adds	r0, r2, r1
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d10b      	bne.n	8007a7c <_free_r+0x6c>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	4401      	add	r1, r0
 8007a68:	1850      	adds	r0, r2, r1
 8007a6a:	4283      	cmp	r3, r0
 8007a6c:	6011      	str	r1, [r2, #0]
 8007a6e:	d1e0      	bne.n	8007a32 <_free_r+0x22>
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4408      	add	r0, r1
 8007a76:	6010      	str	r0, [r2, #0]
 8007a78:	6053      	str	r3, [r2, #4]
 8007a7a:	e7da      	b.n	8007a32 <_free_r+0x22>
 8007a7c:	d902      	bls.n	8007a84 <_free_r+0x74>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	e7d6      	b.n	8007a32 <_free_r+0x22>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	1821      	adds	r1, r4, r0
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf01      	itttt	eq
 8007a8c:	6819      	ldreq	r1, [r3, #0]
 8007a8e:	685b      	ldreq	r3, [r3, #4]
 8007a90:	1809      	addeq	r1, r1, r0
 8007a92:	6021      	streq	r1, [r4, #0]
 8007a94:	6063      	str	r3, [r4, #4]
 8007a96:	6054      	str	r4, [r2, #4]
 8007a98:	e7cb      	b.n	8007a32 <_free_r+0x22>
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	200005d4 	.word	0x200005d4

08007aa0 <rshift>:
 8007aa0:	6903      	ldr	r3, [r0, #16]
 8007aa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007aaa:	f100 0414 	add.w	r4, r0, #20
 8007aae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ab2:	dd46      	ble.n	8007b42 <rshift+0xa2>
 8007ab4:	f011 011f 	ands.w	r1, r1, #31
 8007ab8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007abc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ac0:	d10c      	bne.n	8007adc <rshift+0x3c>
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	f100 0710 	add.w	r7, r0, #16
 8007ac8:	42b1      	cmp	r1, r6
 8007aca:	d335      	bcc.n	8007b38 <rshift+0x98>
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	1eea      	subs	r2, r5, #3
 8007ad2:	4296      	cmp	r6, r2
 8007ad4:	bf38      	it	cc
 8007ad6:	2300      	movcc	r3, #0
 8007ad8:	4423      	add	r3, r4
 8007ada:	e015      	b.n	8007b08 <rshift+0x68>
 8007adc:	46a1      	mov	r9, r4
 8007ade:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ae2:	f1c1 0820 	rsb	r8, r1, #32
 8007ae6:	40cf      	lsrs	r7, r1
 8007ae8:	f105 0e04 	add.w	lr, r5, #4
 8007aec:	4576      	cmp	r6, lr
 8007aee:	46f4      	mov	ip, lr
 8007af0:	d816      	bhi.n	8007b20 <rshift+0x80>
 8007af2:	1a9a      	subs	r2, r3, r2
 8007af4:	0092      	lsls	r2, r2, #2
 8007af6:	3a04      	subs	r2, #4
 8007af8:	3501      	adds	r5, #1
 8007afa:	42ae      	cmp	r6, r5
 8007afc:	bf38      	it	cc
 8007afe:	2200      	movcc	r2, #0
 8007b00:	18a3      	adds	r3, r4, r2
 8007b02:	50a7      	str	r7, [r4, r2]
 8007b04:	b107      	cbz	r7, 8007b08 <rshift+0x68>
 8007b06:	3304      	adds	r3, #4
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	eba3 0204 	sub.w	r2, r3, r4
 8007b0e:	bf08      	it	eq
 8007b10:	2300      	moveq	r3, #0
 8007b12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b16:	6102      	str	r2, [r0, #16]
 8007b18:	bf08      	it	eq
 8007b1a:	6143      	streq	r3, [r0, #20]
 8007b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b20:	f8dc c000 	ldr.w	ip, [ip]
 8007b24:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b28:	ea4c 0707 	orr.w	r7, ip, r7
 8007b2c:	f849 7b04 	str.w	r7, [r9], #4
 8007b30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b34:	40cf      	lsrs	r7, r1
 8007b36:	e7d9      	b.n	8007aec <rshift+0x4c>
 8007b38:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b3c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b40:	e7c2      	b.n	8007ac8 <rshift+0x28>
 8007b42:	4623      	mov	r3, r4
 8007b44:	e7e0      	b.n	8007b08 <rshift+0x68>

08007b46 <__hexdig_fun>:
 8007b46:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007b4a:	2b09      	cmp	r3, #9
 8007b4c:	d802      	bhi.n	8007b54 <__hexdig_fun+0xe>
 8007b4e:	3820      	subs	r0, #32
 8007b50:	b2c0      	uxtb	r0, r0
 8007b52:	4770      	bx	lr
 8007b54:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	d801      	bhi.n	8007b60 <__hexdig_fun+0x1a>
 8007b5c:	3847      	subs	r0, #71	@ 0x47
 8007b5e:	e7f7      	b.n	8007b50 <__hexdig_fun+0xa>
 8007b60:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007b64:	2b05      	cmp	r3, #5
 8007b66:	d801      	bhi.n	8007b6c <__hexdig_fun+0x26>
 8007b68:	3827      	subs	r0, #39	@ 0x27
 8007b6a:	e7f1      	b.n	8007b50 <__hexdig_fun+0xa>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	4770      	bx	lr

08007b70 <__gethex>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	468a      	mov	sl, r1
 8007b76:	4690      	mov	r8, r2
 8007b78:	b085      	sub	sp, #20
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	680b      	ldr	r3, [r1, #0]
 8007b7e:	9001      	str	r0, [sp, #4]
 8007b80:	1c9c      	adds	r4, r3, #2
 8007b82:	46a1      	mov	r9, r4
 8007b84:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b88:	2830      	cmp	r0, #48	@ 0x30
 8007b8a:	d0fa      	beq.n	8007b82 <__gethex+0x12>
 8007b8c:	eba9 0303 	sub.w	r3, r9, r3
 8007b90:	f1a3 0b02 	sub.w	fp, r3, #2
 8007b94:	f7ff ffd7 	bl	8007b46 <__hexdig_fun>
 8007b98:	4605      	mov	r5, r0
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d168      	bne.n	8007c70 <__gethex+0x100>
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4648      	mov	r0, r9
 8007ba2:	499f      	ldr	r1, [pc, #636]	@ (8007e20 <__gethex+0x2b0>)
 8007ba4:	f7ff fe1f 	bl	80077e6 <strncmp>
 8007ba8:	4607      	mov	r7, r0
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d167      	bne.n	8007c7e <__gethex+0x10e>
 8007bae:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007bb2:	4626      	mov	r6, r4
 8007bb4:	f7ff ffc7 	bl	8007b46 <__hexdig_fun>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d062      	beq.n	8007c82 <__gethex+0x112>
 8007bbc:	4623      	mov	r3, r4
 8007bbe:	7818      	ldrb	r0, [r3, #0]
 8007bc0:	4699      	mov	r9, r3
 8007bc2:	2830      	cmp	r0, #48	@ 0x30
 8007bc4:	f103 0301 	add.w	r3, r3, #1
 8007bc8:	d0f9      	beq.n	8007bbe <__gethex+0x4e>
 8007bca:	f7ff ffbc 	bl	8007b46 <__hexdig_fun>
 8007bce:	fab0 f580 	clz	r5, r0
 8007bd2:	f04f 0b01 	mov.w	fp, #1
 8007bd6:	096d      	lsrs	r5, r5, #5
 8007bd8:	464a      	mov	r2, r9
 8007bda:	4616      	mov	r6, r2
 8007bdc:	7830      	ldrb	r0, [r6, #0]
 8007bde:	3201      	adds	r2, #1
 8007be0:	f7ff ffb1 	bl	8007b46 <__hexdig_fun>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d1f8      	bne.n	8007bda <__gethex+0x6a>
 8007be8:	2201      	movs	r2, #1
 8007bea:	4630      	mov	r0, r6
 8007bec:	498c      	ldr	r1, [pc, #560]	@ (8007e20 <__gethex+0x2b0>)
 8007bee:	f7ff fdfa 	bl	80077e6 <strncmp>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d13f      	bne.n	8007c76 <__gethex+0x106>
 8007bf6:	b944      	cbnz	r4, 8007c0a <__gethex+0x9a>
 8007bf8:	1c74      	adds	r4, r6, #1
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	7830      	ldrb	r0, [r6, #0]
 8007c00:	3201      	adds	r2, #1
 8007c02:	f7ff ffa0 	bl	8007b46 <__hexdig_fun>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d1f8      	bne.n	8007bfc <__gethex+0x8c>
 8007c0a:	1ba4      	subs	r4, r4, r6
 8007c0c:	00a7      	lsls	r7, r4, #2
 8007c0e:	7833      	ldrb	r3, [r6, #0]
 8007c10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007c14:	2b50      	cmp	r3, #80	@ 0x50
 8007c16:	d13e      	bne.n	8007c96 <__gethex+0x126>
 8007c18:	7873      	ldrb	r3, [r6, #1]
 8007c1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8007c1c:	d033      	beq.n	8007c86 <__gethex+0x116>
 8007c1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007c20:	d034      	beq.n	8007c8c <__gethex+0x11c>
 8007c22:	2400      	movs	r4, #0
 8007c24:	1c71      	adds	r1, r6, #1
 8007c26:	7808      	ldrb	r0, [r1, #0]
 8007c28:	f7ff ff8d 	bl	8007b46 <__hexdig_fun>
 8007c2c:	1e43      	subs	r3, r0, #1
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b18      	cmp	r3, #24
 8007c32:	d830      	bhi.n	8007c96 <__gethex+0x126>
 8007c34:	f1a0 0210 	sub.w	r2, r0, #16
 8007c38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c3c:	f7ff ff83 	bl	8007b46 <__hexdig_fun>
 8007c40:	f100 3cff 	add.w	ip, r0, #4294967295
 8007c44:	fa5f fc8c 	uxtb.w	ip, ip
 8007c48:	f1bc 0f18 	cmp.w	ip, #24
 8007c4c:	f04f 030a 	mov.w	r3, #10
 8007c50:	d91e      	bls.n	8007c90 <__gethex+0x120>
 8007c52:	b104      	cbz	r4, 8007c56 <__gethex+0xe6>
 8007c54:	4252      	negs	r2, r2
 8007c56:	4417      	add	r7, r2
 8007c58:	f8ca 1000 	str.w	r1, [sl]
 8007c5c:	b1ed      	cbz	r5, 8007c9a <__gethex+0x12a>
 8007c5e:	f1bb 0f00 	cmp.w	fp, #0
 8007c62:	bf0c      	ite	eq
 8007c64:	2506      	moveq	r5, #6
 8007c66:	2500      	movne	r5, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	b005      	add	sp, #20
 8007c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c70:	2500      	movs	r5, #0
 8007c72:	462c      	mov	r4, r5
 8007c74:	e7b0      	b.n	8007bd8 <__gethex+0x68>
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	d1c7      	bne.n	8007c0a <__gethex+0x9a>
 8007c7a:	4627      	mov	r7, r4
 8007c7c:	e7c7      	b.n	8007c0e <__gethex+0x9e>
 8007c7e:	464e      	mov	r6, r9
 8007c80:	462f      	mov	r7, r5
 8007c82:	2501      	movs	r5, #1
 8007c84:	e7c3      	b.n	8007c0e <__gethex+0x9e>
 8007c86:	2400      	movs	r4, #0
 8007c88:	1cb1      	adds	r1, r6, #2
 8007c8a:	e7cc      	b.n	8007c26 <__gethex+0xb6>
 8007c8c:	2401      	movs	r4, #1
 8007c8e:	e7fb      	b.n	8007c88 <__gethex+0x118>
 8007c90:	fb03 0002 	mla	r0, r3, r2, r0
 8007c94:	e7ce      	b.n	8007c34 <__gethex+0xc4>
 8007c96:	4631      	mov	r1, r6
 8007c98:	e7de      	b.n	8007c58 <__gethex+0xe8>
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	eba6 0309 	sub.w	r3, r6, r9
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	2b07      	cmp	r3, #7
 8007ca4:	dc0a      	bgt.n	8007cbc <__gethex+0x14c>
 8007ca6:	9801      	ldr	r0, [sp, #4]
 8007ca8:	f000 fafc 	bl	80082a4 <_Balloc>
 8007cac:	4604      	mov	r4, r0
 8007cae:	b940      	cbnz	r0, 8007cc2 <__gethex+0x152>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	21e4      	movs	r1, #228	@ 0xe4
 8007cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8007e24 <__gethex+0x2b4>)
 8007cb6:	485c      	ldr	r0, [pc, #368]	@ (8007e28 <__gethex+0x2b8>)
 8007cb8:	f7ff fe8c 	bl	80079d4 <__assert_func>
 8007cbc:	3101      	adds	r1, #1
 8007cbe:	105b      	asrs	r3, r3, #1
 8007cc0:	e7ef      	b.n	8007ca2 <__gethex+0x132>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f100 0a14 	add.w	sl, r0, #20
 8007cc8:	4655      	mov	r5, sl
 8007cca:	469b      	mov	fp, r3
 8007ccc:	45b1      	cmp	r9, r6
 8007cce:	d337      	bcc.n	8007d40 <__gethex+0x1d0>
 8007cd0:	f845 bb04 	str.w	fp, [r5], #4
 8007cd4:	eba5 050a 	sub.w	r5, r5, sl
 8007cd8:	10ad      	asrs	r5, r5, #2
 8007cda:	6125      	str	r5, [r4, #16]
 8007cdc:	4658      	mov	r0, fp
 8007cde:	f000 fbd3 	bl	8008488 <__hi0bits>
 8007ce2:	016d      	lsls	r5, r5, #5
 8007ce4:	f8d8 6000 	ldr.w	r6, [r8]
 8007ce8:	1a2d      	subs	r5, r5, r0
 8007cea:	42b5      	cmp	r5, r6
 8007cec:	dd54      	ble.n	8007d98 <__gethex+0x228>
 8007cee:	1bad      	subs	r5, r5, r6
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 ff55 	bl	8008ba2 <__any_on>
 8007cf8:	4681      	mov	r9, r0
 8007cfa:	b178      	cbz	r0, 8007d1c <__gethex+0x1ac>
 8007cfc:	f04f 0901 	mov.w	r9, #1
 8007d00:	1e6b      	subs	r3, r5, #1
 8007d02:	1159      	asrs	r1, r3, #5
 8007d04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007d08:	f003 021f 	and.w	r2, r3, #31
 8007d0c:	fa09 f202 	lsl.w	r2, r9, r2
 8007d10:	420a      	tst	r2, r1
 8007d12:	d003      	beq.n	8007d1c <__gethex+0x1ac>
 8007d14:	454b      	cmp	r3, r9
 8007d16:	dc36      	bgt.n	8007d86 <__gethex+0x216>
 8007d18:	f04f 0902 	mov.w	r9, #2
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f7ff febe 	bl	8007aa0 <rshift>
 8007d24:	442f      	add	r7, r5
 8007d26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d2a:	42bb      	cmp	r3, r7
 8007d2c:	da42      	bge.n	8007db4 <__gethex+0x244>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	9801      	ldr	r0, [sp, #4]
 8007d32:	f000 faf7 	bl	8008324 <_Bfree>
 8007d36:	2300      	movs	r3, #0
 8007d38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d3a:	25a3      	movs	r5, #163	@ 0xa3
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	e793      	b.n	8007c68 <__gethex+0xf8>
 8007d40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007d44:	2a2e      	cmp	r2, #46	@ 0x2e
 8007d46:	d012      	beq.n	8007d6e <__gethex+0x1fe>
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d104      	bne.n	8007d56 <__gethex+0x1e6>
 8007d4c:	f845 bb04 	str.w	fp, [r5], #4
 8007d50:	f04f 0b00 	mov.w	fp, #0
 8007d54:	465b      	mov	r3, fp
 8007d56:	7830      	ldrb	r0, [r6, #0]
 8007d58:	9303      	str	r3, [sp, #12]
 8007d5a:	f7ff fef4 	bl	8007b46 <__hexdig_fun>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	f000 000f 	and.w	r0, r0, #15
 8007d64:	4098      	lsls	r0, r3
 8007d66:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	e7ae      	b.n	8007ccc <__gethex+0x15c>
 8007d6e:	45b1      	cmp	r9, r6
 8007d70:	d8ea      	bhi.n	8007d48 <__gethex+0x1d8>
 8007d72:	2201      	movs	r2, #1
 8007d74:	4630      	mov	r0, r6
 8007d76:	492a      	ldr	r1, [pc, #168]	@ (8007e20 <__gethex+0x2b0>)
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	f7ff fd34 	bl	80077e6 <strncmp>
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d1e1      	bne.n	8007d48 <__gethex+0x1d8>
 8007d84:	e7a2      	b.n	8007ccc <__gethex+0x15c>
 8007d86:	4620      	mov	r0, r4
 8007d88:	1ea9      	subs	r1, r5, #2
 8007d8a:	f000 ff0a 	bl	8008ba2 <__any_on>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d0c2      	beq.n	8007d18 <__gethex+0x1a8>
 8007d92:	f04f 0903 	mov.w	r9, #3
 8007d96:	e7c1      	b.n	8007d1c <__gethex+0x1ac>
 8007d98:	da09      	bge.n	8007dae <__gethex+0x23e>
 8007d9a:	1b75      	subs	r5, r6, r5
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	462a      	mov	r2, r5
 8007da0:	9801      	ldr	r0, [sp, #4]
 8007da2:	f000 fccf 	bl	8008744 <__lshift>
 8007da6:	4604      	mov	r4, r0
 8007da8:	1b7f      	subs	r7, r7, r5
 8007daa:	f100 0a14 	add.w	sl, r0, #20
 8007dae:	f04f 0900 	mov.w	r9, #0
 8007db2:	e7b8      	b.n	8007d26 <__gethex+0x1b6>
 8007db4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007db8:	42bd      	cmp	r5, r7
 8007dba:	dd6f      	ble.n	8007e9c <__gethex+0x32c>
 8007dbc:	1bed      	subs	r5, r5, r7
 8007dbe:	42ae      	cmp	r6, r5
 8007dc0:	dc34      	bgt.n	8007e2c <__gethex+0x2bc>
 8007dc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d022      	beq.n	8007e10 <__gethex+0x2a0>
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d024      	beq.n	8007e18 <__gethex+0x2a8>
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d115      	bne.n	8007dfe <__gethex+0x28e>
 8007dd2:	42ae      	cmp	r6, r5
 8007dd4:	d113      	bne.n	8007dfe <__gethex+0x28e>
 8007dd6:	2e01      	cmp	r6, #1
 8007dd8:	d10b      	bne.n	8007df2 <__gethex+0x282>
 8007dda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007dde:	9a02      	ldr	r2, [sp, #8]
 8007de0:	2562      	movs	r5, #98	@ 0x62
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	2301      	movs	r3, #1
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	f8ca 3000 	str.w	r3, [sl]
 8007dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dee:	601c      	str	r4, [r3, #0]
 8007df0:	e73a      	b.n	8007c68 <__gethex+0xf8>
 8007df2:	4620      	mov	r0, r4
 8007df4:	1e71      	subs	r1, r6, #1
 8007df6:	f000 fed4 	bl	8008ba2 <__any_on>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d1ed      	bne.n	8007dda <__gethex+0x26a>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	9801      	ldr	r0, [sp, #4]
 8007e02:	f000 fa8f 	bl	8008324 <_Bfree>
 8007e06:	2300      	movs	r3, #0
 8007e08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e0a:	2550      	movs	r5, #80	@ 0x50
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	e72b      	b.n	8007c68 <__gethex+0xf8>
 8007e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f3      	bne.n	8007dfe <__gethex+0x28e>
 8007e16:	e7e0      	b.n	8007dda <__gethex+0x26a>
 8007e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1dd      	bne.n	8007dda <__gethex+0x26a>
 8007e1e:	e7ee      	b.n	8007dfe <__gethex+0x28e>
 8007e20:	08009b02 	.word	0x08009b02
 8007e24:	08009bc5 	.word	0x08009bc5
 8007e28:	08009bd6 	.word	0x08009bd6
 8007e2c:	1e6f      	subs	r7, r5, #1
 8007e2e:	f1b9 0f00 	cmp.w	r9, #0
 8007e32:	d130      	bne.n	8007e96 <__gethex+0x326>
 8007e34:	b127      	cbz	r7, 8007e40 <__gethex+0x2d0>
 8007e36:	4639      	mov	r1, r7
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 feb2 	bl	8008ba2 <__any_on>
 8007e3e:	4681      	mov	r9, r0
 8007e40:	2301      	movs	r3, #1
 8007e42:	4629      	mov	r1, r5
 8007e44:	1b76      	subs	r6, r6, r5
 8007e46:	2502      	movs	r5, #2
 8007e48:	117a      	asrs	r2, r7, #5
 8007e4a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007e4e:	f007 071f 	and.w	r7, r7, #31
 8007e52:	40bb      	lsls	r3, r7
 8007e54:	4213      	tst	r3, r2
 8007e56:	4620      	mov	r0, r4
 8007e58:	bf18      	it	ne
 8007e5a:	f049 0902 	orrne.w	r9, r9, #2
 8007e5e:	f7ff fe1f 	bl	8007aa0 <rshift>
 8007e62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007e66:	f1b9 0f00 	cmp.w	r9, #0
 8007e6a:	d047      	beq.n	8007efc <__gethex+0x38c>
 8007e6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d015      	beq.n	8007ea0 <__gethex+0x330>
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d017      	beq.n	8007ea8 <__gethex+0x338>
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d109      	bne.n	8007e90 <__gethex+0x320>
 8007e7c:	f019 0f02 	tst.w	r9, #2
 8007e80:	d006      	beq.n	8007e90 <__gethex+0x320>
 8007e82:	f8da 3000 	ldr.w	r3, [sl]
 8007e86:	ea49 0903 	orr.w	r9, r9, r3
 8007e8a:	f019 0f01 	tst.w	r9, #1
 8007e8e:	d10e      	bne.n	8007eae <__gethex+0x33e>
 8007e90:	f045 0510 	orr.w	r5, r5, #16
 8007e94:	e032      	b.n	8007efc <__gethex+0x38c>
 8007e96:	f04f 0901 	mov.w	r9, #1
 8007e9a:	e7d1      	b.n	8007e40 <__gethex+0x2d0>
 8007e9c:	2501      	movs	r5, #1
 8007e9e:	e7e2      	b.n	8007e66 <__gethex+0x2f6>
 8007ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ea2:	f1c3 0301 	rsb	r3, r3, #1
 8007ea6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d0f0      	beq.n	8007e90 <__gethex+0x320>
 8007eae:	f04f 0c00 	mov.w	ip, #0
 8007eb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007eb6:	f104 0314 	add.w	r3, r4, #20
 8007eba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ebe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007ecc:	d01b      	beq.n	8007f06 <__gethex+0x396>
 8007ece:	3201      	adds	r2, #1
 8007ed0:	6002      	str	r2, [r0, #0]
 8007ed2:	2d02      	cmp	r5, #2
 8007ed4:	f104 0314 	add.w	r3, r4, #20
 8007ed8:	d13c      	bne.n	8007f54 <__gethex+0x3e4>
 8007eda:	f8d8 2000 	ldr.w	r2, [r8]
 8007ede:	3a01      	subs	r2, #1
 8007ee0:	42b2      	cmp	r2, r6
 8007ee2:	d109      	bne.n	8007ef8 <__gethex+0x388>
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	1171      	asrs	r1, r6, #5
 8007ee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007eec:	f006 061f 	and.w	r6, r6, #31
 8007ef0:	fa02 f606 	lsl.w	r6, r2, r6
 8007ef4:	421e      	tst	r6, r3
 8007ef6:	d13a      	bne.n	8007f6e <__gethex+0x3fe>
 8007ef8:	f045 0520 	orr.w	r5, r5, #32
 8007efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007efe:	601c      	str	r4, [r3, #0]
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	601f      	str	r7, [r3, #0]
 8007f04:	e6b0      	b.n	8007c68 <__gethex+0xf8>
 8007f06:	4299      	cmp	r1, r3
 8007f08:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f0c:	d8d9      	bhi.n	8007ec2 <__gethex+0x352>
 8007f0e:	68a3      	ldr	r3, [r4, #8]
 8007f10:	459b      	cmp	fp, r3
 8007f12:	db17      	blt.n	8007f44 <__gethex+0x3d4>
 8007f14:	6861      	ldr	r1, [r4, #4]
 8007f16:	9801      	ldr	r0, [sp, #4]
 8007f18:	3101      	adds	r1, #1
 8007f1a:	f000 f9c3 	bl	80082a4 <_Balloc>
 8007f1e:	4681      	mov	r9, r0
 8007f20:	b918      	cbnz	r0, 8007f2a <__gethex+0x3ba>
 8007f22:	4602      	mov	r2, r0
 8007f24:	2184      	movs	r1, #132	@ 0x84
 8007f26:	4b19      	ldr	r3, [pc, #100]	@ (8007f8c <__gethex+0x41c>)
 8007f28:	e6c5      	b.n	8007cb6 <__gethex+0x146>
 8007f2a:	6922      	ldr	r2, [r4, #16]
 8007f2c:	f104 010c 	add.w	r1, r4, #12
 8007f30:	3202      	adds	r2, #2
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	300c      	adds	r0, #12
 8007f36:	f7ff fd38 	bl	80079aa <memcpy>
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	9801      	ldr	r0, [sp, #4]
 8007f3e:	f000 f9f1 	bl	8008324 <_Bfree>
 8007f42:	464c      	mov	r4, r9
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	6122      	str	r2, [r4, #16]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f50:	615a      	str	r2, [r3, #20]
 8007f52:	e7be      	b.n	8007ed2 <__gethex+0x362>
 8007f54:	6922      	ldr	r2, [r4, #16]
 8007f56:	455a      	cmp	r2, fp
 8007f58:	dd0b      	ble.n	8007f72 <__gethex+0x402>
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f7ff fd9f 	bl	8007aa0 <rshift>
 8007f62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f66:	3701      	adds	r7, #1
 8007f68:	42bb      	cmp	r3, r7
 8007f6a:	f6ff aee0 	blt.w	8007d2e <__gethex+0x1be>
 8007f6e:	2501      	movs	r5, #1
 8007f70:	e7c2      	b.n	8007ef8 <__gethex+0x388>
 8007f72:	f016 061f 	ands.w	r6, r6, #31
 8007f76:	d0fa      	beq.n	8007f6e <__gethex+0x3fe>
 8007f78:	4453      	add	r3, sl
 8007f7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007f7e:	f000 fa83 	bl	8008488 <__hi0bits>
 8007f82:	f1c6 0620 	rsb	r6, r6, #32
 8007f86:	42b0      	cmp	r0, r6
 8007f88:	dbe7      	blt.n	8007f5a <__gethex+0x3ea>
 8007f8a:	e7f0      	b.n	8007f6e <__gethex+0x3fe>
 8007f8c:	08009bc5 	.word	0x08009bc5

08007f90 <L_shift>:
 8007f90:	f1c2 0208 	rsb	r2, r2, #8
 8007f94:	0092      	lsls	r2, r2, #2
 8007f96:	b570      	push	{r4, r5, r6, lr}
 8007f98:	f1c2 0620 	rsb	r6, r2, #32
 8007f9c:	6843      	ldr	r3, [r0, #4]
 8007f9e:	6804      	ldr	r4, [r0, #0]
 8007fa0:	fa03 f506 	lsl.w	r5, r3, r6
 8007fa4:	432c      	orrs	r4, r5
 8007fa6:	40d3      	lsrs	r3, r2
 8007fa8:	6004      	str	r4, [r0, #0]
 8007faa:	f840 3f04 	str.w	r3, [r0, #4]!
 8007fae:	4288      	cmp	r0, r1
 8007fb0:	d3f4      	bcc.n	8007f9c <L_shift+0xc>
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}

08007fb4 <__match>:
 8007fb4:	b530      	push	{r4, r5, lr}
 8007fb6:	6803      	ldr	r3, [r0, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fbe:	b914      	cbnz	r4, 8007fc6 <__match+0x12>
 8007fc0:	6003      	str	r3, [r0, #0]
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	bd30      	pop	{r4, r5, pc}
 8007fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007fce:	2d19      	cmp	r5, #25
 8007fd0:	bf98      	it	ls
 8007fd2:	3220      	addls	r2, #32
 8007fd4:	42a2      	cmp	r2, r4
 8007fd6:	d0f0      	beq.n	8007fba <__match+0x6>
 8007fd8:	2000      	movs	r0, #0
 8007fda:	e7f3      	b.n	8007fc4 <__match+0x10>

08007fdc <__hexnan>:
 8007fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	680b      	ldr	r3, [r1, #0]
 8007fe4:	4682      	mov	sl, r0
 8007fe6:	115e      	asrs	r6, r3, #5
 8007fe8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007fec:	f013 031f 	ands.w	r3, r3, #31
 8007ff0:	bf18      	it	ne
 8007ff2:	3604      	addne	r6, #4
 8007ff4:	1f37      	subs	r7, r6, #4
 8007ff6:	4690      	mov	r8, r2
 8007ff8:	46b9      	mov	r9, r7
 8007ffa:	463c      	mov	r4, r7
 8007ffc:	46ab      	mov	fp, r5
 8007ffe:	b087      	sub	sp, #28
 8008000:	6801      	ldr	r1, [r0, #0]
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	f846 5c04 	str.w	r5, [r6, #-4]
 8008008:	9502      	str	r5, [sp, #8]
 800800a:	784a      	ldrb	r2, [r1, #1]
 800800c:	1c4b      	adds	r3, r1, #1
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	b342      	cbz	r2, 8008064 <__hexnan+0x88>
 8008012:	4610      	mov	r0, r2
 8008014:	9105      	str	r1, [sp, #20]
 8008016:	9204      	str	r2, [sp, #16]
 8008018:	f7ff fd95 	bl	8007b46 <__hexdig_fun>
 800801c:	2800      	cmp	r0, #0
 800801e:	d151      	bne.n	80080c4 <__hexnan+0xe8>
 8008020:	9a04      	ldr	r2, [sp, #16]
 8008022:	9905      	ldr	r1, [sp, #20]
 8008024:	2a20      	cmp	r2, #32
 8008026:	d818      	bhi.n	800805a <__hexnan+0x7e>
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	459b      	cmp	fp, r3
 800802c:	dd13      	ble.n	8008056 <__hexnan+0x7a>
 800802e:	454c      	cmp	r4, r9
 8008030:	d206      	bcs.n	8008040 <__hexnan+0x64>
 8008032:	2d07      	cmp	r5, #7
 8008034:	dc04      	bgt.n	8008040 <__hexnan+0x64>
 8008036:	462a      	mov	r2, r5
 8008038:	4649      	mov	r1, r9
 800803a:	4620      	mov	r0, r4
 800803c:	f7ff ffa8 	bl	8007f90 <L_shift>
 8008040:	4544      	cmp	r4, r8
 8008042:	d952      	bls.n	80080ea <__hexnan+0x10e>
 8008044:	2300      	movs	r3, #0
 8008046:	f1a4 0904 	sub.w	r9, r4, #4
 800804a:	f844 3c04 	str.w	r3, [r4, #-4]
 800804e:	461d      	mov	r5, r3
 8008050:	464c      	mov	r4, r9
 8008052:	f8cd b008 	str.w	fp, [sp, #8]
 8008056:	9903      	ldr	r1, [sp, #12]
 8008058:	e7d7      	b.n	800800a <__hexnan+0x2e>
 800805a:	2a29      	cmp	r2, #41	@ 0x29
 800805c:	d157      	bne.n	800810e <__hexnan+0x132>
 800805e:	3102      	adds	r1, #2
 8008060:	f8ca 1000 	str.w	r1, [sl]
 8008064:	f1bb 0f00 	cmp.w	fp, #0
 8008068:	d051      	beq.n	800810e <__hexnan+0x132>
 800806a:	454c      	cmp	r4, r9
 800806c:	d206      	bcs.n	800807c <__hexnan+0xa0>
 800806e:	2d07      	cmp	r5, #7
 8008070:	dc04      	bgt.n	800807c <__hexnan+0xa0>
 8008072:	462a      	mov	r2, r5
 8008074:	4649      	mov	r1, r9
 8008076:	4620      	mov	r0, r4
 8008078:	f7ff ff8a 	bl	8007f90 <L_shift>
 800807c:	4544      	cmp	r4, r8
 800807e:	d936      	bls.n	80080ee <__hexnan+0x112>
 8008080:	4623      	mov	r3, r4
 8008082:	f1a8 0204 	sub.w	r2, r8, #4
 8008086:	f853 1b04 	ldr.w	r1, [r3], #4
 800808a:	429f      	cmp	r7, r3
 800808c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008090:	d2f9      	bcs.n	8008086 <__hexnan+0xaa>
 8008092:	1b3b      	subs	r3, r7, r4
 8008094:	f023 0303 	bic.w	r3, r3, #3
 8008098:	3304      	adds	r3, #4
 800809a:	3401      	adds	r4, #1
 800809c:	3e03      	subs	r6, #3
 800809e:	42b4      	cmp	r4, r6
 80080a0:	bf88      	it	hi
 80080a2:	2304      	movhi	r3, #4
 80080a4:	2200      	movs	r2, #0
 80080a6:	4443      	add	r3, r8
 80080a8:	f843 2b04 	str.w	r2, [r3], #4
 80080ac:	429f      	cmp	r7, r3
 80080ae:	d2fb      	bcs.n	80080a8 <__hexnan+0xcc>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	b91b      	cbnz	r3, 80080bc <__hexnan+0xe0>
 80080b4:	4547      	cmp	r7, r8
 80080b6:	d128      	bne.n	800810a <__hexnan+0x12e>
 80080b8:	2301      	movs	r3, #1
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	2005      	movs	r0, #5
 80080be:	b007      	add	sp, #28
 80080c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c4:	3501      	adds	r5, #1
 80080c6:	2d08      	cmp	r5, #8
 80080c8:	f10b 0b01 	add.w	fp, fp, #1
 80080cc:	dd06      	ble.n	80080dc <__hexnan+0x100>
 80080ce:	4544      	cmp	r4, r8
 80080d0:	d9c1      	bls.n	8008056 <__hexnan+0x7a>
 80080d2:	2300      	movs	r3, #0
 80080d4:	2501      	movs	r5, #1
 80080d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80080da:	3c04      	subs	r4, #4
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	f000 000f 	and.w	r0, r0, #15
 80080e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80080e6:	6020      	str	r0, [r4, #0]
 80080e8:	e7b5      	b.n	8008056 <__hexnan+0x7a>
 80080ea:	2508      	movs	r5, #8
 80080ec:	e7b3      	b.n	8008056 <__hexnan+0x7a>
 80080ee:	9b01      	ldr	r3, [sp, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0dd      	beq.n	80080b0 <__hexnan+0xd4>
 80080f4:	f04f 32ff 	mov.w	r2, #4294967295
 80080f8:	f1c3 0320 	rsb	r3, r3, #32
 80080fc:	40da      	lsrs	r2, r3
 80080fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008102:	4013      	ands	r3, r2
 8008104:	f846 3c04 	str.w	r3, [r6, #-4]
 8008108:	e7d2      	b.n	80080b0 <__hexnan+0xd4>
 800810a:	3f04      	subs	r7, #4
 800810c:	e7d0      	b.n	80080b0 <__hexnan+0xd4>
 800810e:	2004      	movs	r0, #4
 8008110:	e7d5      	b.n	80080be <__hexnan+0xe2>
	...

08008114 <malloc>:
 8008114:	4b02      	ldr	r3, [pc, #8]	@ (8008120 <malloc+0xc>)
 8008116:	4601      	mov	r1, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f000 b825 	b.w	8008168 <_malloc_r>
 800811e:	bf00      	nop
 8008120:	20000198 	.word	0x20000198

08008124 <sbrk_aligned>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	4e0f      	ldr	r6, [pc, #60]	@ (8008164 <sbrk_aligned+0x40>)
 8008128:	460c      	mov	r4, r1
 800812a:	6831      	ldr	r1, [r6, #0]
 800812c:	4605      	mov	r5, r0
 800812e:	b911      	cbnz	r1, 8008136 <sbrk_aligned+0x12>
 8008130:	f001 f920 	bl	8009374 <_sbrk_r>
 8008134:	6030      	str	r0, [r6, #0]
 8008136:	4621      	mov	r1, r4
 8008138:	4628      	mov	r0, r5
 800813a:	f001 f91b 	bl	8009374 <_sbrk_r>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	d103      	bne.n	800814a <sbrk_aligned+0x26>
 8008142:	f04f 34ff 	mov.w	r4, #4294967295
 8008146:	4620      	mov	r0, r4
 8008148:	bd70      	pop	{r4, r5, r6, pc}
 800814a:	1cc4      	adds	r4, r0, #3
 800814c:	f024 0403 	bic.w	r4, r4, #3
 8008150:	42a0      	cmp	r0, r4
 8008152:	d0f8      	beq.n	8008146 <sbrk_aligned+0x22>
 8008154:	1a21      	subs	r1, r4, r0
 8008156:	4628      	mov	r0, r5
 8008158:	f001 f90c 	bl	8009374 <_sbrk_r>
 800815c:	3001      	adds	r0, #1
 800815e:	d1f2      	bne.n	8008146 <sbrk_aligned+0x22>
 8008160:	e7ef      	b.n	8008142 <sbrk_aligned+0x1e>
 8008162:	bf00      	nop
 8008164:	200005d0 	.word	0x200005d0

08008168 <_malloc_r>:
 8008168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800816c:	1ccd      	adds	r5, r1, #3
 800816e:	f025 0503 	bic.w	r5, r5, #3
 8008172:	3508      	adds	r5, #8
 8008174:	2d0c      	cmp	r5, #12
 8008176:	bf38      	it	cc
 8008178:	250c      	movcc	r5, #12
 800817a:	2d00      	cmp	r5, #0
 800817c:	4606      	mov	r6, r0
 800817e:	db01      	blt.n	8008184 <_malloc_r+0x1c>
 8008180:	42a9      	cmp	r1, r5
 8008182:	d904      	bls.n	800818e <_malloc_r+0x26>
 8008184:	230c      	movs	r3, #12
 8008186:	6033      	str	r3, [r6, #0]
 8008188:	2000      	movs	r0, #0
 800818a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008264 <_malloc_r+0xfc>
 8008192:	f000 f87b 	bl	800828c <__malloc_lock>
 8008196:	f8d8 3000 	ldr.w	r3, [r8]
 800819a:	461c      	mov	r4, r3
 800819c:	bb44      	cbnz	r4, 80081f0 <_malloc_r+0x88>
 800819e:	4629      	mov	r1, r5
 80081a0:	4630      	mov	r0, r6
 80081a2:	f7ff ffbf 	bl	8008124 <sbrk_aligned>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	4604      	mov	r4, r0
 80081aa:	d158      	bne.n	800825e <_malloc_r+0xf6>
 80081ac:	f8d8 4000 	ldr.w	r4, [r8]
 80081b0:	4627      	mov	r7, r4
 80081b2:	2f00      	cmp	r7, #0
 80081b4:	d143      	bne.n	800823e <_malloc_r+0xd6>
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d04b      	beq.n	8008252 <_malloc_r+0xea>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	4639      	mov	r1, r7
 80081be:	4630      	mov	r0, r6
 80081c0:	eb04 0903 	add.w	r9, r4, r3
 80081c4:	f001 f8d6 	bl	8009374 <_sbrk_r>
 80081c8:	4581      	cmp	r9, r0
 80081ca:	d142      	bne.n	8008252 <_malloc_r+0xea>
 80081cc:	6821      	ldr	r1, [r4, #0]
 80081ce:	4630      	mov	r0, r6
 80081d0:	1a6d      	subs	r5, r5, r1
 80081d2:	4629      	mov	r1, r5
 80081d4:	f7ff ffa6 	bl	8008124 <sbrk_aligned>
 80081d8:	3001      	adds	r0, #1
 80081da:	d03a      	beq.n	8008252 <_malloc_r+0xea>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	442b      	add	r3, r5
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	f8d8 3000 	ldr.w	r3, [r8]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	bb62      	cbnz	r2, 8008244 <_malloc_r+0xdc>
 80081ea:	f8c8 7000 	str.w	r7, [r8]
 80081ee:	e00f      	b.n	8008210 <_malloc_r+0xa8>
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	1b52      	subs	r2, r2, r5
 80081f4:	d420      	bmi.n	8008238 <_malloc_r+0xd0>
 80081f6:	2a0b      	cmp	r2, #11
 80081f8:	d917      	bls.n	800822a <_malloc_r+0xc2>
 80081fa:	1961      	adds	r1, r4, r5
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	6025      	str	r5, [r4, #0]
 8008200:	bf18      	it	ne
 8008202:	6059      	strne	r1, [r3, #4]
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	bf08      	it	eq
 8008208:	f8c8 1000 	streq.w	r1, [r8]
 800820c:	5162      	str	r2, [r4, r5]
 800820e:	604b      	str	r3, [r1, #4]
 8008210:	4630      	mov	r0, r6
 8008212:	f000 f841 	bl	8008298 <__malloc_unlock>
 8008216:	f104 000b 	add.w	r0, r4, #11
 800821a:	1d23      	adds	r3, r4, #4
 800821c:	f020 0007 	bic.w	r0, r0, #7
 8008220:	1ac2      	subs	r2, r0, r3
 8008222:	bf1c      	itt	ne
 8008224:	1a1b      	subne	r3, r3, r0
 8008226:	50a3      	strne	r3, [r4, r2]
 8008228:	e7af      	b.n	800818a <_malloc_r+0x22>
 800822a:	6862      	ldr	r2, [r4, #4]
 800822c:	42a3      	cmp	r3, r4
 800822e:	bf0c      	ite	eq
 8008230:	f8c8 2000 	streq.w	r2, [r8]
 8008234:	605a      	strne	r2, [r3, #4]
 8008236:	e7eb      	b.n	8008210 <_malloc_r+0xa8>
 8008238:	4623      	mov	r3, r4
 800823a:	6864      	ldr	r4, [r4, #4]
 800823c:	e7ae      	b.n	800819c <_malloc_r+0x34>
 800823e:	463c      	mov	r4, r7
 8008240:	687f      	ldr	r7, [r7, #4]
 8008242:	e7b6      	b.n	80081b2 <_malloc_r+0x4a>
 8008244:	461a      	mov	r2, r3
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	42a3      	cmp	r3, r4
 800824a:	d1fb      	bne.n	8008244 <_malloc_r+0xdc>
 800824c:	2300      	movs	r3, #0
 800824e:	6053      	str	r3, [r2, #4]
 8008250:	e7de      	b.n	8008210 <_malloc_r+0xa8>
 8008252:	230c      	movs	r3, #12
 8008254:	4630      	mov	r0, r6
 8008256:	6033      	str	r3, [r6, #0]
 8008258:	f000 f81e 	bl	8008298 <__malloc_unlock>
 800825c:	e794      	b.n	8008188 <_malloc_r+0x20>
 800825e:	6005      	str	r5, [r0, #0]
 8008260:	e7d6      	b.n	8008210 <_malloc_r+0xa8>
 8008262:	bf00      	nop
 8008264:	200005d4 	.word	0x200005d4

08008268 <__ascii_mbtowc>:
 8008268:	b082      	sub	sp, #8
 800826a:	b901      	cbnz	r1, 800826e <__ascii_mbtowc+0x6>
 800826c:	a901      	add	r1, sp, #4
 800826e:	b142      	cbz	r2, 8008282 <__ascii_mbtowc+0x1a>
 8008270:	b14b      	cbz	r3, 8008286 <__ascii_mbtowc+0x1e>
 8008272:	7813      	ldrb	r3, [r2, #0]
 8008274:	600b      	str	r3, [r1, #0]
 8008276:	7812      	ldrb	r2, [r2, #0]
 8008278:	1e10      	subs	r0, r2, #0
 800827a:	bf18      	it	ne
 800827c:	2001      	movne	r0, #1
 800827e:	b002      	add	sp, #8
 8008280:	4770      	bx	lr
 8008282:	4610      	mov	r0, r2
 8008284:	e7fb      	b.n	800827e <__ascii_mbtowc+0x16>
 8008286:	f06f 0001 	mvn.w	r0, #1
 800828a:	e7f8      	b.n	800827e <__ascii_mbtowc+0x16>

0800828c <__malloc_lock>:
 800828c:	4801      	ldr	r0, [pc, #4]	@ (8008294 <__malloc_lock+0x8>)
 800828e:	f7ff bb8a 	b.w	80079a6 <__retarget_lock_acquire_recursive>
 8008292:	bf00      	nop
 8008294:	200005cc 	.word	0x200005cc

08008298 <__malloc_unlock>:
 8008298:	4801      	ldr	r0, [pc, #4]	@ (80082a0 <__malloc_unlock+0x8>)
 800829a:	f7ff bb85 	b.w	80079a8 <__retarget_lock_release_recursive>
 800829e:	bf00      	nop
 80082a0:	200005cc 	.word	0x200005cc

080082a4 <_Balloc>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	69c6      	ldr	r6, [r0, #28]
 80082a8:	4604      	mov	r4, r0
 80082aa:	460d      	mov	r5, r1
 80082ac:	b976      	cbnz	r6, 80082cc <_Balloc+0x28>
 80082ae:	2010      	movs	r0, #16
 80082b0:	f7ff ff30 	bl	8008114 <malloc>
 80082b4:	4602      	mov	r2, r0
 80082b6:	61e0      	str	r0, [r4, #28]
 80082b8:	b920      	cbnz	r0, 80082c4 <_Balloc+0x20>
 80082ba:	216b      	movs	r1, #107	@ 0x6b
 80082bc:	4b17      	ldr	r3, [pc, #92]	@ (800831c <_Balloc+0x78>)
 80082be:	4818      	ldr	r0, [pc, #96]	@ (8008320 <_Balloc+0x7c>)
 80082c0:	f7ff fb88 	bl	80079d4 <__assert_func>
 80082c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082c8:	6006      	str	r6, [r0, #0]
 80082ca:	60c6      	str	r6, [r0, #12]
 80082cc:	69e6      	ldr	r6, [r4, #28]
 80082ce:	68f3      	ldr	r3, [r6, #12]
 80082d0:	b183      	cbz	r3, 80082f4 <_Balloc+0x50>
 80082d2:	69e3      	ldr	r3, [r4, #28]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082da:	b9b8      	cbnz	r0, 800830c <_Balloc+0x68>
 80082dc:	2101      	movs	r1, #1
 80082de:	fa01 f605 	lsl.w	r6, r1, r5
 80082e2:	1d72      	adds	r2, r6, #5
 80082e4:	4620      	mov	r0, r4
 80082e6:	0092      	lsls	r2, r2, #2
 80082e8:	f001 f869 	bl	80093be <_calloc_r>
 80082ec:	b160      	cbz	r0, 8008308 <_Balloc+0x64>
 80082ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082f2:	e00e      	b.n	8008312 <_Balloc+0x6e>
 80082f4:	2221      	movs	r2, #33	@ 0x21
 80082f6:	2104      	movs	r1, #4
 80082f8:	4620      	mov	r0, r4
 80082fa:	f001 f860 	bl	80093be <_calloc_r>
 80082fe:	69e3      	ldr	r3, [r4, #28]
 8008300:	60f0      	str	r0, [r6, #12]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e4      	bne.n	80082d2 <_Balloc+0x2e>
 8008308:	2000      	movs	r0, #0
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	6802      	ldr	r2, [r0, #0]
 800830e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008312:	2300      	movs	r3, #0
 8008314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008318:	e7f7      	b.n	800830a <_Balloc+0x66>
 800831a:	bf00      	nop
 800831c:	08009b10 	.word	0x08009b10
 8008320:	08009c36 	.word	0x08009c36

08008324 <_Bfree>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	69c6      	ldr	r6, [r0, #28]
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b976      	cbnz	r6, 800834c <_Bfree+0x28>
 800832e:	2010      	movs	r0, #16
 8008330:	f7ff fef0 	bl	8008114 <malloc>
 8008334:	4602      	mov	r2, r0
 8008336:	61e8      	str	r0, [r5, #28]
 8008338:	b920      	cbnz	r0, 8008344 <_Bfree+0x20>
 800833a:	218f      	movs	r1, #143	@ 0x8f
 800833c:	4b08      	ldr	r3, [pc, #32]	@ (8008360 <_Bfree+0x3c>)
 800833e:	4809      	ldr	r0, [pc, #36]	@ (8008364 <_Bfree+0x40>)
 8008340:	f7ff fb48 	bl	80079d4 <__assert_func>
 8008344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008348:	6006      	str	r6, [r0, #0]
 800834a:	60c6      	str	r6, [r0, #12]
 800834c:	b13c      	cbz	r4, 800835e <_Bfree+0x3a>
 800834e:	69eb      	ldr	r3, [r5, #28]
 8008350:	6862      	ldr	r2, [r4, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008358:	6021      	str	r1, [r4, #0]
 800835a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800835e:	bd70      	pop	{r4, r5, r6, pc}
 8008360:	08009b10 	.word	0x08009b10
 8008364:	08009c36 	.word	0x08009c36

08008368 <__multadd>:
 8008368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836c:	4607      	mov	r7, r0
 800836e:	460c      	mov	r4, r1
 8008370:	461e      	mov	r6, r3
 8008372:	2000      	movs	r0, #0
 8008374:	690d      	ldr	r5, [r1, #16]
 8008376:	f101 0c14 	add.w	ip, r1, #20
 800837a:	f8dc 3000 	ldr.w	r3, [ip]
 800837e:	3001      	adds	r0, #1
 8008380:	b299      	uxth	r1, r3
 8008382:	fb02 6101 	mla	r1, r2, r1, r6
 8008386:	0c1e      	lsrs	r6, r3, #16
 8008388:	0c0b      	lsrs	r3, r1, #16
 800838a:	fb02 3306 	mla	r3, r2, r6, r3
 800838e:	b289      	uxth	r1, r1
 8008390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008394:	4285      	cmp	r5, r0
 8008396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800839a:	f84c 1b04 	str.w	r1, [ip], #4
 800839e:	dcec      	bgt.n	800837a <__multadd+0x12>
 80083a0:	b30e      	cbz	r6, 80083e6 <__multadd+0x7e>
 80083a2:	68a3      	ldr	r3, [r4, #8]
 80083a4:	42ab      	cmp	r3, r5
 80083a6:	dc19      	bgt.n	80083dc <__multadd+0x74>
 80083a8:	6861      	ldr	r1, [r4, #4]
 80083aa:	4638      	mov	r0, r7
 80083ac:	3101      	adds	r1, #1
 80083ae:	f7ff ff79 	bl	80082a4 <_Balloc>
 80083b2:	4680      	mov	r8, r0
 80083b4:	b928      	cbnz	r0, 80083c2 <__multadd+0x5a>
 80083b6:	4602      	mov	r2, r0
 80083b8:	21ba      	movs	r1, #186	@ 0xba
 80083ba:	4b0c      	ldr	r3, [pc, #48]	@ (80083ec <__multadd+0x84>)
 80083bc:	480c      	ldr	r0, [pc, #48]	@ (80083f0 <__multadd+0x88>)
 80083be:	f7ff fb09 	bl	80079d4 <__assert_func>
 80083c2:	6922      	ldr	r2, [r4, #16]
 80083c4:	f104 010c 	add.w	r1, r4, #12
 80083c8:	3202      	adds	r2, #2
 80083ca:	0092      	lsls	r2, r2, #2
 80083cc:	300c      	adds	r0, #12
 80083ce:	f7ff faec 	bl	80079aa <memcpy>
 80083d2:	4621      	mov	r1, r4
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff ffa5 	bl	8008324 <_Bfree>
 80083da:	4644      	mov	r4, r8
 80083dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083e0:	3501      	adds	r5, #1
 80083e2:	615e      	str	r6, [r3, #20]
 80083e4:	6125      	str	r5, [r4, #16]
 80083e6:	4620      	mov	r0, r4
 80083e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ec:	08009bc5 	.word	0x08009bc5
 80083f0:	08009c36 	.word	0x08009c36

080083f4 <__s2b>:
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	4615      	mov	r5, r2
 80083fa:	2209      	movs	r2, #9
 80083fc:	461f      	mov	r7, r3
 80083fe:	3308      	adds	r3, #8
 8008400:	460c      	mov	r4, r1
 8008402:	fb93 f3f2 	sdiv	r3, r3, r2
 8008406:	4606      	mov	r6, r0
 8008408:	2201      	movs	r2, #1
 800840a:	2100      	movs	r1, #0
 800840c:	429a      	cmp	r2, r3
 800840e:	db09      	blt.n	8008424 <__s2b+0x30>
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff ff47 	bl	80082a4 <_Balloc>
 8008416:	b940      	cbnz	r0, 800842a <__s2b+0x36>
 8008418:	4602      	mov	r2, r0
 800841a:	21d3      	movs	r1, #211	@ 0xd3
 800841c:	4b18      	ldr	r3, [pc, #96]	@ (8008480 <__s2b+0x8c>)
 800841e:	4819      	ldr	r0, [pc, #100]	@ (8008484 <__s2b+0x90>)
 8008420:	f7ff fad8 	bl	80079d4 <__assert_func>
 8008424:	0052      	lsls	r2, r2, #1
 8008426:	3101      	adds	r1, #1
 8008428:	e7f0      	b.n	800840c <__s2b+0x18>
 800842a:	9b08      	ldr	r3, [sp, #32]
 800842c:	2d09      	cmp	r5, #9
 800842e:	6143      	str	r3, [r0, #20]
 8008430:	f04f 0301 	mov.w	r3, #1
 8008434:	6103      	str	r3, [r0, #16]
 8008436:	dd16      	ble.n	8008466 <__s2b+0x72>
 8008438:	f104 0909 	add.w	r9, r4, #9
 800843c:	46c8      	mov	r8, r9
 800843e:	442c      	add	r4, r5
 8008440:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008444:	4601      	mov	r1, r0
 8008446:	220a      	movs	r2, #10
 8008448:	4630      	mov	r0, r6
 800844a:	3b30      	subs	r3, #48	@ 0x30
 800844c:	f7ff ff8c 	bl	8008368 <__multadd>
 8008450:	45a0      	cmp	r8, r4
 8008452:	d1f5      	bne.n	8008440 <__s2b+0x4c>
 8008454:	f1a5 0408 	sub.w	r4, r5, #8
 8008458:	444c      	add	r4, r9
 800845a:	1b2d      	subs	r5, r5, r4
 800845c:	1963      	adds	r3, r4, r5
 800845e:	42bb      	cmp	r3, r7
 8008460:	db04      	blt.n	800846c <__s2b+0x78>
 8008462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008466:	2509      	movs	r5, #9
 8008468:	340a      	adds	r4, #10
 800846a:	e7f6      	b.n	800845a <__s2b+0x66>
 800846c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008470:	4601      	mov	r1, r0
 8008472:	220a      	movs	r2, #10
 8008474:	4630      	mov	r0, r6
 8008476:	3b30      	subs	r3, #48	@ 0x30
 8008478:	f7ff ff76 	bl	8008368 <__multadd>
 800847c:	e7ee      	b.n	800845c <__s2b+0x68>
 800847e:	bf00      	nop
 8008480:	08009bc5 	.word	0x08009bc5
 8008484:	08009c36 	.word	0x08009c36

08008488 <__hi0bits>:
 8008488:	4603      	mov	r3, r0
 800848a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800848e:	bf3a      	itte	cc
 8008490:	0403      	lslcc	r3, r0, #16
 8008492:	2010      	movcc	r0, #16
 8008494:	2000      	movcs	r0, #0
 8008496:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800849a:	bf3c      	itt	cc
 800849c:	021b      	lslcc	r3, r3, #8
 800849e:	3008      	addcc	r0, #8
 80084a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084a4:	bf3c      	itt	cc
 80084a6:	011b      	lslcc	r3, r3, #4
 80084a8:	3004      	addcc	r0, #4
 80084aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ae:	bf3c      	itt	cc
 80084b0:	009b      	lslcc	r3, r3, #2
 80084b2:	3002      	addcc	r0, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	db05      	blt.n	80084c4 <__hi0bits+0x3c>
 80084b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80084bc:	f100 0001 	add.w	r0, r0, #1
 80084c0:	bf08      	it	eq
 80084c2:	2020      	moveq	r0, #32
 80084c4:	4770      	bx	lr

080084c6 <__lo0bits>:
 80084c6:	6803      	ldr	r3, [r0, #0]
 80084c8:	4602      	mov	r2, r0
 80084ca:	f013 0007 	ands.w	r0, r3, #7
 80084ce:	d00b      	beq.n	80084e8 <__lo0bits+0x22>
 80084d0:	07d9      	lsls	r1, r3, #31
 80084d2:	d421      	bmi.n	8008518 <__lo0bits+0x52>
 80084d4:	0798      	lsls	r0, r3, #30
 80084d6:	bf49      	itett	mi
 80084d8:	085b      	lsrmi	r3, r3, #1
 80084da:	089b      	lsrpl	r3, r3, #2
 80084dc:	2001      	movmi	r0, #1
 80084de:	6013      	strmi	r3, [r2, #0]
 80084e0:	bf5c      	itt	pl
 80084e2:	2002      	movpl	r0, #2
 80084e4:	6013      	strpl	r3, [r2, #0]
 80084e6:	4770      	bx	lr
 80084e8:	b299      	uxth	r1, r3
 80084ea:	b909      	cbnz	r1, 80084f0 <__lo0bits+0x2a>
 80084ec:	2010      	movs	r0, #16
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	b2d9      	uxtb	r1, r3
 80084f2:	b909      	cbnz	r1, 80084f8 <__lo0bits+0x32>
 80084f4:	3008      	adds	r0, #8
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	0719      	lsls	r1, r3, #28
 80084fa:	bf04      	itt	eq
 80084fc:	091b      	lsreq	r3, r3, #4
 80084fe:	3004      	addeq	r0, #4
 8008500:	0799      	lsls	r1, r3, #30
 8008502:	bf04      	itt	eq
 8008504:	089b      	lsreq	r3, r3, #2
 8008506:	3002      	addeq	r0, #2
 8008508:	07d9      	lsls	r1, r3, #31
 800850a:	d403      	bmi.n	8008514 <__lo0bits+0x4e>
 800850c:	085b      	lsrs	r3, r3, #1
 800850e:	f100 0001 	add.w	r0, r0, #1
 8008512:	d003      	beq.n	800851c <__lo0bits+0x56>
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	4770      	bx	lr
 8008518:	2000      	movs	r0, #0
 800851a:	4770      	bx	lr
 800851c:	2020      	movs	r0, #32
 800851e:	4770      	bx	lr

08008520 <__i2b>:
 8008520:	b510      	push	{r4, lr}
 8008522:	460c      	mov	r4, r1
 8008524:	2101      	movs	r1, #1
 8008526:	f7ff febd 	bl	80082a4 <_Balloc>
 800852a:	4602      	mov	r2, r0
 800852c:	b928      	cbnz	r0, 800853a <__i2b+0x1a>
 800852e:	f240 1145 	movw	r1, #325	@ 0x145
 8008532:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <__i2b+0x24>)
 8008534:	4804      	ldr	r0, [pc, #16]	@ (8008548 <__i2b+0x28>)
 8008536:	f7ff fa4d 	bl	80079d4 <__assert_func>
 800853a:	2301      	movs	r3, #1
 800853c:	6144      	str	r4, [r0, #20]
 800853e:	6103      	str	r3, [r0, #16]
 8008540:	bd10      	pop	{r4, pc}
 8008542:	bf00      	nop
 8008544:	08009bc5 	.word	0x08009bc5
 8008548:	08009c36 	.word	0x08009c36

0800854c <__multiply>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	4617      	mov	r7, r2
 8008552:	690a      	ldr	r2, [r1, #16]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4689      	mov	r9, r1
 8008558:	429a      	cmp	r2, r3
 800855a:	bfa2      	ittt	ge
 800855c:	463b      	movge	r3, r7
 800855e:	460f      	movge	r7, r1
 8008560:	4699      	movge	r9, r3
 8008562:	693d      	ldr	r5, [r7, #16]
 8008564:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	eb05 060a 	add.w	r6, r5, sl
 8008570:	42b3      	cmp	r3, r6
 8008572:	b085      	sub	sp, #20
 8008574:	bfb8      	it	lt
 8008576:	3101      	addlt	r1, #1
 8008578:	f7ff fe94 	bl	80082a4 <_Balloc>
 800857c:	b930      	cbnz	r0, 800858c <__multiply+0x40>
 800857e:	4602      	mov	r2, r0
 8008580:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008584:	4b40      	ldr	r3, [pc, #256]	@ (8008688 <__multiply+0x13c>)
 8008586:	4841      	ldr	r0, [pc, #260]	@ (800868c <__multiply+0x140>)
 8008588:	f7ff fa24 	bl	80079d4 <__assert_func>
 800858c:	f100 0414 	add.w	r4, r0, #20
 8008590:	4623      	mov	r3, r4
 8008592:	2200      	movs	r2, #0
 8008594:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008598:	4573      	cmp	r3, lr
 800859a:	d320      	bcc.n	80085de <__multiply+0x92>
 800859c:	f107 0814 	add.w	r8, r7, #20
 80085a0:	f109 0114 	add.w	r1, r9, #20
 80085a4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80085a8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80085ac:	9302      	str	r3, [sp, #8]
 80085ae:	1beb      	subs	r3, r5, r7
 80085b0:	3b15      	subs	r3, #21
 80085b2:	f023 0303 	bic.w	r3, r3, #3
 80085b6:	3304      	adds	r3, #4
 80085b8:	3715      	adds	r7, #21
 80085ba:	42bd      	cmp	r5, r7
 80085bc:	bf38      	it	cc
 80085be:	2304      	movcc	r3, #4
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	9103      	str	r1, [sp, #12]
 80085c6:	428b      	cmp	r3, r1
 80085c8:	d80c      	bhi.n	80085e4 <__multiply+0x98>
 80085ca:	2e00      	cmp	r6, #0
 80085cc:	dd03      	ble.n	80085d6 <__multiply+0x8a>
 80085ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d055      	beq.n	8008682 <__multiply+0x136>
 80085d6:	6106      	str	r6, [r0, #16]
 80085d8:	b005      	add	sp, #20
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	f843 2b04 	str.w	r2, [r3], #4
 80085e2:	e7d9      	b.n	8008598 <__multiply+0x4c>
 80085e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80085e8:	f1ba 0f00 	cmp.w	sl, #0
 80085ec:	d01f      	beq.n	800862e <__multiply+0xe2>
 80085ee:	46c4      	mov	ip, r8
 80085f0:	46a1      	mov	r9, r4
 80085f2:	2700      	movs	r7, #0
 80085f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085f8:	f8d9 3000 	ldr.w	r3, [r9]
 80085fc:	fa1f fb82 	uxth.w	fp, r2
 8008600:	b29b      	uxth	r3, r3
 8008602:	fb0a 330b 	mla	r3, sl, fp, r3
 8008606:	443b      	add	r3, r7
 8008608:	f8d9 7000 	ldr.w	r7, [r9]
 800860c:	0c12      	lsrs	r2, r2, #16
 800860e:	0c3f      	lsrs	r7, r7, #16
 8008610:	fb0a 7202 	mla	r2, sl, r2, r7
 8008614:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008618:	b29b      	uxth	r3, r3
 800861a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800861e:	4565      	cmp	r5, ip
 8008620:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008624:	f849 3b04 	str.w	r3, [r9], #4
 8008628:	d8e4      	bhi.n	80085f4 <__multiply+0xa8>
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	50e7      	str	r7, [r4, r3]
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	3104      	adds	r1, #4
 8008632:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008636:	f1b9 0f00 	cmp.w	r9, #0
 800863a:	d020      	beq.n	800867e <__multiply+0x132>
 800863c:	4647      	mov	r7, r8
 800863e:	46a4      	mov	ip, r4
 8008640:	f04f 0a00 	mov.w	sl, #0
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	f8b7 b000 	ldrh.w	fp, [r7]
 800864a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800864e:	b29b      	uxth	r3, r3
 8008650:	fb09 220b 	mla	r2, r9, fp, r2
 8008654:	4452      	add	r2, sl
 8008656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800865a:	f84c 3b04 	str.w	r3, [ip], #4
 800865e:	f857 3b04 	ldr.w	r3, [r7], #4
 8008662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008666:	f8bc 3000 	ldrh.w	r3, [ip]
 800866a:	42bd      	cmp	r5, r7
 800866c:	fb09 330a 	mla	r3, r9, sl, r3
 8008670:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008678:	d8e5      	bhi.n	8008646 <__multiply+0xfa>
 800867a:	9a01      	ldr	r2, [sp, #4]
 800867c:	50a3      	str	r3, [r4, r2]
 800867e:	3404      	adds	r4, #4
 8008680:	e79f      	b.n	80085c2 <__multiply+0x76>
 8008682:	3e01      	subs	r6, #1
 8008684:	e7a1      	b.n	80085ca <__multiply+0x7e>
 8008686:	bf00      	nop
 8008688:	08009bc5 	.word	0x08009bc5
 800868c:	08009c36 	.word	0x08009c36

08008690 <__pow5mult>:
 8008690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008694:	4615      	mov	r5, r2
 8008696:	f012 0203 	ands.w	r2, r2, #3
 800869a:	4607      	mov	r7, r0
 800869c:	460e      	mov	r6, r1
 800869e:	d007      	beq.n	80086b0 <__pow5mult+0x20>
 80086a0:	4c25      	ldr	r4, [pc, #148]	@ (8008738 <__pow5mult+0xa8>)
 80086a2:	3a01      	subs	r2, #1
 80086a4:	2300      	movs	r3, #0
 80086a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086aa:	f7ff fe5d 	bl	8008368 <__multadd>
 80086ae:	4606      	mov	r6, r0
 80086b0:	10ad      	asrs	r5, r5, #2
 80086b2:	d03d      	beq.n	8008730 <__pow5mult+0xa0>
 80086b4:	69fc      	ldr	r4, [r7, #28]
 80086b6:	b97c      	cbnz	r4, 80086d8 <__pow5mult+0x48>
 80086b8:	2010      	movs	r0, #16
 80086ba:	f7ff fd2b 	bl	8008114 <malloc>
 80086be:	4602      	mov	r2, r0
 80086c0:	61f8      	str	r0, [r7, #28]
 80086c2:	b928      	cbnz	r0, 80086d0 <__pow5mult+0x40>
 80086c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80086c8:	4b1c      	ldr	r3, [pc, #112]	@ (800873c <__pow5mult+0xac>)
 80086ca:	481d      	ldr	r0, [pc, #116]	@ (8008740 <__pow5mult+0xb0>)
 80086cc:	f7ff f982 	bl	80079d4 <__assert_func>
 80086d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086d4:	6004      	str	r4, [r0, #0]
 80086d6:	60c4      	str	r4, [r0, #12]
 80086d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80086dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086e0:	b94c      	cbnz	r4, 80086f6 <__pow5mult+0x66>
 80086e2:	f240 2171 	movw	r1, #625	@ 0x271
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ff1a 	bl	8008520 <__i2b>
 80086ec:	2300      	movs	r3, #0
 80086ee:	4604      	mov	r4, r0
 80086f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	f04f 0900 	mov.w	r9, #0
 80086fa:	07eb      	lsls	r3, r5, #31
 80086fc:	d50a      	bpl.n	8008714 <__pow5mult+0x84>
 80086fe:	4631      	mov	r1, r6
 8008700:	4622      	mov	r2, r4
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff ff22 	bl	800854c <__multiply>
 8008708:	4680      	mov	r8, r0
 800870a:	4631      	mov	r1, r6
 800870c:	4638      	mov	r0, r7
 800870e:	f7ff fe09 	bl	8008324 <_Bfree>
 8008712:	4646      	mov	r6, r8
 8008714:	106d      	asrs	r5, r5, #1
 8008716:	d00b      	beq.n	8008730 <__pow5mult+0xa0>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	b938      	cbnz	r0, 800872c <__pow5mult+0x9c>
 800871c:	4622      	mov	r2, r4
 800871e:	4621      	mov	r1, r4
 8008720:	4638      	mov	r0, r7
 8008722:	f7ff ff13 	bl	800854c <__multiply>
 8008726:	6020      	str	r0, [r4, #0]
 8008728:	f8c0 9000 	str.w	r9, [r0]
 800872c:	4604      	mov	r4, r0
 800872e:	e7e4      	b.n	80086fa <__pow5mult+0x6a>
 8008730:	4630      	mov	r0, r6
 8008732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008736:	bf00      	nop
 8008738:	08009e1c 	.word	0x08009e1c
 800873c:	08009b10 	.word	0x08009b10
 8008740:	08009c36 	.word	0x08009c36

08008744 <__lshift>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	460c      	mov	r4, r1
 800874a:	4607      	mov	r7, r0
 800874c:	4691      	mov	r9, r2
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	6849      	ldr	r1, [r1, #4]
 8008752:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008756:	68a3      	ldr	r3, [r4, #8]
 8008758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800875c:	f108 0601 	add.w	r6, r8, #1
 8008760:	42b3      	cmp	r3, r6
 8008762:	db0b      	blt.n	800877c <__lshift+0x38>
 8008764:	4638      	mov	r0, r7
 8008766:	f7ff fd9d 	bl	80082a4 <_Balloc>
 800876a:	4605      	mov	r5, r0
 800876c:	b948      	cbnz	r0, 8008782 <__lshift+0x3e>
 800876e:	4602      	mov	r2, r0
 8008770:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008774:	4b27      	ldr	r3, [pc, #156]	@ (8008814 <__lshift+0xd0>)
 8008776:	4828      	ldr	r0, [pc, #160]	@ (8008818 <__lshift+0xd4>)
 8008778:	f7ff f92c 	bl	80079d4 <__assert_func>
 800877c:	3101      	adds	r1, #1
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	e7ee      	b.n	8008760 <__lshift+0x1c>
 8008782:	2300      	movs	r3, #0
 8008784:	f100 0114 	add.w	r1, r0, #20
 8008788:	f100 0210 	add.w	r2, r0, #16
 800878c:	4618      	mov	r0, r3
 800878e:	4553      	cmp	r3, sl
 8008790:	db33      	blt.n	80087fa <__lshift+0xb6>
 8008792:	6920      	ldr	r0, [r4, #16]
 8008794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008798:	f104 0314 	add.w	r3, r4, #20
 800879c:	f019 091f 	ands.w	r9, r9, #31
 80087a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087a8:	d02b      	beq.n	8008802 <__lshift+0xbe>
 80087aa:	468a      	mov	sl, r1
 80087ac:	2200      	movs	r2, #0
 80087ae:	f1c9 0e20 	rsb	lr, r9, #32
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	fa00 f009 	lsl.w	r0, r0, r9
 80087b8:	4310      	orrs	r0, r2
 80087ba:	f84a 0b04 	str.w	r0, [sl], #4
 80087be:	f853 2b04 	ldr.w	r2, [r3], #4
 80087c2:	459c      	cmp	ip, r3
 80087c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80087c8:	d8f3      	bhi.n	80087b2 <__lshift+0x6e>
 80087ca:	ebac 0304 	sub.w	r3, ip, r4
 80087ce:	3b15      	subs	r3, #21
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	3304      	adds	r3, #4
 80087d6:	f104 0015 	add.w	r0, r4, #21
 80087da:	4560      	cmp	r0, ip
 80087dc:	bf88      	it	hi
 80087de:	2304      	movhi	r3, #4
 80087e0:	50ca      	str	r2, [r1, r3]
 80087e2:	b10a      	cbz	r2, 80087e8 <__lshift+0xa4>
 80087e4:	f108 0602 	add.w	r6, r8, #2
 80087e8:	3e01      	subs	r6, #1
 80087ea:	4638      	mov	r0, r7
 80087ec:	4621      	mov	r1, r4
 80087ee:	612e      	str	r6, [r5, #16]
 80087f0:	f7ff fd98 	bl	8008324 <_Bfree>
 80087f4:	4628      	mov	r0, r5
 80087f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80087fe:	3301      	adds	r3, #1
 8008800:	e7c5      	b.n	800878e <__lshift+0x4a>
 8008802:	3904      	subs	r1, #4
 8008804:	f853 2b04 	ldr.w	r2, [r3], #4
 8008808:	459c      	cmp	ip, r3
 800880a:	f841 2f04 	str.w	r2, [r1, #4]!
 800880e:	d8f9      	bhi.n	8008804 <__lshift+0xc0>
 8008810:	e7ea      	b.n	80087e8 <__lshift+0xa4>
 8008812:	bf00      	nop
 8008814:	08009bc5 	.word	0x08009bc5
 8008818:	08009c36 	.word	0x08009c36

0800881c <__mcmp>:
 800881c:	4603      	mov	r3, r0
 800881e:	690a      	ldr	r2, [r1, #16]
 8008820:	6900      	ldr	r0, [r0, #16]
 8008822:	b530      	push	{r4, r5, lr}
 8008824:	1a80      	subs	r0, r0, r2
 8008826:	d10e      	bne.n	8008846 <__mcmp+0x2a>
 8008828:	3314      	adds	r3, #20
 800882a:	3114      	adds	r1, #20
 800882c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008830:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008834:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008838:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800883c:	4295      	cmp	r5, r2
 800883e:	d003      	beq.n	8008848 <__mcmp+0x2c>
 8008840:	d205      	bcs.n	800884e <__mcmp+0x32>
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	bd30      	pop	{r4, r5, pc}
 8008848:	42a3      	cmp	r3, r4
 800884a:	d3f3      	bcc.n	8008834 <__mcmp+0x18>
 800884c:	e7fb      	b.n	8008846 <__mcmp+0x2a>
 800884e:	2001      	movs	r0, #1
 8008850:	e7f9      	b.n	8008846 <__mcmp+0x2a>
	...

08008854 <__mdiff>:
 8008854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	4689      	mov	r9, r1
 800885a:	4606      	mov	r6, r0
 800885c:	4611      	mov	r1, r2
 800885e:	4648      	mov	r0, r9
 8008860:	4614      	mov	r4, r2
 8008862:	f7ff ffdb 	bl	800881c <__mcmp>
 8008866:	1e05      	subs	r5, r0, #0
 8008868:	d112      	bne.n	8008890 <__mdiff+0x3c>
 800886a:	4629      	mov	r1, r5
 800886c:	4630      	mov	r0, r6
 800886e:	f7ff fd19 	bl	80082a4 <_Balloc>
 8008872:	4602      	mov	r2, r0
 8008874:	b928      	cbnz	r0, 8008882 <__mdiff+0x2e>
 8008876:	f240 2137 	movw	r1, #567	@ 0x237
 800887a:	4b3e      	ldr	r3, [pc, #248]	@ (8008974 <__mdiff+0x120>)
 800887c:	483e      	ldr	r0, [pc, #248]	@ (8008978 <__mdiff+0x124>)
 800887e:	f7ff f8a9 	bl	80079d4 <__assert_func>
 8008882:	2301      	movs	r3, #1
 8008884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008888:	4610      	mov	r0, r2
 800888a:	b003      	add	sp, #12
 800888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008890:	bfbc      	itt	lt
 8008892:	464b      	movlt	r3, r9
 8008894:	46a1      	movlt	r9, r4
 8008896:	4630      	mov	r0, r6
 8008898:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800889c:	bfba      	itte	lt
 800889e:	461c      	movlt	r4, r3
 80088a0:	2501      	movlt	r5, #1
 80088a2:	2500      	movge	r5, #0
 80088a4:	f7ff fcfe 	bl	80082a4 <_Balloc>
 80088a8:	4602      	mov	r2, r0
 80088aa:	b918      	cbnz	r0, 80088b4 <__mdiff+0x60>
 80088ac:	f240 2145 	movw	r1, #581	@ 0x245
 80088b0:	4b30      	ldr	r3, [pc, #192]	@ (8008974 <__mdiff+0x120>)
 80088b2:	e7e3      	b.n	800887c <__mdiff+0x28>
 80088b4:	f100 0b14 	add.w	fp, r0, #20
 80088b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80088bc:	f109 0310 	add.w	r3, r9, #16
 80088c0:	60c5      	str	r5, [r0, #12]
 80088c2:	f04f 0c00 	mov.w	ip, #0
 80088c6:	f109 0514 	add.w	r5, r9, #20
 80088ca:	46d9      	mov	r9, fp
 80088cc:	6926      	ldr	r6, [r4, #16]
 80088ce:	f104 0e14 	add.w	lr, r4, #20
 80088d2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80088d6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	9b01      	ldr	r3, [sp, #4]
 80088de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80088e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80088e6:	b281      	uxth	r1, r0
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	fa1f f38a 	uxth.w	r3, sl
 80088ee:	1a5b      	subs	r3, r3, r1
 80088f0:	0c00      	lsrs	r0, r0, #16
 80088f2:	4463      	add	r3, ip
 80088f4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80088f8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008902:	4576      	cmp	r6, lr
 8008904:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008908:	f849 3b04 	str.w	r3, [r9], #4
 800890c:	d8e6      	bhi.n	80088dc <__mdiff+0x88>
 800890e:	1b33      	subs	r3, r6, r4
 8008910:	3b15      	subs	r3, #21
 8008912:	f023 0303 	bic.w	r3, r3, #3
 8008916:	3415      	adds	r4, #21
 8008918:	3304      	adds	r3, #4
 800891a:	42a6      	cmp	r6, r4
 800891c:	bf38      	it	cc
 800891e:	2304      	movcc	r3, #4
 8008920:	441d      	add	r5, r3
 8008922:	445b      	add	r3, fp
 8008924:	461e      	mov	r6, r3
 8008926:	462c      	mov	r4, r5
 8008928:	4544      	cmp	r4, r8
 800892a:	d30e      	bcc.n	800894a <__mdiff+0xf6>
 800892c:	f108 0103 	add.w	r1, r8, #3
 8008930:	1b49      	subs	r1, r1, r5
 8008932:	f021 0103 	bic.w	r1, r1, #3
 8008936:	3d03      	subs	r5, #3
 8008938:	45a8      	cmp	r8, r5
 800893a:	bf38      	it	cc
 800893c:	2100      	movcc	r1, #0
 800893e:	440b      	add	r3, r1
 8008940:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008944:	b199      	cbz	r1, 800896e <__mdiff+0x11a>
 8008946:	6117      	str	r7, [r2, #16]
 8008948:	e79e      	b.n	8008888 <__mdiff+0x34>
 800894a:	46e6      	mov	lr, ip
 800894c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008950:	fa1f fc81 	uxth.w	ip, r1
 8008954:	44f4      	add	ip, lr
 8008956:	0c08      	lsrs	r0, r1, #16
 8008958:	4471      	add	r1, lr
 800895a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800895e:	b289      	uxth	r1, r1
 8008960:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008964:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008968:	f846 1b04 	str.w	r1, [r6], #4
 800896c:	e7dc      	b.n	8008928 <__mdiff+0xd4>
 800896e:	3f01      	subs	r7, #1
 8008970:	e7e6      	b.n	8008940 <__mdiff+0xec>
 8008972:	bf00      	nop
 8008974:	08009bc5 	.word	0x08009bc5
 8008978:	08009c36 	.word	0x08009c36

0800897c <__ulp>:
 800897c:	4b0e      	ldr	r3, [pc, #56]	@ (80089b8 <__ulp+0x3c>)
 800897e:	400b      	ands	r3, r1
 8008980:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008984:	2b00      	cmp	r3, #0
 8008986:	dc08      	bgt.n	800899a <__ulp+0x1e>
 8008988:	425b      	negs	r3, r3
 800898a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800898e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008992:	da04      	bge.n	800899e <__ulp+0x22>
 8008994:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008998:	4113      	asrs	r3, r2
 800899a:	2200      	movs	r2, #0
 800899c:	e008      	b.n	80089b0 <__ulp+0x34>
 800899e:	f1a2 0314 	sub.w	r3, r2, #20
 80089a2:	2b1e      	cmp	r3, #30
 80089a4:	bfd6      	itet	le
 80089a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80089aa:	2201      	movgt	r2, #1
 80089ac:	40da      	lsrle	r2, r3
 80089ae:	2300      	movs	r3, #0
 80089b0:	4619      	mov	r1, r3
 80089b2:	4610      	mov	r0, r2
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	7ff00000 	.word	0x7ff00000

080089bc <__b2d>:
 80089bc:	6902      	ldr	r2, [r0, #16]
 80089be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c0:	f100 0614 	add.w	r6, r0, #20
 80089c4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80089c8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80089cc:	4f1e      	ldr	r7, [pc, #120]	@ (8008a48 <__b2d+0x8c>)
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff fd5a 	bl	8008488 <__hi0bits>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f1c0 0020 	rsb	r0, r0, #32
 80089da:	2b0a      	cmp	r3, #10
 80089dc:	f1a2 0504 	sub.w	r5, r2, #4
 80089e0:	6008      	str	r0, [r1, #0]
 80089e2:	dc12      	bgt.n	8008a0a <__b2d+0x4e>
 80089e4:	42ae      	cmp	r6, r5
 80089e6:	bf2c      	ite	cs
 80089e8:	2200      	movcs	r2, #0
 80089ea:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80089ee:	f1c3 0c0b 	rsb	ip, r3, #11
 80089f2:	3315      	adds	r3, #21
 80089f4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80089f8:	fa04 f303 	lsl.w	r3, r4, r3
 80089fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8008a00:	ea4e 0107 	orr.w	r1, lr, r7
 8008a04:	431a      	orrs	r2, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0a:	42ae      	cmp	r6, r5
 8008a0c:	bf36      	itet	cc
 8008a0e:	f1a2 0508 	subcc.w	r5, r2, #8
 8008a12:	2200      	movcs	r2, #0
 8008a14:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008a18:	3b0b      	subs	r3, #11
 8008a1a:	d012      	beq.n	8008a42 <__b2d+0x86>
 8008a1c:	f1c3 0720 	rsb	r7, r3, #32
 8008a20:	fa22 f107 	lsr.w	r1, r2, r7
 8008a24:	409c      	lsls	r4, r3
 8008a26:	430c      	orrs	r4, r1
 8008a28:	42b5      	cmp	r5, r6
 8008a2a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008a2e:	bf94      	ite	ls
 8008a30:	2400      	movls	r4, #0
 8008a32:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008a36:	409a      	lsls	r2, r3
 8008a38:	40fc      	lsrs	r4, r7
 8008a3a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008a3e:	4322      	orrs	r2, r4
 8008a40:	e7e1      	b.n	8008a06 <__b2d+0x4a>
 8008a42:	ea44 0107 	orr.w	r1, r4, r7
 8008a46:	e7de      	b.n	8008a06 <__b2d+0x4a>
 8008a48:	3ff00000 	.word	0x3ff00000

08008a4c <__d2b>:
 8008a4c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008a50:	2101      	movs	r1, #1
 8008a52:	4690      	mov	r8, r2
 8008a54:	4699      	mov	r9, r3
 8008a56:	9e08      	ldr	r6, [sp, #32]
 8008a58:	f7ff fc24 	bl	80082a4 <_Balloc>
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	b930      	cbnz	r0, 8008a6e <__d2b+0x22>
 8008a60:	4602      	mov	r2, r0
 8008a62:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a66:	4b23      	ldr	r3, [pc, #140]	@ (8008af4 <__d2b+0xa8>)
 8008a68:	4823      	ldr	r0, [pc, #140]	@ (8008af8 <__d2b+0xac>)
 8008a6a:	f7fe ffb3 	bl	80079d4 <__assert_func>
 8008a6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a76:	b10d      	cbz	r5, 8008a7c <__d2b+0x30>
 8008a78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	f1b8 0300 	subs.w	r3, r8, #0
 8008a82:	d024      	beq.n	8008ace <__d2b+0x82>
 8008a84:	4668      	mov	r0, sp
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	f7ff fd1d 	bl	80084c6 <__lo0bits>
 8008a8c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a90:	b1d8      	cbz	r0, 8008aca <__d2b+0x7e>
 8008a92:	f1c0 0320 	rsb	r3, r0, #32
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	40c2      	lsrs	r2, r0
 8008a9e:	6163      	str	r3, [r4, #20]
 8008aa0:	9201      	str	r2, [sp, #4]
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bf0c      	ite	eq
 8008aa8:	2201      	moveq	r2, #1
 8008aaa:	2202      	movne	r2, #2
 8008aac:	61a3      	str	r3, [r4, #24]
 8008aae:	6122      	str	r2, [r4, #16]
 8008ab0:	b1ad      	cbz	r5, 8008ade <__d2b+0x92>
 8008ab2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ab6:	4405      	add	r5, r0
 8008ab8:	6035      	str	r5, [r6, #0]
 8008aba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac0:	6018      	str	r0, [r3, #0]
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	b002      	add	sp, #8
 8008ac6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008aca:	6161      	str	r1, [r4, #20]
 8008acc:	e7e9      	b.n	8008aa2 <__d2b+0x56>
 8008ace:	a801      	add	r0, sp, #4
 8008ad0:	f7ff fcf9 	bl	80084c6 <__lo0bits>
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	6163      	str	r3, [r4, #20]
 8008ada:	3020      	adds	r0, #32
 8008adc:	e7e7      	b.n	8008aae <__d2b+0x62>
 8008ade:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ae2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ae6:	6030      	str	r0, [r6, #0]
 8008ae8:	6918      	ldr	r0, [r3, #16]
 8008aea:	f7ff fccd 	bl	8008488 <__hi0bits>
 8008aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008af2:	e7e4      	b.n	8008abe <__d2b+0x72>
 8008af4:	08009bc5 	.word	0x08009bc5
 8008af8:	08009c36 	.word	0x08009c36

08008afc <__ratio>:
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	b085      	sub	sp, #20
 8008b02:	e9cd 1000 	strd	r1, r0, [sp]
 8008b06:	a902      	add	r1, sp, #8
 8008b08:	f7ff ff58 	bl	80089bc <__b2d>
 8008b0c:	468b      	mov	fp, r1
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460f      	mov	r7, r1
 8008b12:	9800      	ldr	r0, [sp, #0]
 8008b14:	a903      	add	r1, sp, #12
 8008b16:	f7ff ff51 	bl	80089bc <__b2d>
 8008b1a:	460d      	mov	r5, r1
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	4689      	mov	r9, r1
 8008b20:	6919      	ldr	r1, [r3, #16]
 8008b22:	9b00      	ldr	r3, [sp, #0]
 8008b24:	4604      	mov	r4, r0
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	4630      	mov	r0, r6
 8008b2a:	1ac9      	subs	r1, r1, r3
 8008b2c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008b30:	1a9b      	subs	r3, r3, r2
 8008b32:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bfcd      	iteet	gt
 8008b3a:	463a      	movgt	r2, r7
 8008b3c:	462a      	movle	r2, r5
 8008b3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b42:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008b46:	bfd8      	it	le
 8008b48:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	4622      	mov	r2, r4
 8008b50:	4659      	mov	r1, fp
 8008b52:	f7f7 fe9f 	bl	8000894 <__aeabi_ddiv>
 8008b56:	b005      	add	sp, #20
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b5c <__copybits>:
 8008b5c:	3901      	subs	r1, #1
 8008b5e:	b570      	push	{r4, r5, r6, lr}
 8008b60:	1149      	asrs	r1, r1, #5
 8008b62:	6914      	ldr	r4, [r2, #16]
 8008b64:	3101      	adds	r1, #1
 8008b66:	f102 0314 	add.w	r3, r2, #20
 8008b6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b72:	1f05      	subs	r5, r0, #4
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	d30c      	bcc.n	8008b92 <__copybits+0x36>
 8008b78:	1aa3      	subs	r3, r4, r2
 8008b7a:	3b11      	subs	r3, #17
 8008b7c:	f023 0303 	bic.w	r3, r3, #3
 8008b80:	3211      	adds	r2, #17
 8008b82:	42a2      	cmp	r2, r4
 8008b84:	bf88      	it	hi
 8008b86:	2300      	movhi	r3, #0
 8008b88:	4418      	add	r0, r3
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4288      	cmp	r0, r1
 8008b8e:	d305      	bcc.n	8008b9c <__copybits+0x40>
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b96:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b9a:	e7eb      	b.n	8008b74 <__copybits+0x18>
 8008b9c:	f840 3b04 	str.w	r3, [r0], #4
 8008ba0:	e7f4      	b.n	8008b8c <__copybits+0x30>

08008ba2 <__any_on>:
 8008ba2:	f100 0214 	add.w	r2, r0, #20
 8008ba6:	6900      	ldr	r0, [r0, #16]
 8008ba8:	114b      	asrs	r3, r1, #5
 8008baa:	4298      	cmp	r0, r3
 8008bac:	b510      	push	{r4, lr}
 8008bae:	db11      	blt.n	8008bd4 <__any_on+0x32>
 8008bb0:	dd0a      	ble.n	8008bc8 <__any_on+0x26>
 8008bb2:	f011 011f 	ands.w	r1, r1, #31
 8008bb6:	d007      	beq.n	8008bc8 <__any_on+0x26>
 8008bb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bbc:	fa24 f001 	lsr.w	r0, r4, r1
 8008bc0:	fa00 f101 	lsl.w	r1, r0, r1
 8008bc4:	428c      	cmp	r4, r1
 8008bc6:	d10b      	bne.n	8008be0 <__any_on+0x3e>
 8008bc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d803      	bhi.n	8008bd8 <__any_on+0x36>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	bd10      	pop	{r4, pc}
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	e7f7      	b.n	8008bc8 <__any_on+0x26>
 8008bd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	d0f5      	beq.n	8008bcc <__any_on+0x2a>
 8008be0:	2001      	movs	r0, #1
 8008be2:	e7f6      	b.n	8008bd2 <__any_on+0x30>

08008be4 <__ascii_wctomb>:
 8008be4:	4603      	mov	r3, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	b141      	cbz	r1, 8008bfc <__ascii_wctomb+0x18>
 8008bea:	2aff      	cmp	r2, #255	@ 0xff
 8008bec:	d904      	bls.n	8008bf8 <__ascii_wctomb+0x14>
 8008bee:	228a      	movs	r2, #138	@ 0x8a
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	4770      	bx	lr
 8008bf8:	2001      	movs	r0, #1
 8008bfa:	700a      	strb	r2, [r1, #0]
 8008bfc:	4770      	bx	lr

08008bfe <__ssputs_r>:
 8008bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c02:	461f      	mov	r7, r3
 8008c04:	688e      	ldr	r6, [r1, #8]
 8008c06:	4682      	mov	sl, r0
 8008c08:	42be      	cmp	r6, r7
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	4690      	mov	r8, r2
 8008c0e:	680b      	ldr	r3, [r1, #0]
 8008c10:	d82d      	bhi.n	8008c6e <__ssputs_r+0x70>
 8008c12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c16:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c1a:	d026      	beq.n	8008c6a <__ssputs_r+0x6c>
 8008c1c:	6965      	ldr	r5, [r4, #20]
 8008c1e:	6909      	ldr	r1, [r1, #16]
 8008c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c24:	eba3 0901 	sub.w	r9, r3, r1
 8008c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c2c:	1c7b      	adds	r3, r7, #1
 8008c2e:	444b      	add	r3, r9
 8008c30:	106d      	asrs	r5, r5, #1
 8008c32:	429d      	cmp	r5, r3
 8008c34:	bf38      	it	cc
 8008c36:	461d      	movcc	r5, r3
 8008c38:	0553      	lsls	r3, r2, #21
 8008c3a:	d527      	bpl.n	8008c8c <__ssputs_r+0x8e>
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7ff fa93 	bl	8008168 <_malloc_r>
 8008c42:	4606      	mov	r6, r0
 8008c44:	b360      	cbz	r0, 8008ca0 <__ssputs_r+0xa2>
 8008c46:	464a      	mov	r2, r9
 8008c48:	6921      	ldr	r1, [r4, #16]
 8008c4a:	f7fe feae 	bl	80079aa <memcpy>
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	6126      	str	r6, [r4, #16]
 8008c5c:	444e      	add	r6, r9
 8008c5e:	6026      	str	r6, [r4, #0]
 8008c60:	463e      	mov	r6, r7
 8008c62:	6165      	str	r5, [r4, #20]
 8008c64:	eba5 0509 	sub.w	r5, r5, r9
 8008c68:	60a5      	str	r5, [r4, #8]
 8008c6a:	42be      	cmp	r6, r7
 8008c6c:	d900      	bls.n	8008c70 <__ssputs_r+0x72>
 8008c6e:	463e      	mov	r6, r7
 8008c70:	4632      	mov	r2, r6
 8008c72:	4641      	mov	r1, r8
 8008c74:	6820      	ldr	r0, [r4, #0]
 8008c76:	f000 fb63 	bl	8009340 <memmove>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	68a3      	ldr	r3, [r4, #8]
 8008c7e:	1b9b      	subs	r3, r3, r6
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	4433      	add	r3, r6
 8008c86:	6023      	str	r3, [r4, #0]
 8008c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	f000 fbaa 	bl	80093e6 <_realloc_r>
 8008c92:	4606      	mov	r6, r0
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d1e0      	bne.n	8008c5a <__ssputs_r+0x5c>
 8008c98:	4650      	mov	r0, sl
 8008c9a:	6921      	ldr	r1, [r4, #16]
 8008c9c:	f7fe feb8 	bl	8007a10 <_free_r>
 8008ca0:	230c      	movs	r3, #12
 8008ca2:	f8ca 3000 	str.w	r3, [sl]
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	e7e9      	b.n	8008c88 <__ssputs_r+0x8a>

08008cb4 <_svfiprintf_r>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	4698      	mov	r8, r3
 8008cba:	898b      	ldrh	r3, [r1, #12]
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	b09d      	sub	sp, #116	@ 0x74
 8008cc6:	d510      	bpl.n	8008cea <_svfiprintf_r+0x36>
 8008cc8:	690b      	ldr	r3, [r1, #16]
 8008cca:	b973      	cbnz	r3, 8008cea <_svfiprintf_r+0x36>
 8008ccc:	2140      	movs	r1, #64	@ 0x40
 8008cce:	f7ff fa4b 	bl	8008168 <_malloc_r>
 8008cd2:	6028      	str	r0, [r5, #0]
 8008cd4:	6128      	str	r0, [r5, #16]
 8008cd6:	b930      	cbnz	r0, 8008ce6 <_svfiprintf_r+0x32>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	b01d      	add	sp, #116	@ 0x74
 8008ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce6:	2340      	movs	r3, #64	@ 0x40
 8008ce8:	616b      	str	r3, [r5, #20]
 8008cea:	2300      	movs	r3, #0
 8008cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cee:	2320      	movs	r3, #32
 8008cf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cf4:	2330      	movs	r3, #48	@ 0x30
 8008cf6:	f04f 0901 	mov.w	r9, #1
 8008cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008e98 <_svfiprintf_r+0x1e4>
 8008d02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d06:	4623      	mov	r3, r4
 8008d08:	469a      	mov	sl, r3
 8008d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0e:	b10a      	cbz	r2, 8008d14 <_svfiprintf_r+0x60>
 8008d10:	2a25      	cmp	r2, #37	@ 0x25
 8008d12:	d1f9      	bne.n	8008d08 <_svfiprintf_r+0x54>
 8008d14:	ebba 0b04 	subs.w	fp, sl, r4
 8008d18:	d00b      	beq.n	8008d32 <_svfiprintf_r+0x7e>
 8008d1a:	465b      	mov	r3, fp
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	4638      	mov	r0, r7
 8008d22:	f7ff ff6c 	bl	8008bfe <__ssputs_r>
 8008d26:	3001      	adds	r0, #1
 8008d28:	f000 80a7 	beq.w	8008e7a <_svfiprintf_r+0x1c6>
 8008d2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d2e:	445a      	add	r2, fp
 8008d30:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d32:	f89a 3000 	ldrb.w	r3, [sl]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 809f 	beq.w	8008e7a <_svfiprintf_r+0x1c6>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d46:	f10a 0a01 	add.w	sl, sl, #1
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	9307      	str	r3, [sp, #28]
 8008d4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d52:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d54:	4654      	mov	r4, sl
 8008d56:	2205      	movs	r2, #5
 8008d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5c:	484e      	ldr	r0, [pc, #312]	@ (8008e98 <_svfiprintf_r+0x1e4>)
 8008d5e:	f000 fb19 	bl	8009394 <memchr>
 8008d62:	9a04      	ldr	r2, [sp, #16]
 8008d64:	b9d8      	cbnz	r0, 8008d9e <_svfiprintf_r+0xea>
 8008d66:	06d0      	lsls	r0, r2, #27
 8008d68:	bf44      	itt	mi
 8008d6a:	2320      	movmi	r3, #32
 8008d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d70:	0711      	lsls	r1, r2, #28
 8008d72:	bf44      	itt	mi
 8008d74:	232b      	movmi	r3, #43	@ 0x2b
 8008d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d80:	d015      	beq.n	8008dae <_svfiprintf_r+0xfa>
 8008d82:	4654      	mov	r4, sl
 8008d84:	2000      	movs	r0, #0
 8008d86:	f04f 0c0a 	mov.w	ip, #10
 8008d8a:	9a07      	ldr	r2, [sp, #28]
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d92:	3b30      	subs	r3, #48	@ 0x30
 8008d94:	2b09      	cmp	r3, #9
 8008d96:	d94b      	bls.n	8008e30 <_svfiprintf_r+0x17c>
 8008d98:	b1b0      	cbz	r0, 8008dc8 <_svfiprintf_r+0x114>
 8008d9a:	9207      	str	r2, [sp, #28]
 8008d9c:	e014      	b.n	8008dc8 <_svfiprintf_r+0x114>
 8008d9e:	eba0 0308 	sub.w	r3, r0, r8
 8008da2:	fa09 f303 	lsl.w	r3, r9, r3
 8008da6:	4313      	orrs	r3, r2
 8008da8:	46a2      	mov	sl, r4
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	e7d2      	b.n	8008d54 <_svfiprintf_r+0xa0>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	1d19      	adds	r1, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9103      	str	r1, [sp, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfbb      	ittet	lt
 8008dba:	425b      	neglt	r3, r3
 8008dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc0:	9307      	strge	r3, [sp, #28]
 8008dc2:	9307      	strlt	r3, [sp, #28]
 8008dc4:	bfb8      	it	lt
 8008dc6:	9204      	strlt	r2, [sp, #16]
 8008dc8:	7823      	ldrb	r3, [r4, #0]
 8008dca:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dcc:	d10a      	bne.n	8008de4 <_svfiprintf_r+0x130>
 8008dce:	7863      	ldrb	r3, [r4, #1]
 8008dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd2:	d132      	bne.n	8008e3a <_svfiprintf_r+0x186>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	3402      	adds	r4, #2
 8008dd8:	1d1a      	adds	r2, r3, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	9203      	str	r2, [sp, #12]
 8008dde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008e9c <_svfiprintf_r+0x1e8>
 8008de8:	2203      	movs	r2, #3
 8008dea:	4650      	mov	r0, sl
 8008dec:	7821      	ldrb	r1, [r4, #0]
 8008dee:	f000 fad1 	bl	8009394 <memchr>
 8008df2:	b138      	cbz	r0, 8008e04 <_svfiprintf_r+0x150>
 8008df4:	2240      	movs	r2, #64	@ 0x40
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	eba0 000a 	sub.w	r0, r0, sl
 8008dfc:	4082      	lsls	r2, r0
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	3401      	adds	r4, #1
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e08:	2206      	movs	r2, #6
 8008e0a:	4825      	ldr	r0, [pc, #148]	@ (8008ea0 <_svfiprintf_r+0x1ec>)
 8008e0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e10:	f000 fac0 	bl	8009394 <memchr>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d036      	beq.n	8008e86 <_svfiprintf_r+0x1d2>
 8008e18:	4b22      	ldr	r3, [pc, #136]	@ (8008ea4 <_svfiprintf_r+0x1f0>)
 8008e1a:	bb1b      	cbnz	r3, 8008e64 <_svfiprintf_r+0x1b0>
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	3307      	adds	r3, #7
 8008e20:	f023 0307 	bic.w	r3, r3, #7
 8008e24:	3308      	adds	r3, #8
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2a:	4433      	add	r3, r6
 8008e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2e:	e76a      	b.n	8008d06 <_svfiprintf_r+0x52>
 8008e30:	460c      	mov	r4, r1
 8008e32:	2001      	movs	r0, #1
 8008e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e38:	e7a8      	b.n	8008d8c <_svfiprintf_r+0xd8>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f04f 0c0a 	mov.w	ip, #10
 8008e40:	4619      	mov	r1, r3
 8008e42:	3401      	adds	r4, #1
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	4620      	mov	r0, r4
 8008e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4c:	3a30      	subs	r2, #48	@ 0x30
 8008e4e:	2a09      	cmp	r2, #9
 8008e50:	d903      	bls.n	8008e5a <_svfiprintf_r+0x1a6>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0c6      	beq.n	8008de4 <_svfiprintf_r+0x130>
 8008e56:	9105      	str	r1, [sp, #20]
 8008e58:	e7c4      	b.n	8008de4 <_svfiprintf_r+0x130>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e62:	e7f0      	b.n	8008e46 <_svfiprintf_r+0x192>
 8008e64:	ab03      	add	r3, sp, #12
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	462a      	mov	r2, r5
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea8 <_svfiprintf_r+0x1f4>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	f3af 8000 	nop.w
 8008e74:	1c42      	adds	r2, r0, #1
 8008e76:	4606      	mov	r6, r0
 8008e78:	d1d6      	bne.n	8008e28 <_svfiprintf_r+0x174>
 8008e7a:	89ab      	ldrh	r3, [r5, #12]
 8008e7c:	065b      	lsls	r3, r3, #25
 8008e7e:	f53f af2d 	bmi.w	8008cdc <_svfiprintf_r+0x28>
 8008e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e84:	e72c      	b.n	8008ce0 <_svfiprintf_r+0x2c>
 8008e86:	ab03      	add	r3, sp, #12
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <_svfiprintf_r+0x1f4>)
 8008e90:	a904      	add	r1, sp, #16
 8008e92:	f000 f87d 	bl	8008f90 <_printf_i>
 8008e96:	e7ed      	b.n	8008e74 <_svfiprintf_r+0x1c0>
 8008e98:	08009c8f 	.word	0x08009c8f
 8008e9c:	08009c95 	.word	0x08009c95
 8008ea0:	08009c99 	.word	0x08009c99
 8008ea4:	00000000 	.word	0x00000000
 8008ea8:	08008bff 	.word	0x08008bff

08008eac <_printf_common>:
 8008eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	4698      	mov	r8, r3
 8008eb4:	688a      	ldr	r2, [r1, #8]
 8008eb6:	690b      	ldr	r3, [r1, #16]
 8008eb8:	4607      	mov	r7, r0
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	bfb8      	it	lt
 8008ebe:	4613      	movlt	r3, r2
 8008ec0:	6033      	str	r3, [r6, #0]
 8008ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ecc:	b10a      	cbz	r2, 8008ed2 <_printf_common+0x26>
 8008ece:	3301      	adds	r3, #1
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	0699      	lsls	r1, r3, #26
 8008ed6:	bf42      	ittt	mi
 8008ed8:	6833      	ldrmi	r3, [r6, #0]
 8008eda:	3302      	addmi	r3, #2
 8008edc:	6033      	strmi	r3, [r6, #0]
 8008ede:	6825      	ldr	r5, [r4, #0]
 8008ee0:	f015 0506 	ands.w	r5, r5, #6
 8008ee4:	d106      	bne.n	8008ef4 <_printf_common+0x48>
 8008ee6:	f104 0a19 	add.w	sl, r4, #25
 8008eea:	68e3      	ldr	r3, [r4, #12]
 8008eec:	6832      	ldr	r2, [r6, #0]
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dc2b      	bgt.n	8008f4c <_printf_common+0xa0>
 8008ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ef8:	6822      	ldr	r2, [r4, #0]
 8008efa:	3b00      	subs	r3, #0
 8008efc:	bf18      	it	ne
 8008efe:	2301      	movne	r3, #1
 8008f00:	0692      	lsls	r2, r2, #26
 8008f02:	d430      	bmi.n	8008f66 <_printf_common+0xba>
 8008f04:	4641      	mov	r1, r8
 8008f06:	4638      	mov	r0, r7
 8008f08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f0c:	47c8      	blx	r9
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d023      	beq.n	8008f5a <_printf_common+0xae>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	6922      	ldr	r2, [r4, #16]
 8008f16:	f003 0306 	and.w	r3, r3, #6
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	bf14      	ite	ne
 8008f1e:	2500      	movne	r5, #0
 8008f20:	6833      	ldreq	r3, [r6, #0]
 8008f22:	f04f 0600 	mov.w	r6, #0
 8008f26:	bf08      	it	eq
 8008f28:	68e5      	ldreq	r5, [r4, #12]
 8008f2a:	f104 041a 	add.w	r4, r4, #26
 8008f2e:	bf08      	it	eq
 8008f30:	1aed      	subeq	r5, r5, r3
 8008f32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008f36:	bf08      	it	eq
 8008f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	bfc4      	itt	gt
 8008f40:	1a9b      	subgt	r3, r3, r2
 8008f42:	18ed      	addgt	r5, r5, r3
 8008f44:	42b5      	cmp	r5, r6
 8008f46:	d11a      	bne.n	8008f7e <_printf_common+0xd2>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e008      	b.n	8008f5e <_printf_common+0xb2>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4652      	mov	r2, sl
 8008f50:	4641      	mov	r1, r8
 8008f52:	4638      	mov	r0, r7
 8008f54:	47c8      	blx	r9
 8008f56:	3001      	adds	r0, #1
 8008f58:	d103      	bne.n	8008f62 <_printf_common+0xb6>
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f62:	3501      	adds	r5, #1
 8008f64:	e7c1      	b.n	8008eea <_printf_common+0x3e>
 8008f66:	2030      	movs	r0, #48	@ 0x30
 8008f68:	18e1      	adds	r1, r4, r3
 8008f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f74:	4422      	add	r2, r4
 8008f76:	3302      	adds	r3, #2
 8008f78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f7c:	e7c2      	b.n	8008f04 <_printf_common+0x58>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	4622      	mov	r2, r4
 8008f82:	4641      	mov	r1, r8
 8008f84:	4638      	mov	r0, r7
 8008f86:	47c8      	blx	r9
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d0e6      	beq.n	8008f5a <_printf_common+0xae>
 8008f8c:	3601      	adds	r6, #1
 8008f8e:	e7d9      	b.n	8008f44 <_printf_common+0x98>

08008f90 <_printf_i>:
 8008f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f94:	7e0f      	ldrb	r7, [r1, #24]
 8008f96:	4691      	mov	r9, r2
 8008f98:	2f78      	cmp	r7, #120	@ 0x78
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	469a      	mov	sl, r3
 8008fa0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fa6:	d807      	bhi.n	8008fb8 <_printf_i+0x28>
 8008fa8:	2f62      	cmp	r7, #98	@ 0x62
 8008faa:	d80a      	bhi.n	8008fc2 <_printf_i+0x32>
 8008fac:	2f00      	cmp	r7, #0
 8008fae:	f000 80d1 	beq.w	8009154 <_printf_i+0x1c4>
 8008fb2:	2f58      	cmp	r7, #88	@ 0x58
 8008fb4:	f000 80b8 	beq.w	8009128 <_printf_i+0x198>
 8008fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fc0:	e03a      	b.n	8009038 <_printf_i+0xa8>
 8008fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fc6:	2b15      	cmp	r3, #21
 8008fc8:	d8f6      	bhi.n	8008fb8 <_printf_i+0x28>
 8008fca:	a101      	add	r1, pc, #4	@ (adr r1, 8008fd0 <_printf_i+0x40>)
 8008fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd0:	08009029 	.word	0x08009029
 8008fd4:	0800903d 	.word	0x0800903d
 8008fd8:	08008fb9 	.word	0x08008fb9
 8008fdc:	08008fb9 	.word	0x08008fb9
 8008fe0:	08008fb9 	.word	0x08008fb9
 8008fe4:	08008fb9 	.word	0x08008fb9
 8008fe8:	0800903d 	.word	0x0800903d
 8008fec:	08008fb9 	.word	0x08008fb9
 8008ff0:	08008fb9 	.word	0x08008fb9
 8008ff4:	08008fb9 	.word	0x08008fb9
 8008ff8:	08008fb9 	.word	0x08008fb9
 8008ffc:	0800913b 	.word	0x0800913b
 8009000:	08009067 	.word	0x08009067
 8009004:	080090f5 	.word	0x080090f5
 8009008:	08008fb9 	.word	0x08008fb9
 800900c:	08008fb9 	.word	0x08008fb9
 8009010:	0800915d 	.word	0x0800915d
 8009014:	08008fb9 	.word	0x08008fb9
 8009018:	08009067 	.word	0x08009067
 800901c:	08008fb9 	.word	0x08008fb9
 8009020:	08008fb9 	.word	0x08008fb9
 8009024:	080090fd 	.word	0x080090fd
 8009028:	6833      	ldr	r3, [r6, #0]
 800902a:	1d1a      	adds	r2, r3, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6032      	str	r2, [r6, #0]
 8009030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009038:	2301      	movs	r3, #1
 800903a:	e09c      	b.n	8009176 <_printf_i+0x1e6>
 800903c:	6833      	ldr	r3, [r6, #0]
 800903e:	6820      	ldr	r0, [r4, #0]
 8009040:	1d19      	adds	r1, r3, #4
 8009042:	6031      	str	r1, [r6, #0]
 8009044:	0606      	lsls	r6, r0, #24
 8009046:	d501      	bpl.n	800904c <_printf_i+0xbc>
 8009048:	681d      	ldr	r5, [r3, #0]
 800904a:	e003      	b.n	8009054 <_printf_i+0xc4>
 800904c:	0645      	lsls	r5, r0, #25
 800904e:	d5fb      	bpl.n	8009048 <_printf_i+0xb8>
 8009050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009054:	2d00      	cmp	r5, #0
 8009056:	da03      	bge.n	8009060 <_printf_i+0xd0>
 8009058:	232d      	movs	r3, #45	@ 0x2d
 800905a:	426d      	negs	r5, r5
 800905c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009060:	230a      	movs	r3, #10
 8009062:	4858      	ldr	r0, [pc, #352]	@ (80091c4 <_printf_i+0x234>)
 8009064:	e011      	b.n	800908a <_printf_i+0xfa>
 8009066:	6821      	ldr	r1, [r4, #0]
 8009068:	6833      	ldr	r3, [r6, #0]
 800906a:	0608      	lsls	r0, r1, #24
 800906c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009070:	d402      	bmi.n	8009078 <_printf_i+0xe8>
 8009072:	0649      	lsls	r1, r1, #25
 8009074:	bf48      	it	mi
 8009076:	b2ad      	uxthmi	r5, r5
 8009078:	2f6f      	cmp	r7, #111	@ 0x6f
 800907a:	6033      	str	r3, [r6, #0]
 800907c:	bf14      	ite	ne
 800907e:	230a      	movne	r3, #10
 8009080:	2308      	moveq	r3, #8
 8009082:	4850      	ldr	r0, [pc, #320]	@ (80091c4 <_printf_i+0x234>)
 8009084:	2100      	movs	r1, #0
 8009086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800908a:	6866      	ldr	r6, [r4, #4]
 800908c:	2e00      	cmp	r6, #0
 800908e:	60a6      	str	r6, [r4, #8]
 8009090:	db05      	blt.n	800909e <_printf_i+0x10e>
 8009092:	6821      	ldr	r1, [r4, #0]
 8009094:	432e      	orrs	r6, r5
 8009096:	f021 0104 	bic.w	r1, r1, #4
 800909a:	6021      	str	r1, [r4, #0]
 800909c:	d04b      	beq.n	8009136 <_printf_i+0x1a6>
 800909e:	4616      	mov	r6, r2
 80090a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80090a4:	fb03 5711 	mls	r7, r3, r1, r5
 80090a8:	5dc7      	ldrb	r7, [r0, r7]
 80090aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090ae:	462f      	mov	r7, r5
 80090b0:	42bb      	cmp	r3, r7
 80090b2:	460d      	mov	r5, r1
 80090b4:	d9f4      	bls.n	80090a0 <_printf_i+0x110>
 80090b6:	2b08      	cmp	r3, #8
 80090b8:	d10b      	bne.n	80090d2 <_printf_i+0x142>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	07df      	lsls	r7, r3, #31
 80090be:	d508      	bpl.n	80090d2 <_printf_i+0x142>
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	6861      	ldr	r1, [r4, #4]
 80090c4:	4299      	cmp	r1, r3
 80090c6:	bfde      	ittt	le
 80090c8:	2330      	movle	r3, #48	@ 0x30
 80090ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090d2:	1b92      	subs	r2, r2, r6
 80090d4:	6122      	str	r2, [r4, #16]
 80090d6:	464b      	mov	r3, r9
 80090d8:	4621      	mov	r1, r4
 80090da:	4640      	mov	r0, r8
 80090dc:	f8cd a000 	str.w	sl, [sp]
 80090e0:	aa03      	add	r2, sp, #12
 80090e2:	f7ff fee3 	bl	8008eac <_printf_common>
 80090e6:	3001      	adds	r0, #1
 80090e8:	d14a      	bne.n	8009180 <_printf_i+0x1f0>
 80090ea:	f04f 30ff 	mov.w	r0, #4294967295
 80090ee:	b004      	add	sp, #16
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	f043 0320 	orr.w	r3, r3, #32
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	2778      	movs	r7, #120	@ 0x78
 80090fe:	4832      	ldr	r0, [pc, #200]	@ (80091c8 <_printf_i+0x238>)
 8009100:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	6831      	ldr	r1, [r6, #0]
 8009108:	061f      	lsls	r7, r3, #24
 800910a:	f851 5b04 	ldr.w	r5, [r1], #4
 800910e:	d402      	bmi.n	8009116 <_printf_i+0x186>
 8009110:	065f      	lsls	r7, r3, #25
 8009112:	bf48      	it	mi
 8009114:	b2ad      	uxthmi	r5, r5
 8009116:	6031      	str	r1, [r6, #0]
 8009118:	07d9      	lsls	r1, r3, #31
 800911a:	bf44      	itt	mi
 800911c:	f043 0320 	orrmi.w	r3, r3, #32
 8009120:	6023      	strmi	r3, [r4, #0]
 8009122:	b11d      	cbz	r5, 800912c <_printf_i+0x19c>
 8009124:	2310      	movs	r3, #16
 8009126:	e7ad      	b.n	8009084 <_printf_i+0xf4>
 8009128:	4826      	ldr	r0, [pc, #152]	@ (80091c4 <_printf_i+0x234>)
 800912a:	e7e9      	b.n	8009100 <_printf_i+0x170>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	f023 0320 	bic.w	r3, r3, #32
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	e7f6      	b.n	8009124 <_printf_i+0x194>
 8009136:	4616      	mov	r6, r2
 8009138:	e7bd      	b.n	80090b6 <_printf_i+0x126>
 800913a:	6833      	ldr	r3, [r6, #0]
 800913c:	6825      	ldr	r5, [r4, #0]
 800913e:	1d18      	adds	r0, r3, #4
 8009140:	6961      	ldr	r1, [r4, #20]
 8009142:	6030      	str	r0, [r6, #0]
 8009144:	062e      	lsls	r6, r5, #24
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	d501      	bpl.n	800914e <_printf_i+0x1be>
 800914a:	6019      	str	r1, [r3, #0]
 800914c:	e002      	b.n	8009154 <_printf_i+0x1c4>
 800914e:	0668      	lsls	r0, r5, #25
 8009150:	d5fb      	bpl.n	800914a <_printf_i+0x1ba>
 8009152:	8019      	strh	r1, [r3, #0]
 8009154:	2300      	movs	r3, #0
 8009156:	4616      	mov	r6, r2
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	e7bc      	b.n	80090d6 <_printf_i+0x146>
 800915c:	6833      	ldr	r3, [r6, #0]
 800915e:	2100      	movs	r1, #0
 8009160:	1d1a      	adds	r2, r3, #4
 8009162:	6032      	str	r2, [r6, #0]
 8009164:	681e      	ldr	r6, [r3, #0]
 8009166:	6862      	ldr	r2, [r4, #4]
 8009168:	4630      	mov	r0, r6
 800916a:	f000 f913 	bl	8009394 <memchr>
 800916e:	b108      	cbz	r0, 8009174 <_printf_i+0x1e4>
 8009170:	1b80      	subs	r0, r0, r6
 8009172:	6060      	str	r0, [r4, #4]
 8009174:	6863      	ldr	r3, [r4, #4]
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	2300      	movs	r3, #0
 800917a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800917e:	e7aa      	b.n	80090d6 <_printf_i+0x146>
 8009180:	4632      	mov	r2, r6
 8009182:	4649      	mov	r1, r9
 8009184:	4640      	mov	r0, r8
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	47d0      	blx	sl
 800918a:	3001      	adds	r0, #1
 800918c:	d0ad      	beq.n	80090ea <_printf_i+0x15a>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	079b      	lsls	r3, r3, #30
 8009192:	d413      	bmi.n	80091bc <_printf_i+0x22c>
 8009194:	68e0      	ldr	r0, [r4, #12]
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	4298      	cmp	r0, r3
 800919a:	bfb8      	it	lt
 800919c:	4618      	movlt	r0, r3
 800919e:	e7a6      	b.n	80090ee <_printf_i+0x15e>
 80091a0:	2301      	movs	r3, #1
 80091a2:	4632      	mov	r2, r6
 80091a4:	4649      	mov	r1, r9
 80091a6:	4640      	mov	r0, r8
 80091a8:	47d0      	blx	sl
 80091aa:	3001      	adds	r0, #1
 80091ac:	d09d      	beq.n	80090ea <_printf_i+0x15a>
 80091ae:	3501      	adds	r5, #1
 80091b0:	68e3      	ldr	r3, [r4, #12]
 80091b2:	9903      	ldr	r1, [sp, #12]
 80091b4:	1a5b      	subs	r3, r3, r1
 80091b6:	42ab      	cmp	r3, r5
 80091b8:	dcf2      	bgt.n	80091a0 <_printf_i+0x210>
 80091ba:	e7eb      	b.n	8009194 <_printf_i+0x204>
 80091bc:	2500      	movs	r5, #0
 80091be:	f104 0619 	add.w	r6, r4, #25
 80091c2:	e7f5      	b.n	80091b0 <_printf_i+0x220>
 80091c4:	08009ca0 	.word	0x08009ca0
 80091c8:	08009cb1 	.word	0x08009cb1

080091cc <__sflush_r>:
 80091cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	0716      	lsls	r6, r2, #28
 80091d4:	4605      	mov	r5, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	d454      	bmi.n	8009284 <__sflush_r+0xb8>
 80091da:	684b      	ldr	r3, [r1, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dc02      	bgt.n	80091e6 <__sflush_r+0x1a>
 80091e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd48      	ble.n	8009278 <__sflush_r+0xac>
 80091e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091e8:	2e00      	cmp	r6, #0
 80091ea:	d045      	beq.n	8009278 <__sflush_r+0xac>
 80091ec:	2300      	movs	r3, #0
 80091ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091f2:	682f      	ldr	r7, [r5, #0]
 80091f4:	6a21      	ldr	r1, [r4, #32]
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	d030      	beq.n	800925c <__sflush_r+0x90>
 80091fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	0759      	lsls	r1, r3, #29
 8009200:	d505      	bpl.n	800920e <__sflush_r+0x42>
 8009202:	6863      	ldr	r3, [r4, #4]
 8009204:	1ad2      	subs	r2, r2, r3
 8009206:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009208:	b10b      	cbz	r3, 800920e <__sflush_r+0x42>
 800920a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800920c:	1ad2      	subs	r2, r2, r3
 800920e:	2300      	movs	r3, #0
 8009210:	4628      	mov	r0, r5
 8009212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009214:	6a21      	ldr	r1, [r4, #32]
 8009216:	47b0      	blx	r6
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	d106      	bne.n	800922c <__sflush_r+0x60>
 800921e:	6829      	ldr	r1, [r5, #0]
 8009220:	291d      	cmp	r1, #29
 8009222:	d82b      	bhi.n	800927c <__sflush_r+0xb0>
 8009224:	4a28      	ldr	r2, [pc, #160]	@ (80092c8 <__sflush_r+0xfc>)
 8009226:	40ca      	lsrs	r2, r1
 8009228:	07d6      	lsls	r6, r2, #31
 800922a:	d527      	bpl.n	800927c <__sflush_r+0xb0>
 800922c:	2200      	movs	r2, #0
 800922e:	6062      	str	r2, [r4, #4]
 8009230:	6922      	ldr	r2, [r4, #16]
 8009232:	04d9      	lsls	r1, r3, #19
 8009234:	6022      	str	r2, [r4, #0]
 8009236:	d504      	bpl.n	8009242 <__sflush_r+0x76>
 8009238:	1c42      	adds	r2, r0, #1
 800923a:	d101      	bne.n	8009240 <__sflush_r+0x74>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b903      	cbnz	r3, 8009242 <__sflush_r+0x76>
 8009240:	6560      	str	r0, [r4, #84]	@ 0x54
 8009242:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009244:	602f      	str	r7, [r5, #0]
 8009246:	b1b9      	cbz	r1, 8009278 <__sflush_r+0xac>
 8009248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800924c:	4299      	cmp	r1, r3
 800924e:	d002      	beq.n	8009256 <__sflush_r+0x8a>
 8009250:	4628      	mov	r0, r5
 8009252:	f7fe fbdd 	bl	8007a10 <_free_r>
 8009256:	2300      	movs	r3, #0
 8009258:	6363      	str	r3, [r4, #52]	@ 0x34
 800925a:	e00d      	b.n	8009278 <__sflush_r+0xac>
 800925c:	2301      	movs	r3, #1
 800925e:	4628      	mov	r0, r5
 8009260:	47b0      	blx	r6
 8009262:	4602      	mov	r2, r0
 8009264:	1c50      	adds	r0, r2, #1
 8009266:	d1c9      	bne.n	80091fc <__sflush_r+0x30>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0c6      	beq.n	80091fc <__sflush_r+0x30>
 800926e:	2b1d      	cmp	r3, #29
 8009270:	d001      	beq.n	8009276 <__sflush_r+0xaa>
 8009272:	2b16      	cmp	r3, #22
 8009274:	d11d      	bne.n	80092b2 <__sflush_r+0xe6>
 8009276:	602f      	str	r7, [r5, #0]
 8009278:	2000      	movs	r0, #0
 800927a:	e021      	b.n	80092c0 <__sflush_r+0xf4>
 800927c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009280:	b21b      	sxth	r3, r3
 8009282:	e01a      	b.n	80092ba <__sflush_r+0xee>
 8009284:	690f      	ldr	r7, [r1, #16]
 8009286:	2f00      	cmp	r7, #0
 8009288:	d0f6      	beq.n	8009278 <__sflush_r+0xac>
 800928a:	0793      	lsls	r3, r2, #30
 800928c:	bf18      	it	ne
 800928e:	2300      	movne	r3, #0
 8009290:	680e      	ldr	r6, [r1, #0]
 8009292:	bf08      	it	eq
 8009294:	694b      	ldreq	r3, [r1, #20]
 8009296:	1bf6      	subs	r6, r6, r7
 8009298:	600f      	str	r7, [r1, #0]
 800929a:	608b      	str	r3, [r1, #8]
 800929c:	2e00      	cmp	r6, #0
 800929e:	ddeb      	ble.n	8009278 <__sflush_r+0xac>
 80092a0:	4633      	mov	r3, r6
 80092a2:	463a      	mov	r2, r7
 80092a4:	4628      	mov	r0, r5
 80092a6:	6a21      	ldr	r1, [r4, #32]
 80092a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80092ac:	47e0      	blx	ip
 80092ae:	2800      	cmp	r0, #0
 80092b0:	dc07      	bgt.n	80092c2 <__sflush_r+0xf6>
 80092b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ba:	f04f 30ff 	mov.w	r0, #4294967295
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c2:	4407      	add	r7, r0
 80092c4:	1a36      	subs	r6, r6, r0
 80092c6:	e7e9      	b.n	800929c <__sflush_r+0xd0>
 80092c8:	20400001 	.word	0x20400001

080092cc <_fflush_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	690b      	ldr	r3, [r1, #16]
 80092d0:	4605      	mov	r5, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	b913      	cbnz	r3, 80092dc <_fflush_r+0x10>
 80092d6:	2500      	movs	r5, #0
 80092d8:	4628      	mov	r0, r5
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	b118      	cbz	r0, 80092e6 <_fflush_r+0x1a>
 80092de:	6a03      	ldr	r3, [r0, #32]
 80092e0:	b90b      	cbnz	r3, 80092e6 <_fflush_r+0x1a>
 80092e2:	f7fe f9dd 	bl	80076a0 <__sinit>
 80092e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0f3      	beq.n	80092d6 <_fflush_r+0xa>
 80092ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092f0:	07d0      	lsls	r0, r2, #31
 80092f2:	d404      	bmi.n	80092fe <_fflush_r+0x32>
 80092f4:	0599      	lsls	r1, r3, #22
 80092f6:	d402      	bmi.n	80092fe <_fflush_r+0x32>
 80092f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092fa:	f7fe fb54 	bl	80079a6 <__retarget_lock_acquire_recursive>
 80092fe:	4628      	mov	r0, r5
 8009300:	4621      	mov	r1, r4
 8009302:	f7ff ff63 	bl	80091cc <__sflush_r>
 8009306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009308:	4605      	mov	r5, r0
 800930a:	07da      	lsls	r2, r3, #31
 800930c:	d4e4      	bmi.n	80092d8 <_fflush_r+0xc>
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	059b      	lsls	r3, r3, #22
 8009312:	d4e1      	bmi.n	80092d8 <_fflush_r+0xc>
 8009314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009316:	f7fe fb47 	bl	80079a8 <__retarget_lock_release_recursive>
 800931a:	e7dd      	b.n	80092d8 <_fflush_r+0xc>

0800931c <fiprintf>:
 800931c:	b40e      	push	{r1, r2, r3}
 800931e:	b503      	push	{r0, r1, lr}
 8009320:	4601      	mov	r1, r0
 8009322:	ab03      	add	r3, sp, #12
 8009324:	4805      	ldr	r0, [pc, #20]	@ (800933c <fiprintf+0x20>)
 8009326:	f853 2b04 	ldr.w	r2, [r3], #4
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	f000 f8af 	bl	8009490 <_vfiprintf_r>
 8009332:	b002      	add	sp, #8
 8009334:	f85d eb04 	ldr.w	lr, [sp], #4
 8009338:	b003      	add	sp, #12
 800933a:	4770      	bx	lr
 800933c:	20000198 	.word	0x20000198

08009340 <memmove>:
 8009340:	4288      	cmp	r0, r1
 8009342:	b510      	push	{r4, lr}
 8009344:	eb01 0402 	add.w	r4, r1, r2
 8009348:	d902      	bls.n	8009350 <memmove+0x10>
 800934a:	4284      	cmp	r4, r0
 800934c:	4623      	mov	r3, r4
 800934e:	d807      	bhi.n	8009360 <memmove+0x20>
 8009350:	1e43      	subs	r3, r0, #1
 8009352:	42a1      	cmp	r1, r4
 8009354:	d008      	beq.n	8009368 <memmove+0x28>
 8009356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800935a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800935e:	e7f8      	b.n	8009352 <memmove+0x12>
 8009360:	4601      	mov	r1, r0
 8009362:	4402      	add	r2, r0
 8009364:	428a      	cmp	r2, r1
 8009366:	d100      	bne.n	800936a <memmove+0x2a>
 8009368:	bd10      	pop	{r4, pc}
 800936a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800936e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009372:	e7f7      	b.n	8009364 <memmove+0x24>

08009374 <_sbrk_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	2300      	movs	r3, #0
 8009378:	4d05      	ldr	r5, [pc, #20]	@ (8009390 <_sbrk_r+0x1c>)
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7f9 fb12 	bl	80029a8 <_sbrk>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_sbrk_r+0x1a>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_sbrk_r+0x1a>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	200005c8 	.word	0x200005c8

08009394 <memchr>:
 8009394:	4603      	mov	r3, r0
 8009396:	b510      	push	{r4, lr}
 8009398:	b2c9      	uxtb	r1, r1
 800939a:	4402      	add	r2, r0
 800939c:	4293      	cmp	r3, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	d101      	bne.n	80093a6 <memchr+0x12>
 80093a2:	2000      	movs	r0, #0
 80093a4:	e003      	b.n	80093ae <memchr+0x1a>
 80093a6:	7804      	ldrb	r4, [r0, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	428c      	cmp	r4, r1
 80093ac:	d1f6      	bne.n	800939c <memchr+0x8>
 80093ae:	bd10      	pop	{r4, pc}

080093b0 <abort>:
 80093b0:	2006      	movs	r0, #6
 80093b2:	b508      	push	{r3, lr}
 80093b4:	f000 fa40 	bl	8009838 <raise>
 80093b8:	2001      	movs	r0, #1
 80093ba:	f7f9 fa80 	bl	80028be <_exit>

080093be <_calloc_r>:
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	fba1 5402 	umull	r5, r4, r1, r2
 80093c4:	b934      	cbnz	r4, 80093d4 <_calloc_r+0x16>
 80093c6:	4629      	mov	r1, r5
 80093c8:	f7fe fece 	bl	8008168 <_malloc_r>
 80093cc:	4606      	mov	r6, r0
 80093ce:	b928      	cbnz	r0, 80093dc <_calloc_r+0x1e>
 80093d0:	4630      	mov	r0, r6
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	220c      	movs	r2, #12
 80093d6:	2600      	movs	r6, #0
 80093d8:	6002      	str	r2, [r0, #0]
 80093da:	e7f9      	b.n	80093d0 <_calloc_r+0x12>
 80093dc:	462a      	mov	r2, r5
 80093de:	4621      	mov	r1, r4
 80093e0:	f7fe f9f9 	bl	80077d6 <memset>
 80093e4:	e7f4      	b.n	80093d0 <_calloc_r+0x12>

080093e6 <_realloc_r>:
 80093e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ea:	4607      	mov	r7, r0
 80093ec:	4614      	mov	r4, r2
 80093ee:	460d      	mov	r5, r1
 80093f0:	b921      	cbnz	r1, 80093fc <_realloc_r+0x16>
 80093f2:	4611      	mov	r1, r2
 80093f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f8:	f7fe beb6 	b.w	8008168 <_malloc_r>
 80093fc:	b92a      	cbnz	r2, 800940a <_realloc_r+0x24>
 80093fe:	f7fe fb07 	bl	8007a10 <_free_r>
 8009402:	4625      	mov	r5, r4
 8009404:	4628      	mov	r0, r5
 8009406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940a:	f000 fa31 	bl	8009870 <_malloc_usable_size_r>
 800940e:	4284      	cmp	r4, r0
 8009410:	4606      	mov	r6, r0
 8009412:	d802      	bhi.n	800941a <_realloc_r+0x34>
 8009414:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009418:	d8f4      	bhi.n	8009404 <_realloc_r+0x1e>
 800941a:	4621      	mov	r1, r4
 800941c:	4638      	mov	r0, r7
 800941e:	f7fe fea3 	bl	8008168 <_malloc_r>
 8009422:	4680      	mov	r8, r0
 8009424:	b908      	cbnz	r0, 800942a <_realloc_r+0x44>
 8009426:	4645      	mov	r5, r8
 8009428:	e7ec      	b.n	8009404 <_realloc_r+0x1e>
 800942a:	42b4      	cmp	r4, r6
 800942c:	4622      	mov	r2, r4
 800942e:	4629      	mov	r1, r5
 8009430:	bf28      	it	cs
 8009432:	4632      	movcs	r2, r6
 8009434:	f7fe fab9 	bl	80079aa <memcpy>
 8009438:	4629      	mov	r1, r5
 800943a:	4638      	mov	r0, r7
 800943c:	f7fe fae8 	bl	8007a10 <_free_r>
 8009440:	e7f1      	b.n	8009426 <_realloc_r+0x40>

08009442 <__sfputc_r>:
 8009442:	6893      	ldr	r3, [r2, #8]
 8009444:	b410      	push	{r4}
 8009446:	3b01      	subs	r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	6093      	str	r3, [r2, #8]
 800944c:	da07      	bge.n	800945e <__sfputc_r+0x1c>
 800944e:	6994      	ldr	r4, [r2, #24]
 8009450:	42a3      	cmp	r3, r4
 8009452:	db01      	blt.n	8009458 <__sfputc_r+0x16>
 8009454:	290a      	cmp	r1, #10
 8009456:	d102      	bne.n	800945e <__sfputc_r+0x1c>
 8009458:	bc10      	pop	{r4}
 800945a:	f000 b931 	b.w	80096c0 <__swbuf_r>
 800945e:	6813      	ldr	r3, [r2, #0]
 8009460:	1c58      	adds	r0, r3, #1
 8009462:	6010      	str	r0, [r2, #0]
 8009464:	7019      	strb	r1, [r3, #0]
 8009466:	4608      	mov	r0, r1
 8009468:	bc10      	pop	{r4}
 800946a:	4770      	bx	lr

0800946c <__sfputs_r>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	4606      	mov	r6, r0
 8009470:	460f      	mov	r7, r1
 8009472:	4614      	mov	r4, r2
 8009474:	18d5      	adds	r5, r2, r3
 8009476:	42ac      	cmp	r4, r5
 8009478:	d101      	bne.n	800947e <__sfputs_r+0x12>
 800947a:	2000      	movs	r0, #0
 800947c:	e007      	b.n	800948e <__sfputs_r+0x22>
 800947e:	463a      	mov	r2, r7
 8009480:	4630      	mov	r0, r6
 8009482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009486:	f7ff ffdc 	bl	8009442 <__sfputc_r>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	d1f3      	bne.n	8009476 <__sfputs_r+0xa>
 800948e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009490 <_vfiprintf_r>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	460d      	mov	r5, r1
 8009496:	4614      	mov	r4, r2
 8009498:	4698      	mov	r8, r3
 800949a:	4606      	mov	r6, r0
 800949c:	b09d      	sub	sp, #116	@ 0x74
 800949e:	b118      	cbz	r0, 80094a8 <_vfiprintf_r+0x18>
 80094a0:	6a03      	ldr	r3, [r0, #32]
 80094a2:	b90b      	cbnz	r3, 80094a8 <_vfiprintf_r+0x18>
 80094a4:	f7fe f8fc 	bl	80076a0 <__sinit>
 80094a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094aa:	07d9      	lsls	r1, r3, #31
 80094ac:	d405      	bmi.n	80094ba <_vfiprintf_r+0x2a>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	059a      	lsls	r2, r3, #22
 80094b2:	d402      	bmi.n	80094ba <_vfiprintf_r+0x2a>
 80094b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094b6:	f7fe fa76 	bl	80079a6 <__retarget_lock_acquire_recursive>
 80094ba:	89ab      	ldrh	r3, [r5, #12]
 80094bc:	071b      	lsls	r3, r3, #28
 80094be:	d501      	bpl.n	80094c4 <_vfiprintf_r+0x34>
 80094c0:	692b      	ldr	r3, [r5, #16]
 80094c2:	b99b      	cbnz	r3, 80094ec <_vfiprintf_r+0x5c>
 80094c4:	4629      	mov	r1, r5
 80094c6:	4630      	mov	r0, r6
 80094c8:	f000 f938 	bl	800973c <__swsetup_r>
 80094cc:	b170      	cbz	r0, 80094ec <_vfiprintf_r+0x5c>
 80094ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094d0:	07dc      	lsls	r4, r3, #31
 80094d2:	d504      	bpl.n	80094de <_vfiprintf_r+0x4e>
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	b01d      	add	sp, #116	@ 0x74
 80094da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094de:	89ab      	ldrh	r3, [r5, #12]
 80094e0:	0598      	lsls	r0, r3, #22
 80094e2:	d4f7      	bmi.n	80094d4 <_vfiprintf_r+0x44>
 80094e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094e6:	f7fe fa5f 	bl	80079a8 <__retarget_lock_release_recursive>
 80094ea:	e7f3      	b.n	80094d4 <_vfiprintf_r+0x44>
 80094ec:	2300      	movs	r3, #0
 80094ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80094f0:	2320      	movs	r3, #32
 80094f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094f6:	2330      	movs	r3, #48	@ 0x30
 80094f8:	f04f 0901 	mov.w	r9, #1
 80094fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009500:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80096ac <_vfiprintf_r+0x21c>
 8009504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009508:	4623      	mov	r3, r4
 800950a:	469a      	mov	sl, r3
 800950c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009510:	b10a      	cbz	r2, 8009516 <_vfiprintf_r+0x86>
 8009512:	2a25      	cmp	r2, #37	@ 0x25
 8009514:	d1f9      	bne.n	800950a <_vfiprintf_r+0x7a>
 8009516:	ebba 0b04 	subs.w	fp, sl, r4
 800951a:	d00b      	beq.n	8009534 <_vfiprintf_r+0xa4>
 800951c:	465b      	mov	r3, fp
 800951e:	4622      	mov	r2, r4
 8009520:	4629      	mov	r1, r5
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ffa2 	bl	800946c <__sfputs_r>
 8009528:	3001      	adds	r0, #1
 800952a:	f000 80a7 	beq.w	800967c <_vfiprintf_r+0x1ec>
 800952e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009530:	445a      	add	r2, fp
 8009532:	9209      	str	r2, [sp, #36]	@ 0x24
 8009534:	f89a 3000 	ldrb.w	r3, [sl]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 809f 	beq.w	800967c <_vfiprintf_r+0x1ec>
 800953e:	2300      	movs	r3, #0
 8009540:	f04f 32ff 	mov.w	r2, #4294967295
 8009544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009548:	f10a 0a01 	add.w	sl, sl, #1
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	9307      	str	r3, [sp, #28]
 8009550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009554:	931a      	str	r3, [sp, #104]	@ 0x68
 8009556:	4654      	mov	r4, sl
 8009558:	2205      	movs	r2, #5
 800955a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955e:	4853      	ldr	r0, [pc, #332]	@ (80096ac <_vfiprintf_r+0x21c>)
 8009560:	f7ff ff18 	bl	8009394 <memchr>
 8009564:	9a04      	ldr	r2, [sp, #16]
 8009566:	b9d8      	cbnz	r0, 80095a0 <_vfiprintf_r+0x110>
 8009568:	06d1      	lsls	r1, r2, #27
 800956a:	bf44      	itt	mi
 800956c:	2320      	movmi	r3, #32
 800956e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009572:	0713      	lsls	r3, r2, #28
 8009574:	bf44      	itt	mi
 8009576:	232b      	movmi	r3, #43	@ 0x2b
 8009578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800957c:	f89a 3000 	ldrb.w	r3, [sl]
 8009580:	2b2a      	cmp	r3, #42	@ 0x2a
 8009582:	d015      	beq.n	80095b0 <_vfiprintf_r+0x120>
 8009584:	4654      	mov	r4, sl
 8009586:	2000      	movs	r0, #0
 8009588:	f04f 0c0a 	mov.w	ip, #10
 800958c:	9a07      	ldr	r2, [sp, #28]
 800958e:	4621      	mov	r1, r4
 8009590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009594:	3b30      	subs	r3, #48	@ 0x30
 8009596:	2b09      	cmp	r3, #9
 8009598:	d94b      	bls.n	8009632 <_vfiprintf_r+0x1a2>
 800959a:	b1b0      	cbz	r0, 80095ca <_vfiprintf_r+0x13a>
 800959c:	9207      	str	r2, [sp, #28]
 800959e:	e014      	b.n	80095ca <_vfiprintf_r+0x13a>
 80095a0:	eba0 0308 	sub.w	r3, r0, r8
 80095a4:	fa09 f303 	lsl.w	r3, r9, r3
 80095a8:	4313      	orrs	r3, r2
 80095aa:	46a2      	mov	sl, r4
 80095ac:	9304      	str	r3, [sp, #16]
 80095ae:	e7d2      	b.n	8009556 <_vfiprintf_r+0xc6>
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	1d19      	adds	r1, r3, #4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	9103      	str	r1, [sp, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	bfbb      	ittet	lt
 80095bc:	425b      	neglt	r3, r3
 80095be:	f042 0202 	orrlt.w	r2, r2, #2
 80095c2:	9307      	strge	r3, [sp, #28]
 80095c4:	9307      	strlt	r3, [sp, #28]
 80095c6:	bfb8      	it	lt
 80095c8:	9204      	strlt	r2, [sp, #16]
 80095ca:	7823      	ldrb	r3, [r4, #0]
 80095cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80095ce:	d10a      	bne.n	80095e6 <_vfiprintf_r+0x156>
 80095d0:	7863      	ldrb	r3, [r4, #1]
 80095d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80095d4:	d132      	bne.n	800963c <_vfiprintf_r+0x1ac>
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	3402      	adds	r4, #2
 80095da:	1d1a      	adds	r2, r3, #4
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	9203      	str	r2, [sp, #12]
 80095e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80096b0 <_vfiprintf_r+0x220>
 80095ea:	2203      	movs	r2, #3
 80095ec:	4650      	mov	r0, sl
 80095ee:	7821      	ldrb	r1, [r4, #0]
 80095f0:	f7ff fed0 	bl	8009394 <memchr>
 80095f4:	b138      	cbz	r0, 8009606 <_vfiprintf_r+0x176>
 80095f6:	2240      	movs	r2, #64	@ 0x40
 80095f8:	9b04      	ldr	r3, [sp, #16]
 80095fa:	eba0 000a 	sub.w	r0, r0, sl
 80095fe:	4082      	lsls	r2, r0
 8009600:	4313      	orrs	r3, r2
 8009602:	3401      	adds	r4, #1
 8009604:	9304      	str	r3, [sp, #16]
 8009606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960a:	2206      	movs	r2, #6
 800960c:	4829      	ldr	r0, [pc, #164]	@ (80096b4 <_vfiprintf_r+0x224>)
 800960e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009612:	f7ff febf 	bl	8009394 <memchr>
 8009616:	2800      	cmp	r0, #0
 8009618:	d03f      	beq.n	800969a <_vfiprintf_r+0x20a>
 800961a:	4b27      	ldr	r3, [pc, #156]	@ (80096b8 <_vfiprintf_r+0x228>)
 800961c:	bb1b      	cbnz	r3, 8009666 <_vfiprintf_r+0x1d6>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	3307      	adds	r3, #7
 8009622:	f023 0307 	bic.w	r3, r3, #7
 8009626:	3308      	adds	r3, #8
 8009628:	9303      	str	r3, [sp, #12]
 800962a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800962c:	443b      	add	r3, r7
 800962e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009630:	e76a      	b.n	8009508 <_vfiprintf_r+0x78>
 8009632:	460c      	mov	r4, r1
 8009634:	2001      	movs	r0, #1
 8009636:	fb0c 3202 	mla	r2, ip, r2, r3
 800963a:	e7a8      	b.n	800958e <_vfiprintf_r+0xfe>
 800963c:	2300      	movs	r3, #0
 800963e:	f04f 0c0a 	mov.w	ip, #10
 8009642:	4619      	mov	r1, r3
 8009644:	3401      	adds	r4, #1
 8009646:	9305      	str	r3, [sp, #20]
 8009648:	4620      	mov	r0, r4
 800964a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800964e:	3a30      	subs	r2, #48	@ 0x30
 8009650:	2a09      	cmp	r2, #9
 8009652:	d903      	bls.n	800965c <_vfiprintf_r+0x1cc>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0c6      	beq.n	80095e6 <_vfiprintf_r+0x156>
 8009658:	9105      	str	r1, [sp, #20]
 800965a:	e7c4      	b.n	80095e6 <_vfiprintf_r+0x156>
 800965c:	4604      	mov	r4, r0
 800965e:	2301      	movs	r3, #1
 8009660:	fb0c 2101 	mla	r1, ip, r1, r2
 8009664:	e7f0      	b.n	8009648 <_vfiprintf_r+0x1b8>
 8009666:	ab03      	add	r3, sp, #12
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	462a      	mov	r2, r5
 800966c:	4630      	mov	r0, r6
 800966e:	4b13      	ldr	r3, [pc, #76]	@ (80096bc <_vfiprintf_r+0x22c>)
 8009670:	a904      	add	r1, sp, #16
 8009672:	f3af 8000 	nop.w
 8009676:	4607      	mov	r7, r0
 8009678:	1c78      	adds	r0, r7, #1
 800967a:	d1d6      	bne.n	800962a <_vfiprintf_r+0x19a>
 800967c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800967e:	07d9      	lsls	r1, r3, #31
 8009680:	d405      	bmi.n	800968e <_vfiprintf_r+0x1fe>
 8009682:	89ab      	ldrh	r3, [r5, #12]
 8009684:	059a      	lsls	r2, r3, #22
 8009686:	d402      	bmi.n	800968e <_vfiprintf_r+0x1fe>
 8009688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800968a:	f7fe f98d 	bl	80079a8 <__retarget_lock_release_recursive>
 800968e:	89ab      	ldrh	r3, [r5, #12]
 8009690:	065b      	lsls	r3, r3, #25
 8009692:	f53f af1f 	bmi.w	80094d4 <_vfiprintf_r+0x44>
 8009696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009698:	e71e      	b.n	80094d8 <_vfiprintf_r+0x48>
 800969a:	ab03      	add	r3, sp, #12
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	462a      	mov	r2, r5
 80096a0:	4630      	mov	r0, r6
 80096a2:	4b06      	ldr	r3, [pc, #24]	@ (80096bc <_vfiprintf_r+0x22c>)
 80096a4:	a904      	add	r1, sp, #16
 80096a6:	f7ff fc73 	bl	8008f90 <_printf_i>
 80096aa:	e7e4      	b.n	8009676 <_vfiprintf_r+0x1e6>
 80096ac:	08009c8f 	.word	0x08009c8f
 80096b0:	08009c95 	.word	0x08009c95
 80096b4:	08009c99 	.word	0x08009c99
 80096b8:	00000000 	.word	0x00000000
 80096bc:	0800946d 	.word	0x0800946d

080096c0 <__swbuf_r>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	460e      	mov	r6, r1
 80096c4:	4614      	mov	r4, r2
 80096c6:	4605      	mov	r5, r0
 80096c8:	b118      	cbz	r0, 80096d2 <__swbuf_r+0x12>
 80096ca:	6a03      	ldr	r3, [r0, #32]
 80096cc:	b90b      	cbnz	r3, 80096d2 <__swbuf_r+0x12>
 80096ce:	f7fd ffe7 	bl	80076a0 <__sinit>
 80096d2:	69a3      	ldr	r3, [r4, #24]
 80096d4:	60a3      	str	r3, [r4, #8]
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	071a      	lsls	r2, r3, #28
 80096da:	d501      	bpl.n	80096e0 <__swbuf_r+0x20>
 80096dc:	6923      	ldr	r3, [r4, #16]
 80096de:	b943      	cbnz	r3, 80096f2 <__swbuf_r+0x32>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 f82a 	bl	800973c <__swsetup_r>
 80096e8:	b118      	cbz	r0, 80096f2 <__swbuf_r+0x32>
 80096ea:	f04f 37ff 	mov.w	r7, #4294967295
 80096ee:	4638      	mov	r0, r7
 80096f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	6922      	ldr	r2, [r4, #16]
 80096f6:	b2f6      	uxtb	r6, r6
 80096f8:	1a98      	subs	r0, r3, r2
 80096fa:	6963      	ldr	r3, [r4, #20]
 80096fc:	4637      	mov	r7, r6
 80096fe:	4283      	cmp	r3, r0
 8009700:	dc05      	bgt.n	800970e <__swbuf_r+0x4e>
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f7ff fde1 	bl	80092cc <_fflush_r>
 800970a:	2800      	cmp	r0, #0
 800970c:	d1ed      	bne.n	80096ea <__swbuf_r+0x2a>
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	3b01      	subs	r3, #1
 8009712:	60a3      	str	r3, [r4, #8]
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	6022      	str	r2, [r4, #0]
 800971a:	701e      	strb	r6, [r3, #0]
 800971c:	6962      	ldr	r2, [r4, #20]
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	429a      	cmp	r2, r3
 8009722:	d004      	beq.n	800972e <__swbuf_r+0x6e>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	07db      	lsls	r3, r3, #31
 8009728:	d5e1      	bpl.n	80096ee <__swbuf_r+0x2e>
 800972a:	2e0a      	cmp	r6, #10
 800972c:	d1df      	bne.n	80096ee <__swbuf_r+0x2e>
 800972e:	4621      	mov	r1, r4
 8009730:	4628      	mov	r0, r5
 8009732:	f7ff fdcb 	bl	80092cc <_fflush_r>
 8009736:	2800      	cmp	r0, #0
 8009738:	d0d9      	beq.n	80096ee <__swbuf_r+0x2e>
 800973a:	e7d6      	b.n	80096ea <__swbuf_r+0x2a>

0800973c <__swsetup_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4b29      	ldr	r3, [pc, #164]	@ (80097e4 <__swsetup_r+0xa8>)
 8009740:	4605      	mov	r5, r0
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	460c      	mov	r4, r1
 8009746:	b118      	cbz	r0, 8009750 <__swsetup_r+0x14>
 8009748:	6a03      	ldr	r3, [r0, #32]
 800974a:	b90b      	cbnz	r3, 8009750 <__swsetup_r+0x14>
 800974c:	f7fd ffa8 	bl	80076a0 <__sinit>
 8009750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009754:	0719      	lsls	r1, r3, #28
 8009756:	d422      	bmi.n	800979e <__swsetup_r+0x62>
 8009758:	06da      	lsls	r2, r3, #27
 800975a:	d407      	bmi.n	800976c <__swsetup_r+0x30>
 800975c:	2209      	movs	r2, #9
 800975e:	602a      	str	r2, [r5, #0]
 8009760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009764:	f04f 30ff 	mov.w	r0, #4294967295
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	e033      	b.n	80097d4 <__swsetup_r+0x98>
 800976c:	0758      	lsls	r0, r3, #29
 800976e:	d512      	bpl.n	8009796 <__swsetup_r+0x5a>
 8009770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009772:	b141      	cbz	r1, 8009786 <__swsetup_r+0x4a>
 8009774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009778:	4299      	cmp	r1, r3
 800977a:	d002      	beq.n	8009782 <__swsetup_r+0x46>
 800977c:	4628      	mov	r0, r5
 800977e:	f7fe f947 	bl	8007a10 <_free_r>
 8009782:	2300      	movs	r3, #0
 8009784:	6363      	str	r3, [r4, #52]	@ 0x34
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800978c:	81a3      	strh	r3, [r4, #12]
 800978e:	2300      	movs	r3, #0
 8009790:	6063      	str	r3, [r4, #4]
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	f043 0308 	orr.w	r3, r3, #8
 800979c:	81a3      	strh	r3, [r4, #12]
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	b94b      	cbnz	r3, 80097b6 <__swsetup_r+0x7a>
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ac:	d003      	beq.n	80097b6 <__swsetup_r+0x7a>
 80097ae:	4621      	mov	r1, r4
 80097b0:	4628      	mov	r0, r5
 80097b2:	f000 f88a 	bl	80098ca <__smakebuf_r>
 80097b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ba:	f013 0201 	ands.w	r2, r3, #1
 80097be:	d00a      	beq.n	80097d6 <__swsetup_r+0x9a>
 80097c0:	2200      	movs	r2, #0
 80097c2:	60a2      	str	r2, [r4, #8]
 80097c4:	6962      	ldr	r2, [r4, #20]
 80097c6:	4252      	negs	r2, r2
 80097c8:	61a2      	str	r2, [r4, #24]
 80097ca:	6922      	ldr	r2, [r4, #16]
 80097cc:	b942      	cbnz	r2, 80097e0 <__swsetup_r+0xa4>
 80097ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097d2:	d1c5      	bne.n	8009760 <__swsetup_r+0x24>
 80097d4:	bd38      	pop	{r3, r4, r5, pc}
 80097d6:	0799      	lsls	r1, r3, #30
 80097d8:	bf58      	it	pl
 80097da:	6962      	ldrpl	r2, [r4, #20]
 80097dc:	60a2      	str	r2, [r4, #8]
 80097de:	e7f4      	b.n	80097ca <__swsetup_r+0x8e>
 80097e0:	2000      	movs	r0, #0
 80097e2:	e7f7      	b.n	80097d4 <__swsetup_r+0x98>
 80097e4:	20000198 	.word	0x20000198

080097e8 <_raise_r>:
 80097e8:	291f      	cmp	r1, #31
 80097ea:	b538      	push	{r3, r4, r5, lr}
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	d904      	bls.n	80097fc <_raise_r+0x14>
 80097f2:	2316      	movs	r3, #22
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097fe:	b112      	cbz	r2, 8009806 <_raise_r+0x1e>
 8009800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009804:	b94b      	cbnz	r3, 800981a <_raise_r+0x32>
 8009806:	4628      	mov	r0, r5
 8009808:	f000 f830 	bl	800986c <_getpid_r>
 800980c:	4622      	mov	r2, r4
 800980e:	4601      	mov	r1, r0
 8009810:	4628      	mov	r0, r5
 8009812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009816:	f000 b817 	b.w	8009848 <_kill_r>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d00a      	beq.n	8009834 <_raise_r+0x4c>
 800981e:	1c59      	adds	r1, r3, #1
 8009820:	d103      	bne.n	800982a <_raise_r+0x42>
 8009822:	2316      	movs	r3, #22
 8009824:	6003      	str	r3, [r0, #0]
 8009826:	2001      	movs	r0, #1
 8009828:	e7e7      	b.n	80097fa <_raise_r+0x12>
 800982a:	2100      	movs	r1, #0
 800982c:	4620      	mov	r0, r4
 800982e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009832:	4798      	blx	r3
 8009834:	2000      	movs	r0, #0
 8009836:	e7e0      	b.n	80097fa <_raise_r+0x12>

08009838 <raise>:
 8009838:	4b02      	ldr	r3, [pc, #8]	@ (8009844 <raise+0xc>)
 800983a:	4601      	mov	r1, r0
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f7ff bfd3 	b.w	80097e8 <_raise_r>
 8009842:	bf00      	nop
 8009844:	20000198 	.word	0x20000198

08009848 <_kill_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	2300      	movs	r3, #0
 800984c:	4d06      	ldr	r5, [pc, #24]	@ (8009868 <_kill_r+0x20>)
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	f7f9 f822 	bl	800289e <_kill>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d102      	bne.n	8009864 <_kill_r+0x1c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b103      	cbz	r3, 8009864 <_kill_r+0x1c>
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	200005c8 	.word	0x200005c8

0800986c <_getpid_r>:
 800986c:	f7f9 b810 	b.w	8002890 <_getpid>

08009870 <_malloc_usable_size_r>:
 8009870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009874:	1f18      	subs	r0, r3, #4
 8009876:	2b00      	cmp	r3, #0
 8009878:	bfbc      	itt	lt
 800987a:	580b      	ldrlt	r3, [r1, r0]
 800987c:	18c0      	addlt	r0, r0, r3
 800987e:	4770      	bx	lr

08009880 <__swhatbuf_r>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	460c      	mov	r4, r1
 8009884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009888:	4615      	mov	r5, r2
 800988a:	2900      	cmp	r1, #0
 800988c:	461e      	mov	r6, r3
 800988e:	b096      	sub	sp, #88	@ 0x58
 8009890:	da0c      	bge.n	80098ac <__swhatbuf_r+0x2c>
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	2100      	movs	r1, #0
 8009896:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800989a:	bf14      	ite	ne
 800989c:	2340      	movne	r3, #64	@ 0x40
 800989e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098a2:	2000      	movs	r0, #0
 80098a4:	6031      	str	r1, [r6, #0]
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	b016      	add	sp, #88	@ 0x58
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	466a      	mov	r2, sp
 80098ae:	f000 f849 	bl	8009944 <_fstat_r>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	dbed      	blt.n	8009892 <__swhatbuf_r+0x12>
 80098b6:	9901      	ldr	r1, [sp, #4]
 80098b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098c0:	4259      	negs	r1, r3
 80098c2:	4159      	adcs	r1, r3
 80098c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098c8:	e7eb      	b.n	80098a2 <__swhatbuf_r+0x22>

080098ca <__smakebuf_r>:
 80098ca:	898b      	ldrh	r3, [r1, #12]
 80098cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ce:	079d      	lsls	r5, r3, #30
 80098d0:	4606      	mov	r6, r0
 80098d2:	460c      	mov	r4, r1
 80098d4:	d507      	bpl.n	80098e6 <__smakebuf_r+0x1c>
 80098d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	6123      	str	r3, [r4, #16]
 80098de:	2301      	movs	r3, #1
 80098e0:	6163      	str	r3, [r4, #20]
 80098e2:	b003      	add	sp, #12
 80098e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e6:	466a      	mov	r2, sp
 80098e8:	ab01      	add	r3, sp, #4
 80098ea:	f7ff ffc9 	bl	8009880 <__swhatbuf_r>
 80098ee:	9f00      	ldr	r7, [sp, #0]
 80098f0:	4605      	mov	r5, r0
 80098f2:	4639      	mov	r1, r7
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7fe fc37 	bl	8008168 <_malloc_r>
 80098fa:	b948      	cbnz	r0, 8009910 <__smakebuf_r+0x46>
 80098fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009900:	059a      	lsls	r2, r3, #22
 8009902:	d4ee      	bmi.n	80098e2 <__smakebuf_r+0x18>
 8009904:	f023 0303 	bic.w	r3, r3, #3
 8009908:	f043 0302 	orr.w	r3, r3, #2
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	e7e2      	b.n	80098d6 <__smakebuf_r+0xc>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800991a:	81a3      	strh	r3, [r4, #12]
 800991c:	9b01      	ldr	r3, [sp, #4]
 800991e:	6020      	str	r0, [r4, #0]
 8009920:	b15b      	cbz	r3, 800993a <__smakebuf_r+0x70>
 8009922:	4630      	mov	r0, r6
 8009924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009928:	f000 f81e 	bl	8009968 <_isatty_r>
 800992c:	b128      	cbz	r0, 800993a <__smakebuf_r+0x70>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f023 0303 	bic.w	r3, r3, #3
 8009934:	f043 0301 	orr.w	r3, r3, #1
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	431d      	orrs	r5, r3
 800993e:	81a5      	strh	r5, [r4, #12]
 8009940:	e7cf      	b.n	80098e2 <__smakebuf_r+0x18>
	...

08009944 <_fstat_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	2300      	movs	r3, #0
 8009948:	4d06      	ldr	r5, [pc, #24]	@ (8009964 <_fstat_r+0x20>)
 800994a:	4604      	mov	r4, r0
 800994c:	4608      	mov	r0, r1
 800994e:	4611      	mov	r1, r2
 8009950:	602b      	str	r3, [r5, #0]
 8009952:	f7f9 f803 	bl	800295c <_fstat>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d102      	bne.n	8009960 <_fstat_r+0x1c>
 800995a:	682b      	ldr	r3, [r5, #0]
 800995c:	b103      	cbz	r3, 8009960 <_fstat_r+0x1c>
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	bd38      	pop	{r3, r4, r5, pc}
 8009962:	bf00      	nop
 8009964:	200005c8 	.word	0x200005c8

08009968 <_isatty_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	2300      	movs	r3, #0
 800996c:	4d05      	ldr	r5, [pc, #20]	@ (8009984 <_isatty_r+0x1c>)
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	602b      	str	r3, [r5, #0]
 8009974:	f7f9 f801 	bl	800297a <_isatty>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_isatty_r+0x1a>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_isatty_r+0x1a>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	200005c8 	.word	0x200005c8

08009988 <_init>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	bf00      	nop
 800998c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998e:	bc08      	pop	{r3}
 8009990:	469e      	mov	lr, r3
 8009992:	4770      	bx	lr

08009994 <_fini>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	bf00      	nop
 8009998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999a:	bc08      	pop	{r3}
 800999c:	469e      	mov	lr, r3
 800999e:	4770      	bx	lr
